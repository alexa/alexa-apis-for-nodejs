{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Skill Management API SDK"
  },
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "skillManagement": []
    }
  ],
  "paths": {
    "/v0/catalogs": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Lists catalogs associated with a vendor.",
        "parameters": [
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "vendorId",
            "in": "query",
            "description": "The vendor ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/v0.catalog.ListCatalogsResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          }
        },
        "x-operation-name": "listCatalogsForVendorV0"
      },
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Creates a new catalog based on information provided in the request.",
        "parameters": [
          {
            "in": "body",
            "name": "CreateCatalogRequest",
            "description": "Defines the request body for createCatalog API.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v0.catalog.CreateCatalogRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Catalog created.",
            "schema": {
              "$ref": "#/definitions/v0.catalog.CatalogDetails"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          }
        },
        "x-operation-name": "createCatalogV0"
      }
    },
    "/v0/catalogs/{catalogId}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Returns information about a particular catalog.",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "description": "Provides a unique identifier of the catalog.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "format": "Amazon Common Identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/v0.catalog.CatalogDetails"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          }
        },
        "x-operation-name": "getCatalogV0"
      }
    },
    "/v0/skills/{skillId}/catalogs": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Lists all the catalogs associated with a skill.",
        "parameters": [
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/v0.catalog.ListCatalogsResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          }
        },
        "x-operation-name": "listCatalogsForSkillV0"
      }
    },
    "/v0/skills/{skillId}/catalogs/{catalogId}": {
      "put": {
        "tags": [
          "skillManagement"
        ],
        "description": "Associate skill with catalog.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "Provides a unique identifier of the catalog.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "format": "Amazon Common Identifier"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          }
        },
        "x-operation-name": "associateCatalogWithSkillV0"
      }
    },
    "/v0/catalogs/{catalogId}/uploads": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Lists all the uploads for a particular catalog.",
        "parameters": [
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 50,
            "minimum": 1
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "Provides a unique identifier of the catalog.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "format": "Amazon Common Identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/v0.catalog.upload.ListUploadsResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          }
        },
        "x-operation-name": "listUploadsForCatalogV0"
      },
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Creates a new upload for a catalog and returns presigned upload parts for uploading the file.",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "description": "Provides a unique identifier of the catalog.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "format": "Amazon Common Identifier"
          },
          {
            "in": "body",
            "name": "CreateContentUploadRequest",
            "description": "Defines the request body for updateCatalog API.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v0.catalog.upload.CreateContentUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Content upload created.",
            "schema": {
              "$ref": "#/definitions/v0.catalog.upload.CreateContentUploadResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          }
        },
        "x-operation-name": "createContentUploadV0"
      }
    },
    "/v0/catalogs/{catalogId}/uploads/{uploadId}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Gets detailed information about an upload which was created for a specific catalog. Includes the upload's ingestion steps and a presigned url for downloading the file.",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "description": "Provides a unique identifier of the catalog.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "format": "Amazon Common Identifier"
          },
          {
            "name": "uploadId",
            "in": "path",
            "description": "Unique identifier of the upload.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/v0.catalog.upload.GetContentUploadResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          }
        },
        "x-operation-name": "getContentUploadByIdV0"
      },
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Completes an upload. To be called after the file is uploaded to the backend data store using presigned url(s).",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "description": "Provides a unique identifier of the catalog.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "format": "Amazon Common Identifier"
          },
          {
            "name": "uploadId",
            "in": "path",
            "description": "Unique identifier of the upload.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "CompleteUploadRequestPayload",
            "description": "Request payload to complete an upload.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v0.catalog.upload.CompleteUploadRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted."
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          }
        },
        "x-operation-name": "completeCatalogUploadV0"
      }
    },
    "/v0/developmentEvents/subscribers": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Lists the subscribers for a particular vendor.",
        "parameters": [
          {
            "name": "vendorId",
            "in": "query",
            "description": "The vendor ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 50,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/v0.developmentEvents.subscriber.ListSubscribersResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          }
        },
        "x-operation-name": "listSubscribersForDevelopmentEventsV0"
      },
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Creates a new subscriber resource for a vendor.",
        "parameters": [
          {
            "in": "body",
            "name": "CreateSubscriberRequest",
            "description": "Defines the request body for createSubscriber API.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v0.developmentEvents.subscriber.CreateSubscriberRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created. Returns a URL to retrieve the subscriber in 'Location' header.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Relative URL to retrieve the subscriber."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          }
        },
        "x-operation-name": "createSubscriberForDevelopmentEventsV0"
      }
    },
    "/v0/developmentEvents/subscribers/{subscriberId}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Returns information about specified subscriber.",
        "parameters": [
          {
            "name": "subscriberId",
            "in": "path",
            "description": "Unique identifier of the subscriber.",
            "required": true,
            "type": "string",
            "format": "Amazon Common Identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/v0.developmentEvents.subscriber.SubscriberInfo"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          }
        },
        "x-operation-name": "getSubscriberForDevelopmentEventsV0"
      },
      "put": {
        "tags": [
          "skillManagement"
        ],
        "description": "Updates the properties of a subscriber.",
        "parameters": [
          {
            "name": "subscriberId",
            "in": "path",
            "description": "Unique identifier of the subscriber.",
            "required": true,
            "type": "string",
            "format": "Amazon Common Identifier"
          },
          {
            "in": "body",
            "name": "UpdateSubscriberRequest",
            "description": "Defines the request body for updateSubscriber API.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v0.developmentEvents.subscriber.UpdateSubscriberRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          }
        },
        "x-operation-name": "setSubscriberForDevelopmentEventsV0"
      },
      "delete": {
        "tags": [
          "skillManagement"
        ],
        "description": "Deletes a specified subscriber.",
        "parameters": [
          {
            "name": "subscriberId",
            "in": "path",
            "description": "Unique identifier of the subscriber.",
            "required": true,
            "type": "string",
            "format": "Amazon Common Identifier"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          }
        },
        "x-operation-name": "deleteSubscriberForDevelopmentEventsV0"
      }
    },
    "/v0/developmentEvents/subscribers/{subscriberId}/test": {},
    "/v0/developmentEvents/subscriptions": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Lists all the subscriptions for a vendor/subscriber depending on the query parameter.",
        "parameters": [
          {
            "name": "vendorId",
            "in": "query",
            "description": "The vendor ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 50,
            "minimum": 1
          },
          {
            "name": "subscriberId",
            "in": "query",
            "description": "Unique identifier of the subscriber. If this query parameter is provided, the list would be filtered by the owning subscriberId.",
            "required": false,
            "type": "string",
            "format": "Amazon Common Identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/v0.developmentEvents.subscription.ListSubscriptionsResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          }
        },
        "x-operation-name": "listSubscriptionsForDevelopmentEventsV0"
      },
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Creates a new subscription for a subscriber. This needs to be authorized by the client/vendor who created the subscriber and the vendor who publishes the event.",
        "parameters": [
          {
            "in": "body",
            "name": "CreateSubscriptionRequest",
            "description": "Request body for createSubscription API.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/v0.developmentEvents.subscription.CreateSubscriptionRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created; Returns a URL to retrieve the subscription in 'Location' header.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Relative URL to retrieve the subscription."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          }
        },
        "x-operation-name": "createSubscriptionForDevelopmentEventsV0"
      }
    },
    "/v0/developmentEvents/subscriptions/{subscriptionId}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Returns information about a particular subscription. Both, the vendor who created the subscriber and the vendor who publishes the event can retrieve this resource with appropriate authorization.",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "Unique identifier of the subscription.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "format": "Amazon Common Identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/v0.developmentEvents.subscription.SubscriptionInfo"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          }
        },
        "x-operation-name": "getSubscriptionForDevelopmentEventsV0"
      },
      "put": {
        "tags": [
          "skillManagement"
        ],
        "description": "Updates the mutable properties of a subscription. This needs to be authorized by the client/vendor who created the subscriber and the vendor who publishes the event. The subscriberId cannot be updated.",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "Unique identifier of the subscription.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "format": "Amazon Common Identifier"
          },
          {
            "in": "body",
            "name": "UpdateSubscriptionRequest",
            "description": "Request body for updateSubscription API.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/v0.developmentEvents.subscription.UpdateSubscriptionRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          }
        },
        "x-operation-name": "setSubscriptionForDevelopmentEventsV0"
      },
      "delete": {
        "tags": [
          "skillManagement"
        ],
        "description": "Deletes a particular subscription. Both, the vendor who created the subscriber and the vendor who publishes the event can delete this resource with appropriate authorization.",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "Unique identifier of the subscription.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "format": "Amazon Common Identifier"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v0.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v0.Error"
            }
          }
        },
        "x-operation-name": "deleteSubscriptionForDevelopmentEventsV0"
      }
    },
    "/v0/skills/{skillId}/experiments": {},
    "/v0/skills/{skillId}/experiments/{experimentId}/properties": {},
    "/v0/skills/{skillId}/experiments/{experimentId}": {},
    "/v0/skills/{skillId}/experiments/{experimentId}/exposurePercentage": {},
    "/v0/skills/{skillId}/experiments/{experimentId}/treatmentOverrides/~current": {},
    "/v0/skills/{skillId}/experiments/{experimentId}/state": {},
    "/v0/skills/{skillId}/experiments/{experimentId}/metricSnapshots": {},
    "/v0/skills/{skillId}/experiments/{experimentId}/metricSnapshots/{metricSnapshotId}": {},
    "/v0/skills/{skillId}/_internationalize": {},
    "/v0/skills/{skillId}/_internationalizations/{internationalizationId}": {},
    "/v0/_burnerDeveloperAccounts": {},
    "/v0/_burnerDeveloperAccounts/{vendorId}": {},
    "/v1/catalogs/{catalogId}/urls": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Generates preSigned urls to upload data",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "description": "Provides a unique identifier of the catalog.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "format": "Amazon Common Identifier"
          },
          {
            "in": "body",
            "name": "GenerateCatalogUploadUrlRequestBody",
            "description": "Request body to generate catalog upload url",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.catalog.CreateContentUploadUrlRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/v1.catalog.CreateContentUploadUrlResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "generateCatalogUploadUrlV1"
      }
    },
    "/v1/catalogs/{catalogId}/uploads": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Create new upload",
        "description": "Creates a new upload for a catalog and returns location to track the upload process.",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "description": "Provides a unique identifier of the catalog.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "format": "Amazon Common Identifier"
          },
          {
            "in": "body",
            "name": "CatalogUploadRequestBody",
            "description": "Provides the request body for create content upload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.catalog.upload.CatalogUploadBase"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Contains relative URL to track upload."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes\ntotal requests, per API, ClientId, and CustomerId.\n",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "createCatalogUploadV1"
      }
    },
    "/v1/catalogs/{catalogId}/uploads/{uploadId}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Get upload",
        "description": "Gets detailed information about an upload which was created for a specific catalog. Includes the upload's ingestion steps and a url for downloading the file.",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "description": "Provides a unique identifier of the catalog.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "format": "Amazon Common Identifier"
          },
          {
            "name": "uploadId",
            "in": "path",
            "description": "Unique identifier of the upload.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/v1.catalog.upload.GetContentUploadResponse"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes\ntotal requests, per API, ClientId, and CustomerId.\n",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "getContentUploadByIdV1"
      }
    },
    "/v1/inSkillProducts": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get the list of in-skill products for the vendor.",
        "parameters": [
          {
            "name": "vendorId",
            "in": "query",
            "description": "The vendor ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 100,
            "minimum": 1
          },
          {
            "name": "productId",
            "in": "query",
            "description": "The list of in-skill product IDs that you wish to get the summary for. A maximum of 50 in-skill product IDs can be specified in a single listInSkillProducts call. Please note that this parameter must not be used with 'nextToken' and/or 'maxResults' parameter.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "stage",
            "in": "query",
            "description": "Filter in-skill products by specified stage.",
            "required": false,
            "type": "string",
            "maxLength": 63,
            "minLength": 1
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of in-skill product to filter on.",
            "required": false,
            "type": "string",
            "enum": [
              "SUBSCRIPTION",
              "ENTITLEMENT",
              "CONSUMABLE"
            ]
          },
          {
            "name": "referenceName",
            "in": "query",
            "description": "Filter in-skill products by reference name.",
            "required": false,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of in-skill product.",
            "required": false,
            "type": "string",
            "enum": [
              "INCOMPLETE",
              "COMPLETE",
              "CERTIFICATION",
              "PUBLISHED",
              "SUPPRESSED"
            ]
          },
          {
            "name": "isAssociatedWithSkill",
            "in": "query",
            "description": "Filter in-skill products by whether or not they are associated to a skill.",
            "required": false,
            "type": "string",
            "enum": [
              "ASSOCIATED_WITH_SKILL",
              "NO_SKILL_ASSOCIATIONS",
              "NOT_ASSOCIATED_WITH_SKILL"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Response contains list of in-skill products for the specified vendor and stage.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body.",
                "enum": [
                  "application/json"
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.isp.ListInSkillProductResponse"
            }
          },
          "400": {
            "description": "Bad request. Returned when a required parameter is not present, badly formatted.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Too many requests received.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "getIspListForVendorV1"
      },
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Creates a new in-skill product for given vendorId.",
        "parameters": [
          {
            "in": "body",
            "name": "createInSkillProductRequest",
            "description": "defines the request body for createInSkillProduct API.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.isp.createInSkillProductRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success.",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/v1.isp.ProductResponse"
            }
          },
          "400": {
            "description": "Bad request. Returned when a required parameter is not present, badly formatted.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Too many requests received.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "createIspForVendorV1"
      }
    },
    "/v1/skills/{skillId}/stages/{stage}/inSkillProducts": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get the list of in-skill products for the skillId.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stage",
            "in": "path",
            "description": "Stage for skill.",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "minLength": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 100,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Response contains list of in-skill products for the specified skillId and stage.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body.",
                "enum": [
                  "application/json"
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.isp.ListInSkillProductResponse"
            }
          },
          "400": {
            "description": "Bad request. Returned when a required parameter is not present, badly formatted.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Too many requests received.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "getIspListForSkillIdV1"
      }
    },
    "/v1/inSkillProducts/{productId}/stages/{stage}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Returns the in-skill product definition for given productId.",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The in-skill product ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stage",
            "in": "path",
            "description": "Stage for skill.",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Response contains the latest version of an in-skill product for the specified stage.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body.",
                "enum": [
                  "application/json"
                ]
              },
              "ETag": {
                "type": "string",
                "description": "Identifier for the version of the resource, can be used for conditional updates."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.isp.InSkillProductDefinitionResponse"
            }
          },
          "400": {
            "description": "Bad request. Returned when a required parameter is not present, badly formatted.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Too many requests received.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "getIspDefinitionV1"
      },
      "put": {
        "tags": [
          "skillManagement"
        ],
        "description": "Updates in-skill product definition for given productId. Only development stage supported.",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "description": "Request header that specified an entity tag. The server will update the resource only if the eTag matches with the resource's current eTag.",
            "required": false,
            "type": "string"
          },
          {
            "name": "productId",
            "in": "path",
            "description": "The in-skill product ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stage",
            "in": "path",
            "description": "Stage for skill.",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "updateInSkillProductRequest",
            "description": "defines the request body for updateInSkillProduct API.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.isp.updateInSkillProductRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body.",
                "enum": [
                  "application/json"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request. Returned when a required parameter is not present, badly formatted.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "Request is forbidden.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "412": {
            "description": "Precondition failed.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Too many requests received.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "updateIspForProductV1"
      },
      "delete": {
        "tags": [
          "skillManagement"
        ],
        "description": "Deletes the in-skill product for given productId. Only development stage supported. Live in-skill products or in-skill products associated with a skill cannot be deleted by this API.",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The in-skill product ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stage",
            "in": "path",
            "description": "Stage for skill.",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "minLength": 1
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Request header that specified an entity tag. The server will update the resource only if the eTag matches with the resource's current eTag.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success. No content.",
            "headers": {}
          },
          "400": {
            "description": "Bad request. Returned when a required parameter is not present, badly formatted.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "Request is forbidden.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "412": {
            "description": "Precondition failed.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Too many requests received.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "deleteIspForProductV1"
      }
    },
    "/v1/inSkillProducts/{productId}/stages/{stage}/summary": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get the summary information for an in-skill product.",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The in-skill product ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stage",
            "in": "path",
            "description": "Stage for skill.",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returns current in-skill product summary for productId.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body.",
                "enum": [
                  "application/json"
                ]
              },
              "ETag": {
                "type": "string",
                "description": "Identifier for the version of the resource, can be used for conditional updates."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.isp.InSkillProductSummaryResponse"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Too many requests received.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "getIspSummaryV1"
      }
    },
    "/v1/inSkillProducts/{productId}/stages/{stage}/skills": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get the associated skills for the in-skill product.",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The in-skill product ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stage",
            "in": "path",
            "description": "Stage for skill.",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "minLength": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 100,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returns skills associated with the in-skill product.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body.",
                "enum": [
                  "application/json"
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.isp.AssociatedSkillResponse"
            }
          },
          "400": {
            "description": "Bad request. Returned when a required parameter is not present, badly formatted.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Too many requests received.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "getIspAssociatedSkillsV1"
      }
    },
    "/v1/inSkillProducts/{productId}/skills/{skillId}": {
      "put": {
        "tags": [
          "skillManagement"
        ],
        "description": "Associates an in-skill product with a skill.",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The in-skill product ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        ],
        "responses": {
          "204": {
            "description": "Success. No content.",
            "headers": {}
          },
          "400": {
            "description": "Bad request. Returned when a required parameter is not present, badly formatted.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "Request is forbidden.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Too many requests received.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "associateIspWithSkillV1"
      },
      "delete": {
        "tags": [
          "skillManagement"
        ],
        "description": "Disassociates an in-skill product from a skill.",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The in-skill product ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        ],
        "responses": {
          "204": {
            "description": "Success. No content.",
            "headers": {}
          },
          "400": {
            "description": "Bad request. Returned when a required parameter is not present, badly formatted.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "Request is forbidden.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Too many requests received.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "disassociateIspWithSkillV1"
      }
    },
    "/v1/inSkillProducts/{productId}/stages/{stage}/entitlement": {
      "delete": {
        "tags": [
          "skillManagement"
        ],
        "description": "Resets the entitlement(s) of the Product for the current user.",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The in-skill product ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stage",
            "in": "path",
            "description": "Stage for skill.",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "minLength": 1
          }
        ],
        "responses": {
          "204": {
            "description": "Success. No content.",
            "headers": {}
          },
          "400": {
            "description": "Bad request. Returned when a required parameter is not present, badly formatted.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "Request is forbidden.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "412": {
            "description": "Precondition failed.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Too many requests received.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "resetEntitlementForProductV1"
      }
    },
    "/v1/skills/{skillId}/stages/{stageV2}/accountLinkingClient": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get AccountLinking information for the skill.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stageV2",
            "in": "path",
            "description": "Stages of a skill including the new certified stage.\n* `development` - skills which are currently in development corresponds to this stage.\n* `certified` -  skills which have completed certification and ready for publishing corresponds to this stage.\n* `live` - skills which are currently live corresponds to this stage.\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns AccountLinking response of the skill.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              },
              "ETag": {
                "type": "string",
                "description": "Identifer for the version of the resource, can be used for conditional updates."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.accountLinking.AccountLinkingResponse"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getAccountLinkingInfoV1"
      },
      "put": {
        "tags": [
          "skillManagement"
        ],
        "description": "Create AccountLinking information for the skill.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stageV2",
            "in": "path",
            "description": "Stages of a skill including the new certified stage.\n* `development` - skills which are currently in development corresponds to this stage.\n* `certified` -  skills which have completed certification and ready for publishing corresponds to this stage.\n* `live` - skills which are currently live corresponds to this stage.\n",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "accountLinkingRequest",
            "description": "The fields required to create accountLinking partner.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.accountLinking.AccountLinkingRequest"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Request header that specified an entity tag. The server will update the resource only if the eTag matches with the resource's current eTag.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only 'application/json' supported."
              },
              "ETag": {
                "type": "string",
                "description": "Identifer for the updated version of the resource, can be used for conditional updates."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error e.g. Authorization Url is invalid.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "412": {
            "description": "Precondition failed.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "updateAccountLinkingInfoV1"
      },
      "delete": {
        "tags": [
          "skillManagement"
        ],
        "description": "Delete AccountLinking information of a skill for the given stage.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stageV2",
            "in": "path",
            "description": "Stages of a skill including the new certified stage.\n* `development` - skills which are currently in development corresponds to this stage.\n* `certified` -  skills which have completed certification and ready for publishing corresponds to this stage.\n* `live` - skills which are currently live corresponds to this stage.\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success. No content."
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The specified skill/stage/accountLinkingClient doesn't exist.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "deleteAccountLinkingInfoV1"
      }
    },
    "/v1/skills/{skillId}/alexaHosted/repository/credentials/generate": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Generates hosted skill repository credentials to access the hosted skill repository.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "hostedSkillRepositoryCredentialsRequest",
            "description": "defines the request body for hosted skill repository credentials",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.AlexaHosted.HostedSkillRepositoryCredentialsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response contains the hosted skill repository credentials",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only \"application/json\" supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.AlexaHosted.HostedSkillRepositoryCredentialsList"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error e.g. Authorization Url is invalid",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "generateCredentialsForAlexaHostedSkillV1"
      }
    },
    "/v1/skills/{skillId}/alexaHosted": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get Alexa hosted skill's metadata",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "response contains the Alexa hosted skill's metadata",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only \"application/json\" supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.AlexaHosted.HostedSkillMetadata"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error e.g. Authorization Url is invalid",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getAlexaHostedSkillMetadataV1"
      }
    },
    "/v1/vendors/{vendorId}/alexaHosted/permissions/{hostedSkillPermissionType}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get the current user permissions about Alexa hosted skill features.",
        "parameters": [
          {
            "name": "vendorId",
            "in": "path",
            "description": "vendorId",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "hostedSkillPermissionType",
            "in": "path",
            "description": "The permission of a hosted skill feature that customer needs to check.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response contains the user's permission of hosted skill features",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only \"application/json\" supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.AlexaHosted.HostedSkillPermission"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error e.g. Authorization Url is invalid",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getAlexaHostedSkillUserPermissionsV1"
      }
    },
    "/v1/skills/{skillId}/betaTest": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Get beta test.",
        "description": "Get beta test for a given Alexa skill.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Content type of the response; only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.betaTest.BetaTest"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "409": {
            "description": "Thrown if user tries to request a new simulation while the old simulation is in progress.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "getBetaTestV1"
      },
      "post": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Create beta test.",
        "description": "Create a beta test for a given Alexa skill.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "createTestBody",
            "description": "JSON object containing the details of a beta test used to create the test.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/v1.skill.betaTest.TestBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success. Return a URL to track the resource in 'Location' header.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Content type of the response; only application/json supported."
              },
              "Location": {
                "type": "string",
                "description": "Relative URL to get the resource."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "createBetaTestV1"
      },
      "put": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Update beta test.",
        "description": "Update a beta test for a given Alexa skill.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "createTestBody",
            "description": "JSON object containing the details of a beta test used to create the test.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/v1.skill.betaTest.TestBody"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success. No content.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Content type of the response; only application/json supported."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "409": {
            "description": "Thrown if user tries to request a new simulation while the old simulation is in progress.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "updateBetaTestV1"
      }
    },
    "/v1/skills/{skillId}/betaTest/start": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Start beta test",
        "description": "Start a beta test for a given Alexa skill. System will send invitation emails to each tester in the test, and add entitlement on the acceptance.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        ],
        "responses": {
          "202": {
            "description": "Accept. Return a URL to track the resource in 'Location' header.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Content type of the response; only application/json supported."
              },
              "Location": {
                "type": "string",
                "description": "Relative URL to get the resource."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "startBetaTestV1"
      }
    },
    "/v1/skills/{skillId}/betaTest/end": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "summary": "End beta test.",
        "description": "End a beta test for a given Alexa skill. System will revoke the entitlement of each tester and send access-end notification email to them.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        ],
        "responses": {
          "202": {
            "description": "Accept. Return a URL to track the resource in 'Location' header.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Content type of the response; only application/json supported."
              },
              "Location": {
                "type": "string",
                "description": "Relative URL to get the resource."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "endBetaTestV1"
      }
    },
    "/v1/skills/{skillId}/betaTest/testers": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "List testers.",
        "description": "List all testers in a beta test for the given Alexa skill.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 500 results, you can add this parameter to your request. The response might contain fewer results than maxResults, but it will never contain more.",
            "required": false,
            "type": "integer",
            "maximum": 500,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Content type of the response; only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.betaTest.testers.ListTestersResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "getListOfTestersV1"
      }
    },
    "/v1/skills/{skillId}/betaTest/testers/add": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Add testers to an existing beta test.",
        "description": "Add testers to a beta test for the given Alexa skill.  System will send invitation email to each tester and add entitlement on the acceptance.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "TestersRequest",
            "description": "JSON object containing the email address of beta testers.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.betaTest.testers.TestersList"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success. No content.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Content type of the response; only application/json supported."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "addTestersToBetaTestV1"
      }
    },
    "/v1/skills/{skillId}/betaTest/testers/remove": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Remove testers from an existing beta test.",
        "description": "Remove testers from a beta test for the given Alexa skill.  System will send access end email to each tester and remove entitlement for them.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "TestersRequest",
            "description": "JSON object containing the email address of beta testers.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.betaTest.testers.TestersList"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success. No content.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Content type of the response; only application/json supported."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "removeTestersFromBetaTestV1"
      }
    },
    "/v1/skills/{skillId}/betaTest/testers/sendReminder": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Send reminder to testers in a beta test.",
        "description": "Send reminder to the testers in a beta test for the given Alexa skill.  System will send invitation email to each tester and add entitlement on the acceptance.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "TestersRequest",
            "description": "JSON object containing the email address of beta testers.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.betaTest.testers.TestersList"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success. No content.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Content type of the response; only application/json supported."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "sendReminderToTestersV1"
      }
    },
    "/v1/skills/{skillId}/betaTest/testers/requestFeedback": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Request feedback from testers.",
        "description": "Request feedback from the testers in a beta test for the given Alexa skill.  System will send notification emails to testers to request feedback.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "TestersRequest",
            "description": "JSON object containing the email address of beta testers.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.betaTest.testers.TestersList"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success. No content.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Content type of the response; only application/json supported."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "requestFeedbackFromTestersV1"
      }
    },
    "/v1/skills/{skillId}/stages/{stageV2}/blueprint/details": {},
    "/v1/skills/{skillId}/stages/{stageV2}/blueprint/data/locales/{locale}": {},
    "/v1/blueprints/{blueprintId}/versions/{blueprintVersion}/skills": {},
    "/v1/skills/{skillId}/certifications": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get list of all certifications available for a skill, including information about past certifications and any ongoing certification. The default sort order is descending on skillSubmissionTimestamp for Certifications.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 50,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of certifications for the skillId.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body. only application/hal+json supported.",
                "enum": [
                  "application/hal+json"
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.certification.ListCertificationsResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error e.g. if any request parameter is invalid like certification Id or pagination token etc. If the maxResults is not in the range of 1 to 50, it also qualifies for this error.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body. Only application/json supported.",
                "enum": [
                  "application/json"
                ]
              },
              "Content-Language": {
                "type": "string",
                "description": "Standard HTTP header for language for which the content of the response is intended. Only en-US, ja-JP supported for this API currently.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body. Only application/json supported.",
                "enum": [
                  "application/json"
                ]
              },
              "Content-Language": {
                "type": "string",
                "description": "Standard HTTP header for language for which the content of the response is intended. Only en-US, ja-JP supported for this API currently.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body. Only application/json supported.",
                "enum": [
                  "application/json"
                ]
              },
              "Content-Language": {
                "type": "string",
                "description": "Standard HTTP header for language for which the content of the response is intended. Only en-US, ja-JP supported for this API currently.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceeded the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body. Only application/json supported.",
                "enum": [
                  "application/json"
                ]
              },
              "Content-Language": {
                "type": "string",
                "description": "Standard HTTP header for language for which the content of the response is intended. Only en-US, ja-JP supported for this API currently.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body. Only application/json supported.",
                "enum": [
                  "application/json"
                ]
              },
              "Content-Language": {
                "type": "string",
                "description": "Standard HTTP header for language for which the content of the response is intended. Only en-US, ja-JP supported for this API currently.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "getCertificationsListV1"
      }
    },
    "/v1/skills/{skillId}/certifications/{certificationId}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Gets a specific certification resource. The response contains the review tracking information for a skill to show how much time the skill is expected to remain under review by Amazon. Once the review is complete, the response also contains the outcome of the review. Old certifications may not be available, however any ongoing certification would always give a response. If the certification is unavailable the result will return a 404 HTTP status code.\n",
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "User's locale/language in context.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "certificationId",
            "in": "path",
            "description": "Id of the certification. Reserved word identifier of mostRecent can be used to get the most recent certification for the skill. Note that the behavior of the API in this case would be the same as when the actual certification id of the most recent certification is used in the request.\n",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved skill certification information.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body. Only application/json supported.",
                "enum": [
                  "application/json"
                ]
              },
              "Content-Language": {
                "type": "string",
                "description": "Standard HTTP header for language for which the content of the response is intended. Only en-US, ja-JP supported for this API currently.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.certification.CertificationResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error e.g. if any request parameter is invalid like certification Id or pagination token etc. If the maxResults is not in the range of 1 to 50, it also qualifies for this error.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body. Only application/json supported.",
                "enum": [
                  "application/json"
                ]
              },
              "Content-Language": {
                "type": "string",
                "description": "Standard HTTP header for language for which the content of the response is intended. Only en-US, ja-JP supported for this API currently.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body. Only application/json supported.",
                "enum": [
                  "application/json"
                ]
              },
              "Content-Language": {
                "type": "string",
                "description": "Standard HTTP header for language for which the content of the response is intended. Only en-US, ja-JP supported for this API currently.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body. Only application/json supported.",
                "enum": [
                  "application/json"
                ]
              },
              "Content-Language": {
                "type": "string",
                "description": "Standard HTTP header for language for which the content of the response is intended. Only en-US, ja-JP supported for this API currently.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceeded the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body. only application/json supported",
                "enum": [
                  "application/json"
                ]
              },
              "Content-Language": {
                "type": "string",
                "description": "Standard HTTP header for language for which the content of the response is intended. Only en-US, ja-JP supported for this API currently.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body. Only application/json supported.",
                "enum": [
                  "application/json"
                ]
              },
              "Content-Language": {
                "type": "string",
                "description": "Standard HTTP header for language for which the content of the response is intended. Only en-US, ja-JP supported for this API currently.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "getCertificationReviewV1"
      }
    },
    "/v1/skills/{skillId}/stages/{stage}/enablement": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Checks whether an enablement exist for given skillId/stage and customerId (retrieved from Auth token)",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stage",
            "in": "path",
            "description": "Stage for skill.",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "minLength": 1
          }
        ],
        "responses": {
          "204": {
            "description": "No Content; Confirms that enablement resource exists for given skillId & stage.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Contains content type of the response; only application/json supported."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getSkillEnablementStatusV1"
      },
      "put": {
        "tags": [
          "skillManagement"
        ],
        "description": "Creates/Updates the enablement for given skillId/stage and customerId (retrieved from Auth token)",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stage",
            "in": "path",
            "description": "Stage for skill.",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "minLength": 1
          }
        ],
        "responses": {
          "204": {
            "description": "No Content; Confirms that enablement is successfully created/updated.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Contains content type of the response; only application/json supported."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "setSkillEnablementV1"
      },
      "delete": {
        "tags": [
          "skillManagement"
        ],
        "description": "Deletes the enablement for given skillId/stage and customerId (retrieved from Auth token).",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stage",
            "in": "path",
            "description": "Stage for skill.",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "minLength": 1
          }
        ],
        "responses": {
          "204": {
            "description": "No Content; Confirms that enablement is successfully deleted.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Contains content type of the response; only application/json supported."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "deleteSkillEnablementV1"
      }
    },
    "/v1/skills/{skillId}/stages/{stage}/interactionModel/locales/{locale}/profileNlu": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Profile a test utterance.",
        "description": "This is a synchronous API that profiles an utterance against interaction model.",
        "parameters": [
          {
            "in": "body",
            "name": "profileNluRequest",
            "description": "Payload sent to the profile nlu API.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.evaluations.ProfileNluRequest"
            }
          },
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stage",
            "in": "path",
            "description": "Stage for skill.",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "minLength": 1
          },
          {
            "name": "locale",
            "in": "path",
            "description": "The locale for the model requested e.g. en-GB, en-US, de-DE.",
            "required": true,
            "type": "string",
            "format": "languager-region; same as BCP-47 language tag format"
          }
        ],
        "responses": {
          "200": {
            "description": "Profiled utterance against interaction model and returned nlu response successfully.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.evaluations.ProfileNluResponse"
            }
          },
          "400": {
            "description": "Bad request due to invalid or missing data.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "409": {
            "description": "This requests conflicts with another one currently being processed.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "API user has exceeded the permitted request rate.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal service error.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            }
          }
        },
        "x-operation-name": "profileNluV1"
      }
    },
    "/v1/skills/{skillId}/experiments": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Gets a list of all experiments associated with this skill id.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 50,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returned skill experiments.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only 'application/json' supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.experiment.ListExperimentsResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "listExperimentsV1"
      },
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Create a new experiment for a skill.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "createExperimentRequest",
            "description": "Defines the request body for creating an experiment.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.experiment.CreateExperimentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Experiment created. Returns the generated experiment identifier in 'Location' header.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Content type of the response; only application/json supported."
              },
              "Location": {
                "type": "string",
                "description": "Relative url to get experiment details."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "createExperimentV1"
      }
    },
    "/v1/skills/{skillId}/experiments/{experimentId}/properties": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Updates an existing experiment for a skill.\nCan only be called while the experiment is in CREATED state.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "experimentId",
            "in": "path",
            "description": "Identifies the experiment in a skill.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "updateExperimentRequest",
            "description": "Defines the request body for updating an experiment.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.experiment.UpdateExperimentRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success. No content.",
            "headers": {}
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "updateExperimentV1"
      }
    },
    "/v1/skills/{skillId}/experiments/{experimentId}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Retrieves an existing experiment for a skill.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "experimentId",
            "in": "path",
            "description": "Identifies the experiment in a skill.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returned skill experiment.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only 'application/json' supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.experiment.GetExperimentResponse"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getExperimentV1"
      },
      "delete": {
        "tags": [
          "skillManagement"
        ],
        "description": "Deletes an existing experiment for a skill.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "experimentId",
            "in": "path",
            "description": "Identifies the experiment in a skill.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        ],
        "responses": {
          "204": {
            "description": "Success. No content.",
            "headers": {}
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "deleteExperimentV1"
      }
    },
    "/v1/skills/{skillId}/experiments/{experimentId}/exposurePercentage": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Updates the exposure of an experiment that is in CREATED or RUNNING state.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "experimentId",
            "in": "path",
            "description": "Identifies the experiment in a skill.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "updateExposureRequest",
            "description": "Defines the request body for updating the exposure percentage of a running experiment.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.experiment.UpdateExposureRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success. No content.",
            "headers": {}
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "updateExposureV1"
      }
    },
    "/v1/skills/{skillId}/experiments/{experimentId}/treatmentOverrides/~current": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Retrieves the current user's customer treatment override for an existing A/B Test experiment.\nThe current user must be under the same skill vendor of the requested skill id to have access to the resource.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "experimentId",
            "in": "path",
            "description": "Identifies the experiment in a skill.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returned customer treatment override details.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only 'application/json' supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.experiment.GetCustomerTreatmentOverrideResponse"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getCustomerTreatmentOverrideV1"
      },
      "put": {
        "tags": [
          "skillManagement"
        ],
        "description": "Adds the requesting user's customer treatment override to an existing experiment.\nThe current user must be under the same skill vendor of the requested skill id to have access to the resource.\nOnly the current user can attempt to add the override of their own customer account to an experiment.\nCan only be called before the experiment is enabled.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "experimentId",
            "in": "path",
            "description": "Identifies the experiment in a skill.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "setCustomerTreatmentOverrideRequest",
            "description": "Defines the request body for adding this customer's treatment override to an experiment.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.experiment.SetCustomerTreatmentOverrideRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success. No content.",
            "headers": {}
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "setCustomerTreatmentOverrideV1"
      }
    },
    "/v1/skills/{skillId}/experiments/{experimentId}/state": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Retrieves the current state of the experiment.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "experimentId",
            "in": "path",
            "description": "Identifies the experiment in a skill.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returned skill experiment state.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only 'application/json' supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.experiment.GetExperimentStateResponse"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getExperimentStateV1"
      },
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Requests an action on the experiment to move it to the targetState.\nAcceptable targetState values are:\n* `ENABLED`: Experiment configurations are deployed and customer overrides are enabled. Actual experiment has not started yet but customers with overrides set to T1 will see the T1 behavior. Initial state must be CREATED.\n* `RUNNING`: Starts the experiment with the configured exposure. Skill customers selected to be in the experiment will start contributing to the metric data. Initial state must be CREATED or ENABLED.\n* `STOPPED`: Stops the experiment by removing the experiment configurations. All customer treatment overrides are removed. Initial state must be ENABLED or RUNNING.\n             Final state for ENDPOINT_BASED experiments, no further action is taken by ASK. It is expected that the skill builder updates their endpoint code to make T1 the default live behavior.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "experimentId",
            "in": "path",
            "description": "Identifies the experiment in a skill.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "manageExperimentStateRequest",
            "description": "Defines the request body for performing an experiment action to move it to a target state.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.experiment.ManageExperimentStateRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted; Returns a URL to track the experiment state in 'Location' header.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Contains content type of the response; only application/json supported."
              },
              "Location": {
                "type": "string",
                "description": "Contains relative URL to get experiment state."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "manageExperimentStateV1"
      }
    },
    "/v1/skills/{skillId}/experiments/{experimentId}/metricSnapshots": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Gets a list of all metric snapshots associated with this experiment id. The metric snapshots\nrepresent the metric data available for a time range.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "experimentId",
            "in": "path",
            "description": "Identifies the experiment in a skill.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 50,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returned experiment metric snapshots.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only 'application/json' supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.experiment.ListExperimentMetricSnapshotsResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "listExperimentMetricSnapshotsV1"
      }
    },
    "/v1/skills/{skillId}/experiments/{experimentId}/metricSnapshots/{metricSnapshotId}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Gets a list of all metric data associated with this experiment's metric snapshot.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "experimentId",
            "in": "path",
            "description": "Identifies the experiment in a skill.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "metricSnapshotId",
            "in": "path",
            "description": "Identifies the experiment metric snapshot in a skill experiment. The metric snapshot\nrepresents metric data for a date range.\n",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returned experiment metric data.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only 'application/json' supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.experiment.GetExperimentMetricSnapshotResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getExperimentMetricSnapshotV1"
      }
    },
    "/v1/skills/{skillId}/history/intentRequests": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "The Intent Request History API provides customers with the aggregated and anonymized transcription of user speech data and intent request details for their skills.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 50,
            "minimum": 1
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Sets the sorting direction of the result items. When set to 'asc' these items are returned in ascending order of sortField value and when set to 'desc' these items are returned in descending order of sortField value.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "Sets the field on which the sorting would be applied.",
            "required": false,
            "type": "string"
          },
          {
            "name": "stage",
            "in": "query",
            "description": "The stage of the skill to be used for evaluation. An error will be returned if this skill stage is not enabled on the account used for evaluation.",
            "required": true,
            "type": "string",
            "enum": [
              "development",
              "live"
            ]
          },
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "$ref": "#/definitions/v1.skill.history.localeInQuery"
            }
          },
          {
            "name": "dialogAct.name",
            "in": "query",
            "description": "A filter used to retrieve items where the dialogAct name is equal to the given value.\n* `Dialog.ElicitSlot`: Alexa asked the user for the value of a specific slot. (https://developer.amazon.com/docs/custom-skills/dialog-interface-reference.html#elicitslot)\n* `Dialog.ConfirmSlot`: Alexa confirmed the value of a specific slot before continuing with the dialog. (https://developer.amazon.com/docs/custom-skills/dialog-interface-reference.html#confirmslot)\n* `Dialog.ConfirmIntent`: Alexa confirmed the all the information the user has provided for the intent before the skill took action. (https://developer.amazon.com/docs/custom-skills/dialog-interface-reference.html#confirmintent)\n",
            "required": false,
            "type": "array",
            "items": {
              "$ref": "#/definitions/v1.skill.history.DialogActName"
            }
          },
          {
            "name": "intent.confidence.bin",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "$ref": "#/definitions/v1.skill.history.IntentConfidenceBin"
            }
          },
          {
            "name": "intent.name",
            "in": "query",
            "description": "A filter used to retrieve items where the intent name is equal to the given value.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "intent.slots.name",
            "in": "query",
            "description": "A filter used to retrieve items where the one of the slot names is equal to the given value.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "interactionType",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "$ref": "#/definitions/v1.skill.history.InteractionType"
            }
          },
          {
            "name": "publicationStatus",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "$ref": "#/definitions/v1.skill.history.PublicationStatus"
            }
          },
          {
            "name": "utteranceText",
            "in": "query",
            "description": "A filter used to retrieve items where the utterance text contains the given phrase. Each filter value can be at-least 1 character and at-most 100 characters long.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of utterance items for the given skill.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/json+hal supported"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.history.IntentRequests"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "404": {
            "description": "Skill Not Found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getUtteranceDataV1"
      }
    },
    "/v1/skills/{skillId}/stages/{stageV2}/interactionModel/locales/{locale}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Gets the `InteractionModel` for the skill in the given stage.\nThe path params **skillId**, **stage** and **locale** are required.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stageV2",
            "in": "path",
            "description": "Stages of a skill including the new certified stage.\n* `development` - skills which are currently in development corresponds to this stage.\n* `certified` -  skills which have completed certification and ready for publishing corresponds to this stage.\n* `live` - skills which are currently live corresponds to this stage.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "locale",
            "in": "path",
            "description": "The locale for the model requested e.g. en-GB, en-US, de-DE.",
            "required": true,
            "type": "string",
            "format": "languager-region; same as BCP-47 language tag format"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns interaction model object on success.",
            "headers": {
              "ETag": {
                "type": "string",
                "description": "Identifer for the version of the resource, can be used for conditional updates."
              },
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only 'application/json' supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.InteractionModelData"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The specified skill doesn't exist or there is no model defined for the locale.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getInteractionModelV1"
      },
      "head": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get the latest metadata for the interaction model resource for the given stage.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stageV2",
            "in": "path",
            "description": "Stages of a skill including the new certified stage.\n* `development` - skills which are currently in development corresponds to this stage.\n* `certified` -  skills which have completed certification and ready for publishing corresponds to this stage.\n* `live` - skills which are currently live corresponds to this stage.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "locale",
            "in": "path",
            "description": "The locale for the model requested e.g. en-GB, en-US, de-DE.",
            "required": true,
            "type": "string",
            "format": "languager-region; same as BCP-47 language tag format"
          }
        ],
        "responses": {
          "204": {
            "description": "Success. There is no content but returns etag.",
            "headers": {
              "ETag": {
                "type": "string",
                "description": "Identifer for the version of the resource, can be used for conditional updates"
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The specified skill or stage or locale does not exist",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getInteractionModelMetadataV1"
      },
      "put": {
        "tags": [
          "skillManagement"
        ],
        "description": "Creates an `InteractionModel` for the skill.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stageV2",
            "in": "path",
            "description": "Stages of a skill including the new certified stage.\n* `development` - skills which are currently in development corresponds to this stage.\n* `certified` -  skills which have completed certification and ready for publishing corresponds to this stage.\n* `live` - skills which are currently live corresponds to this stage.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "locale",
            "in": "path",
            "description": "The locale for the model requested e.g. en-GB, en-US, de-DE.",
            "required": true,
            "type": "string",
            "format": "languager-region; same as BCP-47 language tag format"
          },
          {
            "in": "body",
            "name": "interactionModel",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.InteractionModelData"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Request header that specified an entity tag. The server will update the resource only if the eTag matches with the resource's current eTag.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Returns build status location link on success.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Build status URL."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error e.g. the input interaction model is invalid.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The specified skill or stage or locale does not exist.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "412": {
            "description": "Precondition failed.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "setInteractionModelV1"
      }
    },
    "/v1/skills/api/custom/interactionModel/catalogs": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "List all catalogs for the vendor.\n",
        "parameters": [
          {
            "name": "vendorId",
            "in": "query",
            "description": "The vendor ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 50,
            "minimum": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Sets the sorting direction of the result items. When set to 'asc' these items are returned in ascending order of sortField value and when set to 'desc' these items are returned in descending order of sortField value.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of catalogs for the vendor.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/hal+json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.catalog.ListCatalogResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "There is no catalog defined for the catalogId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "listInteractionModelCatalogsV1"
      },
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Create a new version of catalog within the given catalogId.\n",
        "parameters": [
          {
            "in": "body",
            "name": "catalog",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.catalog.DefinitionData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the generated catalogId.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/hal+json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.catalog.CatalogResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error e.g. the catalog definition is invalid.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "412": {
            "description": "Precondition failed.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "createInteractionModelCatalogV1"
      }
    },
    "/v1/skills/api/custom/interactionModel/catalogs/{catalogId}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "get the catalog definition\n",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "description": "Provides a unique identifier of the catalog.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "format": "Amazon Common Identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "the catalog definition",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/hal+json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.catalog.CatalogDefinitionOutput"
            }
          },
          "400": {
            "description": "The catalog cannot be retrieved due to errors listed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "There is no catalog defined for the catalogId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getInteractionModelCatalogDefinitionV1"
      },
      "delete": {
        "tags": [
          "skillManagement"
        ],
        "description": "Delete the catalog.\n",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "description": "Provides a unique identifier of the catalog.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "format": "Amazon Common Identifier"
          }
        ],
        "responses": {
          "204": {
            "description": "No content; just confirm the catalog is deleted.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/hal+json supported."
              }
            }
          },
          "400": {
            "description": "The catalog cannot be deleted from reasons due to in-use by other entities.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "There is no catalog defined for the catalogId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "deleteInteractionModelCatalogV1"
      }
    },
    "/v1/skills/api/custom/interactionModel/catalogs/{catalogId}/updateRequest/{updateRequestId}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get the status of catalog resource and its sub-resources for a given catalogId.\n",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "description": "Provides a unique identifier of the catalog.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "format": "Amazon Common Identifier"
          },
          {
            "name": "updateRequestId",
            "in": "path",
            "description": "The identifier for slotType version creation process",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the build status and error codes for the given catalogId",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/hal+json supported"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.catalog.CatalogStatus"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "There is no catalog defined for the catalogId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getInteractionModelCatalogUpdateStatusV1"
      }
    },
    "/v1/skills/api/custom/interactionModel/catalogs/{catalogId}/update": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "update description and vendorGuidance string for certain version of a catalog.\n",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "description": "Provides a unique identifier of the catalog.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "format": "Amazon Common Identifier"
          },
          {
            "in": "body",
            "name": "updateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.catalog.UpdateRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content, indicates the fields were successfully updated."
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "There is no catalog defined for the catalogId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "updateInteractionModelCatalogV1"
      }
    },
    "/v1/skills/{skillId}/stages/{stage}/interactionModel/locales/{locale}/versions/{version}/conflictDetectionJobStatus": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Retrieve conflict detection job status for skill.",
        "description": "This API returns the job status of conflict detection job for a specified interaction model.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "locale",
            "in": "path",
            "description": "The locale for the model requested e.g. en-GB, en-US, de-DE.",
            "required": true,
            "type": "string",
            "format": "languager-region; same as BCP-47 language tag format"
          },
          {
            "name": "stage",
            "in": "path",
            "description": "Stage of the interaction model.",
            "required": true,
            "type": "string",
            "enum": [
              "development"
            ]
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version of interaction model. Use \"~current\" to get the model of the current version.",
            "required": true,
            "type": "string",
            "pattern": "^~current|[0-9]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "Get conflict detection results successfully.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "returned content type, only application/json supported"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.conflictDetection.GetConflictDetectionJobStatusResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "There is no catalog defined for the catalogId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getConflictDetectionJobStatusForInteractionModelV1"
      }
    },
    "/v1/skills/{skillId}/stages/{stage}/interactionModel/locales/{locale}/versions/{version}/conflicts": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Retrieve conflict detection results for a specified interaction model.",
        "description": "This is a paginated API that retrieves results of conflict detection job for a specified interaction model.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "locale",
            "in": "path",
            "description": "The locale for the model requested e.g. en-GB, en-US, de-DE.",
            "required": true,
            "type": "string",
            "format": "languager-region; same as BCP-47 language tag format"
          },
          {
            "name": "stage",
            "in": "path",
            "description": "Stage of the interaction model.",
            "required": true,
            "type": "string",
            "enum": [
              "development"
            ]
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version of interaction model. Use \"~current\" to get the model of the current version.",
            "required": true,
            "type": "string",
            "pattern": "^~current|[0-9]+$"
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. Defaults to 100. If more results are present, the response will contain a nextToken and a _link.next href.",
            "required": false,
            "type": "number",
            "default": 100,
            "maximum": 1000,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Get conflict detection results sucessfully.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "returned content type, only application/json supported"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.conflictDetection.GetConflictsResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "There is no catalog defined for the catalogId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getConflictsForInteractionModelV1"
      }
    },
    "/v1/skills/api/custom/interactionModel/catalogs/{catalogId}/versions": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "List all the historical versions of the given catalogId.",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "description": "Provides a unique identifier of the catalog.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "format": "Amazon Common Identifier"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 50,
            "minimum": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Sets the sorting direction of the result items. When set to 'asc' these items are returned in ascending order of sortField value and when set to 'desc' these items are returned in descending order of sortField value.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "Sets the field on which the sorting would be applied.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of catalogs for the vendor.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/hal+json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.version.ListCatalogEntityVersionsResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error e.g. the catalog definition is invalid.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The specified catalog does not exist.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "listInteractionModelCatalogVersionsV1"
      },
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Create a new version of catalog entity for the given catalogId.\n",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "description": "Provides a unique identifier of the catalog.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "format": "Amazon Common Identifier"
          },
          {
            "in": "body",
            "name": "catalog",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.version.VersionData"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Returns update status location link on success.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the catalog status to track."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error e.g. the catalog definition is invalid.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The specified catalog does not exist.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "createInteractionModelCatalogVersionV1"
      }
    },
    "/v1/skills/api/custom/interactionModel/catalogs/{catalogId}/versions/{version}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get catalog version data of given catalog version.\n",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "description": "Provides a unique identifier of the catalog.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "format": "Amazon Common Identifier"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version for interaction model.",
            "required": true,
            "type": "string",
            "pattern": "^~current|^~latest|[0-9]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the catalog version metadata for the given catalogId and version.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/hal+json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.version.CatalogVersionData"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "There is no catalog defined for the catalogId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getInteractionModelCatalogVersionV1"
      },
      "delete": {
        "tags": [
          "skillManagement"
        ],
        "description": "Delete catalog version.\n",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "description": "Provides a unique identifier of the catalog.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "format": "Amazon Common Identifier"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version for interaction model.",
            "required": true,
            "type": "string",
            "pattern": "^~current|^~latest|[0-9]+$"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content; Confirms that version is successfully deleted."
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "There is no catalog version for this catalogId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "deleteInteractionModelCatalogVersionV1"
      }
    },
    "/v1/skills/api/custom/interactionModel/catalogs/{catalogId}/versions/{version}/update": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Update description and vendorGuidance string for certain version of a catalog.\n",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "description": "Provides a unique identifier of the catalog.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "format": "Amazon Common Identifier"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version for interaction model.",
            "required": true,
            "type": "string",
            "pattern": "^~current|^~latest|[0-9]+$"
          },
          {
            "in": "body",
            "name": "catalogUpdate",
            "required": false,
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.version.catalogUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content; Confirms that version is successfully updated."
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "There is no catalog defined for the catalogId",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "updateInteractionModelCatalogVersionV1"
      }
    },
    "/v1/skills/api/custom/interactionModel/catalogs/{catalogId}/versions/{version}/values": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get catalog values from the given catalogId & version.\n",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "description": "Provides a unique identifier of the catalog.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "format": "Amazon Common Identifier"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version for interaction model.",
            "required": true,
            "type": "string",
            "pattern": "^~current|^~latest|[0-9]+$"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 50,
            "minimum": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of catalog values for the given catalogId and version.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/hal+json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.version.CatalogValues"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "There is no catalog defined for the catalogId",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getInteractionModelCatalogValuesV1"
      }
    },
    "/v1/skills/{skillId}/stages/{stageV2}/interactionModel/locales/{locale}/versions/{version}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Gets the specified version `InteractionModel` of a skill for the vendor. Use `~current` as version parameter to get the current version model.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stageV2",
            "in": "path",
            "description": "Stages of a skill including the new certified stage.\n* `development` - skills which are currently in development corresponds to this stage.\n* `certified` -  skills which have completed certification and ready for publishing corresponds to this stage.\n* `live` - skills which are currently live corresponds to this stage.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "locale",
            "in": "path",
            "description": "The locale for the model requested e.g. en-GB, en-US, de-DE.",
            "required": true,
            "type": "string",
            "format": "languager-region; same as BCP-47 language tag format"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version for interaction model.",
            "required": true,
            "type": "string",
            "pattern": "^~current|^~latest|[0-9]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns interaction model object on success.",
            "headers": {
              "ETag": {
                "type": "string",
                "description": "Identifer for the version of the resource, can be used for conditional updates."
              },
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only 'application/json' supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.InteractionModelData"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error e.g. the input interaction model is invalid.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The specified skill doesn't exist or there is no model defined for the locale or version.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getInteractionModelVersionV1"
      }
    },
    "/v1/skills/{skillId}/stages/{stageV2}/interactionModel/locales/{locale}/versions": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get the list of interactionModel versions of a skill for the vendor.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stageV2",
            "in": "path",
            "description": "Stages of a skill including the new certified stage.\n* `development` - skills which are currently in development corresponds to this stage.\n* `certified` -  skills which have completed certification and ready for publishing corresponds to this stage.\n* `live` - skills which are currently live corresponds to this stage.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "locale",
            "in": "path",
            "description": "The locale for the model requested e.g. en-GB, en-US, de-DE.",
            "required": true,
            "type": "string",
            "format": "languager-region; same as BCP-47 language tag format"
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 50,
            "minimum": 1
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Sets the sorting direction of the result items. When set to 'asc' these items are returned in ascending order of sortField value and when set to 'desc' these items are returned in descending order of sortField value.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "Sets the field on which the sorting would be applied.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of interactionModel versions of a skill for the vendor.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/hal+json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.version.ListResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error e.g. the input interaction model is invalid.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The specified skill doesn't exist or there is no model defined for the locale.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "listInteractionModelVersionsV1"
      }
    },
    "/v1/skills/api/custom/interactionModel/slotTypes": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "List all slot types for the vendor.\n",
        "parameters": [
          {
            "name": "vendorId",
            "in": "query",
            "description": "The vendor ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 50,
            "minimum": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Sets the sorting direction of the result items. When set to 'asc' these items are returned in ascending order of sortField value and when set to 'desc' these items are returned in descending order of sortField value.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of slot types for the vendor.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/hal+json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.type.ListSlotTypeResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "listInteractionModelSlotTypesV1"
      },
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Create a new version of slot type within the given slotTypeId.\n",
        "parameters": [
          {
            "in": "body",
            "name": "slotType",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.type.DefinitionData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the generated slotTypeId.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/hal+json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.type.SlotTypeResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error e.g. the slot type definition is invalid.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "createInteractionModelSlotTypeV1"
      }
    },
    "/v1/skills/api/custom/interactionModel/slotTypes/{slotTypeId}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get the slot type definition.\n",
        "parameters": [
          {
            "name": "slotTypeId",
            "in": "path",
            "description": "The identifier for a slot type.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The slot type definition.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/hal+json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.type.SlotTypeDefinitionOutput"
            }
          },
          "400": {
            "description": "The slot type cannot be retrieved due to errors listed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "There is no slot type defined for the slotTypeId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getInteractionModelSlotTypeDefinitionV1"
      },
      "delete": {
        "tags": [
          "skillManagement"
        ],
        "description": "Delete the slot type.\n",
        "parameters": [
          {
            "name": "slotTypeId",
            "in": "path",
            "description": "The identifier for a slot type.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content; just confirm the slot type is deleted.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/hal+json supported."
              }
            }
          },
          "400": {
            "description": "The slot type cannot be deleted from reasons due to in-use by other entities.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "There is no slot type defined for the slotTypeId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "deleteInteractionModelSlotTypeV1"
      }
    },
    "/v1/skills/api/custom/interactionModel/slotTypes/{slotTypeId}/updateRequest/{updateRequestId}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get the status of slot type resource and its sub-resources for a given slotTypeId.\n",
        "parameters": [
          {
            "name": "slotTypeId",
            "in": "path",
            "description": "The identifier for a slot type.",
            "required": true,
            "type": "string"
          },
          {
            "name": "updateRequestId",
            "in": "path",
            "description": "The identifier for slotType version creation process",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the build status and error codes for the given slotTypeId.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/hal+json supported"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.type.SlotTypeStatus"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "There is no slot type defined for the slotTypeId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getInteractionModelSlotTypeBuildStatusV1"
      }
    },
    "/v1/skills/api/custom/interactionModel/slotTypes/{slotTypeId}/update": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Update description and vendorGuidance string for certain version of a slot type.\n",
        "parameters": [
          {
            "name": "slotTypeId",
            "in": "path",
            "description": "The identifier for a slot type.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "updateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.type.UpdateRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content, indicates the fields were successfully updated."
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "There is no slot type defined for the slotTypeId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "updateInteractionModelSlotTypeV1"
      }
    },
    "/v1/skills/api/custom/interactionModel/jobs": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Retrieve a list of jobs associated with the vendor.",
        "parameters": [
          {
            "name": "vendorId",
            "in": "query",
            "description": "The vendor ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 50,
            "minimum": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "List of all jobs associated with the vendor.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Contains content type of the response; only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.jobs.ListJobDefinitionsResponse"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "listJobDefinitionsForInteractionModelV1"
      },
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Creates a new Job Definition from the Job Definition request provided. This can be either a CatalogAutoRefresh, which supports time-based configurations for catalogs, or a ReferencedResourceVersionUpdate, which is used for slotTypes and Interaction models to be automatically updated on the dynamic update of their referenced catalog.\n",
        "parameters": [
          {
            "in": "body",
            "name": "createJobDefinitionRequest",
            "description": "Request to create a new Job Definition.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.jobs.CreateJobDefinitionRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the generated jobId.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/hal+json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.jobs.CreateJobDefinitionResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.jobs.ValidationErrors"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "createJobDefinitionForInteractionModelV1"
      }
    },
    "/v1/skills/api/custom/interactionModel/jobs/{jobId}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get the job definition for a given jobId.\n",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The identifier for dynamic jobs.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The job definition for a given jobId.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/hal+json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.jobs.JobDefinition"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getJobDefinitionForInteractionModelV1"
      },
      "delete": {
        "tags": [
          "skillManagement"
        ],
        "description": "Delete the job definition for a given jobId.",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The identifier for dynamic jobs.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content, confirms the resource is updated."
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.jobs.ValidationErrors"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "deleteJobDefinitionForInteractionModelV1"
      }
    },
    "/v1/skills/api/custom/interactionModel/jobs/{jobId}/status": {
      "put": {
        "tags": [
          "skillManagement"
        ],
        "description": "Update the JobStatus to Enable or Disable a job.",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The identifier for dynamic jobs.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "updateJobStatusRequest",
            "description": "Request to update Job Definition status.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.jobs.UpdateJobStatusRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content; Confirms that the fields are updated.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/hal+json supported."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Contains content type of the response; only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.jobs.ValidationErrors"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "setJobStatusForInteractionModelV1"
      }
    },
    "/v1/skills/api/custom/interactionModel/jobs/{jobId}/executions": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "List the execution history associated with the job definition, with default sortField to be the executions' timestamp.",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The identifier for dynamic jobs.",
            "required": true,
            "type": "string"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 50,
            "minimum": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Sets the sorting direction of the result items. When set to 'asc' these items are returned in ascending order of sortField value and when set to 'desc' these items are returned in descending order of sortField value.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrun list of executions associated with the job definition.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Contains content type of the response; only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.jobs.GetExecutionsResponse"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "listJobExecutionsForInteractionModelV1"
      }
    },
    "/v1/skills/api/custom/interactionModel/jobs/{jobId}/executions/{executionId}": {
      "delete": {
        "tags": [
          "skillManagement"
        ],
        "description": "Cancel the next execution for the given job.",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The identifier for dynamic jobs.",
            "required": true,
            "type": "string"
          },
          {
            "name": "executionId",
            "in": "path",
            "description": "The identifier for dynamic job executions. Currently only allowed for scheduled executions.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content; Confirms that the next execution is canceled.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/hal+json supported."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/hal+json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.jobs.ValidationErrors"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "cancelNextJobExecutionForInteractionModelV1"
      }
    },
    "/v1/skills/api/custom/interactionModel/slotTypes/{slotTypeId}/versions": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "List all slot type versions for the slot type id.\n",
        "parameters": [
          {
            "name": "slotTypeId",
            "in": "path",
            "description": "The identifier for a slot type.",
            "required": true,
            "type": "string"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 50,
            "minimum": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Sets the sorting direction of the result items. When set to 'asc' these items are returned in ascending order of sortField value and when set to 'desc' these items are returned in descending order of sortField value.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of slot type version for the slot type id.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/hal+json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.typeVersion.ListSlotTypeVersionResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "listInteractionModelSlotTypeVersionsV1"
      },
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Create a new version of slot type entity for the given slotTypeId.\n",
        "parameters": [
          {
            "name": "slotTypeId",
            "in": "path",
            "description": "The identifier for a slot type.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "slotType",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.typeVersion.VersionData"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Returns update status location link on success.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the slot type status to track."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error e.g. the slot type definition is invalid.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The specified slot type does not exist.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "createInteractionModelSlotTypeVersionV1"
      }
    },
    "/v1/skills/api/custom/interactionModel/slotTypes/{slotTypeId}/versions/{version}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get slot type version data of given slot type version.\n",
        "parameters": [
          {
            "name": "slotTypeId",
            "in": "path",
            "description": "The identifier for a slot type.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version for interaction model.",
            "required": true,
            "type": "string",
            "pattern": "^~current|^~latest|[0-9]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the slot type version metadata for the given slotTypeId and version.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/hal+json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.typeVersion.SlotTypeVersionData"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "There is no slot type defined for the slotTypeId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getInteractionModelSlotTypeVersionV1"
      },
      "delete": {
        "tags": [
          "skillManagement"
        ],
        "description": "Delete slot type version.\n",
        "parameters": [
          {
            "name": "slotTypeId",
            "in": "path",
            "description": "The identifier for a slot type.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version for interaction model.",
            "required": true,
            "type": "string",
            "pattern": "^~current|^~latest|[0-9]+$"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content; Confirms that version is successfully deleted."
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "There is no slot type version for this slotTypeId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "deleteInteractionModelSlotTypeVersionV1"
      }
    },
    "/v1/skills/api/custom/interactionModel/slotTypes/{slotTypeId}/versions/{version}/update": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Update description and vendorGuidance string for certain version of a slot type.\n",
        "parameters": [
          {
            "name": "slotTypeId",
            "in": "path",
            "description": "The identifier for a slot type.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version for interaction model.",
            "required": true,
            "type": "string",
            "pattern": "^~current|^~latest|[0-9]+$"
          },
          {
            "in": "body",
            "name": "slotTypeUpdate",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.interactionModel.typeVersion.slotTypeUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content; Confirms that version is successfully updated."
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "There is no slot type defined for the slotTypeId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "updateInteractionModelSlotTypeVersionV1"
      }
    },
    "/v1/skills/{skillId}/invocations": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "This is a synchronous API that invokes the Lambda or third party HTTPS endpoint for a given skill. A successful response will contain information related to what endpoint was called, payload sent to and received from the endpoint. In cases where requests to this API results in an error, the response will contain an error code and a description of the problem. In cases where invoking the skill endpoint specifically fails, the response will contain a status attribute indicating that a failure occurred and details about what was sent to the endpoint. The skill must belong to and be enabled by the user of this API. Also, note that calls to the skill endpoint will timeout after 10 seconds.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "invokeSkillRequest",
            "description": "Payload sent to the skill invocation API.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.invocations.InvokeSkillRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Skill was invoked.",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/v1.skill.invocations.InvokeSkillResponse"
            }
          },
          "400": {
            "description": "Bad request due to invalid or missing data.",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "API user does not have permission to call this API or is currently in a state that does not allow invocation of this skill.\n",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The specified skill does not exist.",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "API user has exceeded the permitted request rate.",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "invokeSkillV1"
      }
    },
    "/v1/skills/{skillId}/stages/{stageV2}/manifest": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Returns the skill manifest for given skillId and stage.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stageV2",
            "in": "path",
            "description": "Stages of a skill including the new certified stage.\n* `development` - skills which are currently in development corresponds to this stage.\n* `certified` -  skills which have completed certification and ready for publishing corresponds to this stage.\n* `live` - skills which are currently live corresponds to this stage.\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Response contains the latest version of skill manifest.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Contains content type of the response; only application/json supported."
              },
              "ETag": {
                "type": "string",
                "description": "Identifer for the version of the resource can be used for conditional updates"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.Manifest.SkillManifestEnvelope"
            }
          },
          "303": {
            "description": "See Other",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Contains relative URL to get skill status."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getSkillManifestV1"
      },
      "put": {
        "tags": [
          "skillManagement"
        ],
        "description": "Updates skill manifest for given skillId and stage.",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "description": "Request header that specified an entity tag. The server will update the resource only if the eTag matches with the resource's current eTag.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stageV2",
            "in": "path",
            "description": "Stages of a skill including the new certified stage.\n* `development` - skills which are currently in development corresponds to this stage.\n* `certified` -  skills which have completed certification and ready for publishing corresponds to this stage.\n* `live` - skills which are currently live corresponds to this stage.\n",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "updateSkillRequest",
            "description": "Defines the request body for updateSkill API.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.Manifest.SkillManifestEnvelope"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted; Returns a URL to track the status in 'Location' header.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Contains content type of the response; only application/json supported."
              },
              "Location": {
                "type": "string",
                "description": "Contains relative URL to get skill status."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "412": {
            "description": "Precondition failed.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "updateSkillManifestV1"
      }
    },
    "/v1/skills/{skillId}/metrics": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get analytic metrics report of skill usage.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "The start time of query.",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "The end time of query (The maximum time duration is 1 week)",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "period",
            "in": "query",
            "description": "The aggregation period to use when retrieving the metric, follows ISO_8601#Durations format.",
            "required": true,
            "type": "string"
          },
          {
            "name": "metric",
            "in": "query",
            "description": "A distinct set of logic which predictably returns a set of data.",
            "required": true,
            "type": "string"
          },
          {
            "name": "stage",
            "in": "query",
            "description": "The stage of the skill (live, development).",
            "required": true,
            "type": "string"
          },
          {
            "name": "skillType",
            "in": "query",
            "description": "The type of the skill (custom, smartHome and flashBriefing).",
            "required": true,
            "type": "string"
          },
          {
            "name": "intent",
            "in": "query",
            "description": "The intent of the skill.",
            "required": false,
            "type": "string"
          },
          {
            "name": "locale",
            "in": "query",
            "description": "The locale for the skill. e.g. en-GB, en-US, de-DE and etc.",
            "required": false,
            "type": "string"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 50,
            "minimum": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Get analytic metrics report successfully.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.metrics.GetMetricDataResponse"
            }
          },
          "400": {
            "description": "Bad request due to invalid or missing data.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getSkillMetricsV1"
      }
    },
    "/v1/skills/{skillId}/stages/{stage}/privateDistributionAccounts/{id}": {
      "put": {
        "tags": [
          "skillManagement"
        ],
        "description": "Add an id to the private distribution accounts.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stage",
            "in": "path",
            "description": "Stage for skill.",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "minLength": 1
          },
          {
            "name": "id",
            "in": "path",
            "description": "ARN that a skill can be privately distributed to.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only \"application/json\" supported."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "setPrivateDistributionAccountIdV1"
      },
      "delete": {
        "tags": [
          "skillManagement"
        ],
        "description": "Remove an id from the private distribution accounts.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stage",
            "in": "path",
            "description": "Stage for skill.",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "minLength": 1
          },
          {
            "name": "id",
            "in": "path",
            "description": "ARN that a skill can be privately distributed to.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only \"application/json\" supported"
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "deletePrivateDistributionAccountIdV1"
      }
    },
    "/v1/skills/{skillId}/stages/{stage}/privateDistributionAccounts": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "List private distribution accounts.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stage",
            "in": "path",
            "description": "Stage for skill.",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "minLength": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 50,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of private distribution accounts on success.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/json supported"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.Private.ListPrivateDistributionAccountsResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "listPrivateDistributionAccountsV1"
      }
    },
    "/v1/skills/{skillId}/publications": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "If the skill is in certified stage, initiate publishing immediately or set a date at which the skill can publish at.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "User's locale/language in context.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "publishSkillRequest",
            "description": "Defines the request body for publish skill API.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/v1.skill.publication.PublishSkillRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully processed skill publication request.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body. only application/json supported.",
                "enum": [
                  "application/json"
                ]
              },
              "Content-Language": {
                "type": "string",
                "description": "Standard HTTP header for language for which the content of the response is intended. Only en-US, ja-JP supported for this API currently.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.publication.SkillPublicationResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "publishSkillV1"
      }
    },
    "/v1/skills/{skillId}/publications/~latest": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Retrieves the latest skill publishing details of the certified stage of the skill. The publishesAtDate and\nstatus of skill publishing.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "User's locale/language in context.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved latest skill publication information.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body. only application/json supported.",
                "enum": [
                  "application/json"
                ]
              },
              "Content-Language": {
                "type": "string",
                "description": "Standard HTTP header for language for which the content of the response is intended. Only en-US, ja-JP supported for this API currently.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.publication.SkillPublicationResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getSkillPublicationsV1"
      }
    },
    "/v1/skills/{skillId}/simulations": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Simulate executing a skill with the given id.",
        "description": "This is an asynchronous API that simulates a skill execution in the Alexa eco-system given an utterance text of what a customer would say to Alexa. A successful response will contain a header with the location of the simulation resource. In cases where requests to this API results in an error, the response will contain an error code and a description of the problem. The skill being simulated must be in development stage, and it must also belong to and be enabled by the user of this API. Concurrent requests per user is currently not supported.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "simulationsApiRequest",
            "description": "Payload sent to the skill simulation API.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.simulations.SimulationsApiRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Skill simulation has successfully began.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Path to simulation resource."
              },
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.simulations.SimulationsApiResponse"
            }
          },
          "400": {
            "description": "Bad request due to invalid or missing data.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "API user does not have permission to call this API or is currently in a state that does not allow simulation of this skill.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The specified skill does not exist.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "409": {
            "description": "This requests conflicts with another one currently being processed.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "API user has exceeded the permitted request rate.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal service error.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "simulateSkillV1"
      }
    },
    "/v1/skills/{skillId}/simulations/{simulationId}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Get the result of a previously executed simulation.",
        "description": "This API gets the result of a previously executed simulation. A successful response will contain the status of the executed simulation. If the simulation successfully completed, the response will also contain information related to skill invocation. In cases where requests to this API results in an error, the response will contain an error code and a description of the problem. In cases where the simulation failed, the response will contain a status attribute indicating that a failure occurred and details about what was sent to the skill endpoint. Note that simulation results are stored for 10 minutes. A request for an expired simulation result will return a 404 HTTP status code.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "simulationId",
            "in": "path",
            "description": "Id of the simulation.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved skill simulation information.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.simulations.SimulationsApiResponse"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "API user does not have permission or is currently in a state that does not allow calls to this API.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The specified skill or simulation does not exist. The error response will contain a description that indicates the specific resource type that was not found.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "API user has exceeded the permitted request rate.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal service error.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "getSkillSimulationV1"
      }
    },
    "/v1/skills/{skillId}/stages/{stage}/validations": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Validate a skill.",
        "description": "This is an asynchronous API which allows a skill developer to execute various validations against their skill.\n",
        "parameters": [
          {
            "in": "body",
            "name": "validationsApiRequest",
            "description": "Payload sent to the skill validation API.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.validations.ValidationsApiRequest"
            }
          },
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stage",
            "in": "path",
            "description": "Stage for skill.",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "minLength": 1
          }
        ],
        "responses": {
          "202": {
            "description": "Skill validation has successfully begun.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Path to validation resource."
              },
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.validations.ValidationsApiResponse"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "API user does not have permission or is currently in a state that does not allow calls to this API.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The specified skill, stage or validation does not exist. The error response will contain a description that indicates the specific resource type that was not found.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "409": {
            "description": "This requests conflicts with another one currently being processed.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "API user has exceeded the permitted request rate.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal service error.",
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Standard HTTP header for language for which the content of the response is intended. It falls back to en-US if the locale in the request is not supported.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "submitSkillValidationV1"
      }
    },
    "/v1/skills/{skillId}/stages/{stage}/validations/{validationId}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Get the result of a previously executed validation.",
        "description": "This API gets the result of a previously executed validation. A successful response will contain the status of the executed validation. If the validation successfully completed, the response will also contain information related to executed validations. In cases where requests to this API results in an error, the response will contain a description of the problem. In cases where the validation failed, the response will contain a status attribute indicating that a failure occurred. Note that validation results are stored for 60 minutes. A request for an expired validation result will return a 404 HTTP status code.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "validationId",
            "in": "path",
            "description": "Id of the validation. Reserved word identifier of mostRecent can be used to get the most recent validation for the skill and stage. Note that the behavior of the API in this case would be the same as when the actual validation id of the most recent validation is used in the request.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "stage",
            "in": "path",
            "description": "Stage for skill.",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "minLength": 1
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "User's locale/language in context.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved skill validation information.",
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Standard HTTP header for language for which the content of the response is intended. It falls back to en-US if the locale in the request is not supported.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.validations.ValidationsApiResponse"
            }
          },
          "403": {
            "description": "API user does not have permission or is currently in a state that does not allow calls to this API.\n",
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Standard HTTP header for language for which the content of the response is intended. It falls back to en-US if the locale in the request is not supported.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The specified skill, stage, or validation does not exist. The error response will contain a description that indicates the specific resource type that was not found.\n",
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Standard HTTP header for language for which the content of the response is intended. It falls back to en-US if the locale in the request is not supported.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "409": {
            "description": "This requests conflicts with another one currently being processed.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "API user has exceeded the permitted request rate.",
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Standard HTTP header for language for which the content of the response is intended. It falls back to en-US if the locale in the request is not supported.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal service error.",
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Standard HTTP header for language for which the content of the response is intended. It falls back to en-US if the locale in the request is not supported.\n"
              },
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            }
          }
        },
        "x-operation-name": "getSkillValidationsV1"
      }
    },
    "/v1/skills": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get the list of skills for the vendor.",
        "parameters": [
          {
            "name": "vendorId",
            "in": "query",
            "description": "The vendor ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 50,
            "minimum": 1
          },
          {
            "name": "skillId",
            "in": "query",
            "description": "The list of skillIds that you wish to get the summary for. A maximum of 10 skillIds can be specified to get the skill summary in single listSkills call. Please note that this parameter must not be used with 'nextToken' or/and 'maxResults' parameter.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of skills for the vendor.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "returned content type; only application/json+hal supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.ListSkillResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "listSkillsForVendorV1"
      },
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Creates a new skill for given vendorId.",
        "parameters": [
          {
            "in": "body",
            "name": "createSkillRequest",
            "description": "Defines the request body for createSkill API.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.createSkillRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted; Returns a URL to track the status in 'Location' header.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Contains content type of the response; only application/json supported."
              },
              "Location": {
                "type": "string",
                "description": "Contains relative URL to get skill status."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.CreateSkillResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "createSkillForVendorV1"
      }
    },
    "/v1/skills/{skillId}": {
      "delete": {
        "tags": [
          "skillManagement"
        ],
        "description": "Delete the skill and model for given skillId.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        ],
        "responses": {
          "204": {
            "description": "Success. No content."
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "deleteSkillV1"
      }
    },
    "/v1/skills/{skillId}/status": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get the status of skill resource and its sub-resources for a given skillId.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "resource",
            "in": "query",
            "description": "Resource name for which status information is desired.\nIt is an optional, filtering parameter and can be used more than once, to retrieve status for all the desired (sub)resources only, in single API call.\nIf this parameter is not specified, status for all the resources/sub-resources will be returned.\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns status for skill resource and sub-resources.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.SkillStatus"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getSkillStatusV1"
      }
    },
    "/v1/skills/{skillId}/credentials": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get the client credentials for the skill.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Response contains the skill credentials.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.SkillCredentials"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getSkillCredentialsV1"
      }
    },
    "/v1/skills/{skillId}/sslCertificateSets/~latest": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Returns the ssl certificate sets currently associated with this skill. Sets consist of one ssl certificate blob associated with a region as well as the default certificate for the skill.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Response contains the latest version of the ssl certificates.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Contains content type of the response; only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.SSLCertificatePayload"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getSSLCertificatesV1"
      },
      "put": {
        "tags": [
          "skillManagement"
        ],
        "description": "Updates the ssl certificates associated with this skill.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "sslCertificatePayload",
            "description": "Defines the input/output of the ssl certificates api for a skill.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.SSLCertificatePayload"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Accepted; Request was successful and get will now result in the new values.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Contains content type of the response; only application/json supported."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "setSSLCertificatesV1"
      }
    },
    "/v1/skills/{skillId}/submit": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Submit the skill for certification.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "submitSkillForCertificationRequest",
            "description": "Defines the request body for submitSkillForCertification API.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/v1.skill.SubmitSkillForCertificationRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success. There is no content but returns Location in the header.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Certification resource URL."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "submitSkillForCertificationV1"
      }
    },
    "/v1/skills/{skillId}/withdraw": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Withdraws the skill from certification.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "withdrawRequest",
            "description": "The reason and message (in case of OTHER) to withdraw a skill.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.WithdrawRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "withdrawSkillFromCertificationV1"
      }
    },
    "/v1/skills/{skillId}/versions": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Retrieve a list of all skill versions associated with this skill id",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 50,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved skill versions",
            "schema": {
              "$ref": "#/definitions/v1.skill.ListSkillVersionsResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "listVersionsForSkillV1"
      }
    },
    "/v1/skills/{skillId}/rollbacks": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Submit a target skill version to rollback to. Only one rollback or publish operation can be outstanding for a given skillId.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "createRollbackRequest",
            "description": "defines the request body to create a rollback request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.CreateRollbackRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Rollback request created; Returns the generated identifier to track the rollback request and returns a URL to track the status in Location header.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "contains content type of the response; only application/json supported."
              },
              "Location": {
                "type": "string",
                "description": "Relative url to track rollback status"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.CreateRollbackResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "rollbackSkillV1"
      }
    },
    "/v1/skills/{skillId}/rollbacks/{rollbackRequestId}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get the rollback status of a skill given an associated rollbackRequestId. Use ~latest in place of rollbackRequestId to get the latest rollback status.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "rollbackRequestId",
            "in": "path",
            "description": "Defines the identifier for a rollback request. If set to ~latest, request returns the status of the latest rollback request.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the rollback status for a given skillId and rollbackRequestId. Returns the latest rollback status if ~latest is used in place of rollbackRequestId.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "contains content type of the response; only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.RollbackRequestStatus"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getRollbackForSkillV1"
      }
    },
    "/v1/skills/{skillId}/stages/{stage}/exports": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Creates a new export for a skill with given skillId and stage.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stage",
            "in": "path",
            "description": "Stage for skill.",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "minLength": 1
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Contains relative URL to track export."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "createExportRequestForSkillV1"
      }
    },
    "/v1/skills/exports/{exportId}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get status for given exportId\n",
        "parameters": [
          {
            "name": "exportId",
            "in": "path",
            "description": "The Export ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.ExportResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getStatusOfExportRequestV1"
      }
    },
    "/v1/skills/imports": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Creates a new import for a skill.\n",
        "parameters": [
          {
            "in": "body",
            "name": "createSkillWithPackageRequest",
            "description": "Defines the request body for createPackage API.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.createSkillWithPackageRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Contains relative URL to track import."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "413": {
            "description": "Payload too large.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "createSkillPackageV1"
      }
    },
    "/v1/skills/{skillId}/imports": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Creates a new import for a skill with given skillId.\n",
        "parameters": [
          {
            "in": "body",
            "name": "updateSkillWithPackageRequest",
            "description": "Defines the request body for updatePackage API.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.updateSkillWithPackageRequest"
            }
          },
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Request header that specified an entity tag. The server will update the resource only if the eTag matches with the resource's current eTag.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Contains relative URL to track import."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "412": {
            "description": "Precondition failed.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "413": {
            "description": "Payload too large.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "importSkillPackageV1"
      }
    },
    "/v1/skills/imports/{importId}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get status for given importId.\n",
        "parameters": [
          {
            "name": "importId",
            "in": "path",
            "description": "The Import ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.ImportResponse"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getImportStatusV1"
      }
    },
    "/v1/skills/uploads": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Creates a new uploadUrl.\n",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.UploadResponse"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "createUploadUrlV1"
      }
    },
    "/v1/skill/definitions/apis/custom/interfaces/{interfaceType}": {},
    "/v1/skills/{skillId}/stages/{stageV2}/cloneLocale": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "Creates a new clone locale workflow for a skill with given skillId, source locale, and target locales. In a single workflow, a locale can be cloned to multiple target locales. However, only one such workflow can be started at any time.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stageV2",
            "in": "path",
            "description": "Stages of a skill on which locales can be cloned. Currently only `development` stage is supported.\n* `development` - skills which are currently in development corresponds to this stage.\n",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "cloneLocaleRequest",
            "description": "Defines the request body for the cloneLocale API.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.CloneLocaleRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Returns relative URL to track the progress of the workflow."
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "cloneLocaleV1"
      }
    },
    "/v1/skills/{skillId}/stages/{stageV2}/cloneLocaleRequests/{cloneLocaleRequestId}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Returns the status of a clone locale workflow associated with the unique identifier of cloneLocaleRequestId.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stageV2",
            "in": "path",
            "description": "Stages of a skill on which locales can be cloned. Currently only `development` stage is supported.\n* `development` - skills which are currently in development corresponds to this stage.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "cloneLocaleRequestId",
            "in": "path",
            "description": "Defines the identifier for a clone locale workflow.\nIf set to ~latest, request returns the status of the latest clone locale workflow.\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only \"application/json\" supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.CloneLocaleStatusResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "429": {
            "description": "Exceeds the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.skill.StandardizedError"
            }
          }
        },
        "x-operation-name": "getCloneLocaleStatusV1"
      }
    },
    "/v1/vendors": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "Get the list of Vendor information.\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return vendor information on success.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.vendorManagement.Vendors"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Defines the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "getVendorListV1"
      }
    },
    "/v1/developmentAuditLogs/query": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "description": "The SMAPI Audit Logs API provides customers with an audit history of all SMAPI calls made by a developer or developers with permissions on that account.",
        "parameters": [
          {
            "in": "body",
            "name": "getAuditLogsRequest",
            "description": "Request object encompassing vendorId, optional request filters and optional pagination context.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.auditLogs.AuditLogsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of audit logs for the given vendor.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.auditLogs.AuditLogsResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "returned content type; only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "queryDevelopmentAuditLogsV1"
      }
    },
    "/v1/skills/{skillId}/stages/{stage}/locales/{locale}/conversations/turnPredictions": {},
    "/v1/skills/resourceSchema/{resource}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "description": "GetResourceSchema API provides schema for skill related resources. The schema returned by this API will be specific to vendor because it considers public beta features allowed for the vendor.",
        "parameters": [
          {
            "name": "resource",
            "in": "path",
            "description": "Name of the ASK resource for which schema is requested.",
            "required": true,
            "type": "string",
            "enum": [
              "manifest",
              "skillPackageStructure"
            ]
          },
          {
            "name": "vendorId",
            "in": "query",
            "description": "The vendor ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "operation",
            "in": "query",
            "description": "This parameter is required when resource is manifest because skill manifest schema differs based on operation. For example, submit for certification schema has more validations than create skill schema.",
            "required": false,
            "type": "string",
            "enum": [
              "CREATE_SKILL",
              "UPDATE_SKILL",
              "SUBMIT_SKILL",
              "ENABLE_SKILL"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a S3 presigned URL to location of schema",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.resourceSchema.getResourceSchemaResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "returned content type; only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type; only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "getResourceSchemaV1"
      }
    },
    "/v1/skills/{skillId}/testSetGenerations": {},
    "/v1/skills/{skillId}/testSetGenerations/{testSetGenerationId}": {},
    "/v1/skills/{skillId}/testSets": {},
    "/v1/skills/{skillId}/testSets/{testSetId}/properties": {},
    "/v1/skills/{skillId}/testSets/{testSetId}": {},
    "/v1/skills/{skillId}/testSetExecutions": {},
    "/v1/skills/{skillId}/testSetExecutions/{testSetExecutionId}": {},
    "/v1/skills/{skillId}/testSetExecutions/{testSetExecutionId}/results": {},
    "/v1/skills/{skillId}/nluEvaluations": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "List nlu evaluations run for a skill.",
        "description": "API which requests recently run nlu evaluations started by a vendor for a skill. Returns the evaluation id and some of the parameters used to start the evaluation. Developers can filter the results using locale and stage. Supports paging of results.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "locale",
            "in": "query",
            "description": "filter to evaluations started using this locale",
            "required": false,
            "type": "string"
          },
          {
            "name": "stage",
            "in": "query",
            "description": "filter to evaluations started using this stage",
            "required": false,
            "type": "string"
          },
          {
            "name": "annotationId",
            "in": "query",
            "description": "filter to evaluations started using this annotationId",
            "required": false,
            "type": "string"
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. Defaults to 10. If more results are present, the response will contain a nextToken and a _link.next href.\n",
            "required": false,
            "type": "number",
            "default": 10,
            "maximum": 100,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Evaluations are returned.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, application/hal+json or application/json supported"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.nlu.evaluations.ListNLUEvaluationsResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "listNLUEvaluationsV1"
      },
      "post": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Start an evaluation against the NLU model built by the skill's interaction model.",
        "description": "This is an asynchronous API that starts an evaluation against the NLU model built by the skill's interaction model.\nThe operation outputs an evaluationId which allows the retrieval of the current status of the operation and the results upon completion. This operation is unified, meaning both internal and external skill developers may use it evaluate NLU models.\n",
        "parameters": [
          {
            "in": "body",
            "name": "evaluateNLURequest",
            "description": "Payload sent to the evaluate NLU API.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.nlu.evaluations.EvaluateNLURequest"
            }
          },
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Evaluation has successfully begun.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, - application/json or application/hal+json supported"
              },
              "Location": {
                "type": "string",
                "description": "GET Location of the started evaluation.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.nlu.evaluations.EvaluateResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "createNLUEvaluationsV1"
      }
    },
    "/v1/skills/{skillId}/nluEvaluations/{evaluationId}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Get top level information and status of a nlu evaluation.",
        "description": "API which requests top level information about the evaluation like the current state of the job, status of the evaluation (if complete). Also returns data used to start the job, like the number of test cases, stage, locale, and start time. This should be considered the 'cheap' operation while getResultForNLUEvaluations is 'expensive'.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "evaluationId",
            "in": "path",
            "description": "Identifier of the evaluation.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Evaluation exists and its status is queryable.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, - application/json or application/hal+json supported"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.nlu.evaluations.GetNLUEvaluationResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "getNLUEvaluationV1"
      }
    },
    "/v1/skills/{skillId}/nluEvaluations/{evaluationId}/results": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Get test case results for a completed Evaluation.",
        "description": "Paginated API which returns the test case results of an evaluation. This should be considered the 'expensive' operation while getNluEvaluation is 'cheap'.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "evaluationId",
            "in": "path",
            "description": "Identifier of the evaluation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "sort.field",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "STATUS",
              "ACTUAL_INTENT",
              "EXPECTED_INTENT"
            ]
          },
          {
            "name": "testCaseStatus",
            "in": "query",
            "description": "only returns test cases with this status",
            "required": false,
            "type": "string",
            "enum": [
              "PASSED",
              "FAILED"
            ]
          },
          {
            "name": "actualIntentName",
            "in": "query",
            "description": "only returns test cases with intents which resolve to this intent",
            "required": false,
            "type": "string"
          },
          {
            "name": "expectedIntentName",
            "in": "query",
            "description": "only returns test cases with intents which are expected to be this intent",
            "required": false,
            "type": "string"
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. Defaults to 1000. If more results are present, the response will contain a nextToken and a _link.next href.\n",
            "required": false,
            "type": "number",
            "default": 1000,
            "maximum": 1000,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Evaluation exists and its status is queryable.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, - application/json or application/hal+json supported"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.nlu.evaluations.GetNLUEvaluationResultsResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "getResultForNLUEvaluationsV1"
      }
    },
    "/v1/skills/{skillId}/nluAnnotationSets": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "List NLU annotation sets for a given skill.",
        "description": "API which requests all the NLU annotation sets for a skill. Returns the annotationId and properties for each NLU annotation set. Developers can filter the results using locale. Supports paging of results.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "locale",
            "in": "query",
            "description": "filter to NLU annotation set created using this locale",
            "required": false,
            "type": "string"
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. Defaults to 10. If more results are present, the response will contain a nextToken and a _link.next href.\n",
            "required": false,
            "type": "number",
            "default": 10,
            "maximum": 100,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "NLU annotation sets are returned.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, application/hal+json or application/json supported"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.nlu.annotationSets.ListNLUAnnotationSetsResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "listNLUAnnotationSetsV1"
      },
      "post": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Create a new NLU annotation set for a skill which will generate a new annotationId.",
        "description": "This is an API that creates a new NLU annotation set with properties and returns the annotationId.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "CreateNLUAnnotationSetRequest",
            "description": "Payload sent to the create NLU annotation set API.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.nlu.annotationSets.CreateNLUAnnotationSetRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "NLU annotation set created successfully.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported",
                "enum": [
                  "application/json"
                ]
              },
              "Location": {
                "type": "string",
                "description": "GET Location of the created NLU annotation set.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.nlu.annotationSets.CreateNLUAnnotationSetResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "createNLUAnnotationSetV1"
      }
    },
    "/v1/skills/{skillId}/nluAnnotationSets/{annotationId}/properties": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Get the properties of an NLU annotation set",
        "description": "Return the properties for an NLU annotation set.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "annotationId",
            "in": "path",
            "description": "Identifier of the NLU annotation set.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The NLU annotation set exists.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, application/hal+json or application/json supported"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.nlu.annotationSets.GetNLUAnnotationSetPropertiesResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "getPropertiesForNLUAnnotationSetsV1"
      },
      "put": {
        "tags": [
          "skillManagement"
        ],
        "summary": "update the NLU annotation set properties.",
        "description": "API which updates the NLU annotation set properties. Currently, the only data can be updated is annotation set name.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "annotationId",
            "in": "path",
            "description": "Identifier of the NLU annotation set.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "UpdateNLUAnnotationSetPropertiesRequest",
            "description": "Payload sent to the update NLU annotation set properties API.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.nlu.annotationSets.UpdateNLUAnnotationSetPropertiesRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "NLU annotation set exists and properties are updated successfully.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, application/hal+json or application/json supported"
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "updatePropertiesForNLUAnnotationSetsV1"
      }
    },
    "/v1/skills/{skillId}/nluAnnotationSets/{annotationId}": {
      "delete": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Delete the NLU annotation set",
        "description": "API which deletes the NLU annotation set. Developers cannot get/list the deleted annotation set.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "annotationId",
            "in": "path",
            "description": "Identifier of the NLU annotation set.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "NLU annotation set exists and is deleted successfully.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, application/hal+json or application/json supported"
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "deletePropertiesForNLUAnnotationSetsV1"
      }
    },
    "/v1/skills/{skillId}/nluAnnotationSets/{annotationId}/annotations": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Get the annotations of an NLU annotation set",
        "produces": [
          "application/json",
          "text/csv"
        ],
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "annotationId",
            "in": "path",
            "description": "Identifier of the NLU annotation set.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "Standard HTTP. Pass `application/json` or `test/csv` for GET calls.\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The specific version of a NLU annotation set has the content.",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "inputs": {
                      "utterance": "i want to travel from seattle",
                      "referenceTimestamp": "2018-10-25T23:50:02.135Z"
                    },
                    "expected": [
                      {
                        "intent": {
                          "name": "TravelIntent",
                          "slots": {
                            "fromCity": {
                              "value": "seattle"
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              },
              "text/csv": "utterance,referenceTimestamp,intent,slot[fromCity] i want to travel from seattle,2018-10-25T23:50:02.135Z,TravelIntent,seattle\n"
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, application/json supported"
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "getAnnotationsForNLUAnnotationSetsV1"
      },
      "post": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Replace the annotations in NLU annotation set.",
        "description": "API which replaces the annotations in NLU annotation set.\n",
        "consumes": [
          "application/json",
          "text/csv"
        ],
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "annotationId",
            "in": "path",
            "description": "Identifier of the NLU annotation set.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Standard HTTP. Pass `application/json` or `test/csv` for POST calls with a json/csv body.\n",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "UpdateNLUAnnotationSetAnnotationsRequest",
            "description": "Payload sent to the update NLU annotation set API.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.nlu.annotationSets.UpdateNLUAnnotationSetAnnotationsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "NLU annotation set exists and starts the update.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, application/hal+json or application/json supported"
              }
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "updateAnnotationsForNLUAnnotationSetsV1"
      }
    },
    "/v1/skills/{skillId}/asrAnnotationSets": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "List ASR annotation sets metadata for a given skill.",
        "description": "API which requests all the ASR annotation sets for a skill. Returns the annotation set id and properties for each ASR annotation set. Supports paging of results.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. Defaults to 1000. If more results are present, the response will contain a paginationContext.\n",
            "required": false,
            "type": "number",
            "default": 1000,
            "maximum": 1000,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "ASR annotation sets metadata are returned.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, application/hal+json or application/json supported",
                "enum": [
                  "application/json"
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.asr.annotationSets.ListASRAnnotationSetsResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "default": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "listASRAnnotationSetsV1"
      },
      "post": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Create a new ASR annotation set for a skill",
        "description": "This is an API that creates a new ASR annotation set with a name and returns the annotationSetId which can later be used to retrieve or reference the annotation set\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "CreateAsrAnnotationSetRequest",
            "description": "Payload sent to the create ASR annotation set API.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.asr.annotationSets.CreateAsrAnnotationSetRequestObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ASR annotation set created successfully.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported",
                "enum": [
                  "application/json"
                ]
              },
              "Location": {
                "type": "string",
                "description": "Location of the created ASR annotation set.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.asr.annotationSets.CreateAsrAnnotationSetResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "default": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "createASRAnnotationSetV1"
      }
    },
    "/v1/skills/{skillId}/asrAnnotationSets/{annotationSetId}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Get the metadata of an ASR annotation set",
        "description": "Return the metadata for an ASR annotation set.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "annotationSetId",
            "in": "path",
            "description": "Identifier of the ASR annotation set.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The ASR annotation set exists.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, application/json supported",
                "enum": [
                  "application/json"
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.asr.annotationSets.GetASRAnnotationSetsPropertiesResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "default": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "getASRAnnotationSetV1"
      },
      "put": {
        "tags": [
          "skillManagement"
        ],
        "summary": "update the ASR annotation set properties.",
        "description": "API which updates the ASR annotation set properties. Currently, the only data can be updated is annotation set name.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "annotationSetId",
            "in": "path",
            "description": "Identifier of the ASR annotation set.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "UpdateAsrAnnotationSetPropertiesRequestV1",
            "description": "Payload sent to the update ASR annotation set properties API.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.asr.annotationSets.UpdateAsrAnnotationSetPropertiesRequestObject"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "ASR annotation set exists and properties are updated successfully."
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "default": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "setASRAnnotationSetV1"
      },
      "delete": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Delete the ASR annotation set",
        "description": "API which deletes the ASR annotation set. Developers cannot get/list the deleted annotation set.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "annotationSetId",
            "in": "path",
            "description": "Identifier of the ASR annotation set.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "ASR annotation set exists and is deleted successfully."
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "default": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "deleteASRAnnotationSetV1"
      }
    },
    "/v1/skills/{skillId}/asrAnnotationSets/{annotationSetId}/annotations": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Download the annotation set contents.",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. Defaults to 1000. If more results are present, the response will contain a paginationContext.\n",
            "required": false,
            "type": "number",
            "default": 1000,
            "maximum": 1000,
            "minimum": 1
          },
          {
            "name": "annotationSetId",
            "in": "path",
            "description": "Identifier of the ASR annotation set.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "- `application/json`: indicate to download annotation set contents in JSON format - `text/csv`: indicate to download annotation set contents in CSV format\n",
            "required": true,
            "type": "string",
            "enum": [
              "application/json",
              "text/csv"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The annotation set contents payload in specified format.  This API also supports pagination for annotation set contents requested in  `application/json` content type. Paginaiton for requested content  type `text/csv` is not supported. In this case, the nextToken and  maxResults query parameters would be ignored even if they are  specified as query parameters.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "- `text/csv`: indicate the annotation set contents in CSV format. The first \n              row of the csv contents defines the attribute names of annotation\n              properties. Attribute names are delimited by comma. The subsequent rows\n              define the annotations. Each row represents an annotation content. The\n              annotation properties in each row follow the strict ordering of the attribute\n              property names defined in the first row.\n- `application/json`: indicate the annotation set contents in JSON format\n",
                "enum": [
                  "text/csv",
                  "application/json"
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.asr.annotationSets.GetAsrAnnotationSetAnnotationsResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "default": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "getAnnotationsForASRAnnotationSetV1"
      },
      "put": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Update the annotations in the annotation set",
        "description": "API that updates the annotaions in the annotation set\n",
        "consumes": [
          "application/json",
          "text/csv"
        ],
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "annotationSetId",
            "in": "path",
            "description": "Identifier of the ASR annotation set.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "UpdateAsrAnnotationSetContentsRequest",
            "description": "Payload containing annotation set contents. Two formats are accepted here: - `application/json`: Annotation set payload in JSON format. - `text/csv`: Annotation set payload in CSV format. Note that for CSV format, the first row should describe the column attributes. Columns should be delimited by comma.  The subsequent rows should describe annotation data and each annotation attributes has to follow the strict ordering defined in the first row. Each annotation fields should be delimited by comma.\n",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.asr.annotationSets.UpdateAsrAnnotationSetContentsPayload"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "ASR annotation set contents have been updated successfully."
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "default": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "setAnnotationsForASRAnnotationSetV1"
      }
    },
    "/v1/skills/{skillId}/asrEvaluations": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "List asr evaluations run for a skill.",
        "description": "API that allows developers to get historical ASR evaluations they run before.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "locale",
            "in": "query",
            "description": "locale in bcp 47 format. Used to filter results with the specified locale. If omitted, the response would include all evaluations regardless of what locale was used in the evaluation",
            "required": false,
            "type": "string",
            "format": "locale"
          },
          {
            "name": "stage",
            "in": "query",
            "description": "Query parameter used to filter evaluations with specified skill stage.\n  * `development` - skill in `development` stage\n  * `live` - skill in `live` stage\n",
            "required": false,
            "type": "string",
            "enum": [
              "development",
              "live"
            ]
          },
          {
            "name": "annotationSetId",
            "in": "query",
            "description": "filter to evaluations started using this annotationSetId",
            "required": false,
            "type": "string"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. Defaults to 1000. If more results are present, the response will contain a nextToken.\n",
            "required": false,
            "type": "number",
            "default": 1000,
            "maximum": 1000,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Evaluations are returned.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "returned content type or application/json supported",
                "enum": [
                  "application/json"
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.asr.evaluations.ListAsrEvaluationsResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "default": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "listASREvaluationsV1"
      },
      "post": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Start an evaluation against the ASR model built by the skill's interaction model.",
        "description": "This is an asynchronous API that starts an evaluation against the ASR model built by the skill's interaction model. The operation outputs an evaluationId which allows the retrieval of the current status of the operation and the results upon completion. This operation is unified, meaning both internal and external skill developers may use it to evaluate ASR models.\n",
        "parameters": [
          {
            "in": "body",
            "name": "PostAsrEvaluationsRequest",
            "description": "Payload sent to trigger evaluation run.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.skill.asr.evaluations.PostAsrEvaluationsRequestObject"
            }
          },
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Evaluation has successfully begun.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "returned content type, - application/json supported",
                "enum": [
                  "application/json"
                ]
              },
              "Location": {
                "type": "string",
                "description": "URI indicating where to poll the status of the evaluation.\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.asr.evaluations.PostAsrEvaluationsResponseObject"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "default": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "createASREvaluationV1"
      }
    },
    "/v1/skills/{skillId}/asrEvaluations/{evaluationId}/status": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Get high level information and status of a asr evaluation.",
        "description": "API which requests high level information about the evaluation like the current state of the job, status of the evaluation (if complete). Also returns the request used to start the job, like the number of total evaluations, number of completed evaluations, and start time. This should be considered the \"cheap\" operation while GetAsrEvaluationsResults is \"expensive\".\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "evaluationId",
            "in": "path",
            "description": "Identifier of the evaluation.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Evaluation exists and its status is queryable.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "returned content type, - application/json supported",
                "enum": [
                  "application/json"
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.asr.evaluations.GetAsrEvaluationStatusResponseObject"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "default": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "getASREvaluationStatusV1"
      }
    },
    "/v1/skills/{skillId}/asrEvaluations/{evaluationId}": {
      "delete": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Delete an evaluation.",
        "description": "API which enables the deletion of an evaluation. \n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "evaluationId",
            "in": "path",
            "description": "Identifier of the evaluation.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "ASR evaluation exists and is deleted successfully."
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "default": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "deleteASREvaluationV1"
      }
    },
    "/v1/skills/{skillId}/asrEvaluations/{evaluationId}/results": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "List results for a completed Evaluation.",
        "description": "Paginated API which returns the test case results of an evaluation. This should be considered the \"expensive\" operation while GetAsrEvaluationsStatus is \"cheap\".\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "evaluationId",
            "in": "path",
            "description": "Identifier of the evaluation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. Defaults to 1000. If more results are present, the response will contain a nextToken.\n",
            "required": false,
            "type": "number",
            "default": 1000,
            "maximum": 1000,
            "minimum": 1
          },
          {
            "name": "status",
            "in": "query",
            "description": "query parameter used to filter evaluation result status.\n  * `PASSED` - filter evaluation result status of `PASSED`\n  * `FAILED` - filter evaluation result status of `FAILED`\n",
            "required": false,
            "type": "string",
            "enum": [
              "PASSED",
              "FAILED"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Evaluation exists and its status is queryable.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "returned content type, - application/json supported",
                "enum": [
                  "application/json"
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.skill.asr.evaluations.GetAsrEvaluationsResultsResponse"
            }
          },
          "400": {
            "description": "Server cannot process the request due to a client error.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Define the authentication method that should be used to gain access to a resource."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "403": {
            "description": "The operation being requested is not allowed.",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The resource being requested is not found.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceed the permitted request limit. Throttling criteria includes total requests, per API, ClientId, and CustomerId.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "default": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "listASREvaluationsResultsV1"
      }
    },
    "/v1/skills/{skillId}/smartHome/testing/capabilityTestPlans": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "List all the test plan names and ids for a given skill ID.",
        "description": "List all the test plan names and ids for a given skill ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 50,
            "minimum": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully got the list of test plans.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.smartHomeEvaluation.ListSHCapabilityTestPlansResponse"
            }
          },
          "400": {
            "description": "Bad Request. Returned when the request payload is malformed or when, at least, one required property is missing or invalid.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "403": {
            "description": "API user does not have permission or is currently in a state that does not allow calls to this API.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The specified skill, test plan, or evaluation does not exist. The error response will contain a description that indicates the specific resource type that was not found.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "429": {
            "description": "Exceeded the permitted request limit. Throttling criteria includes total requests, per API and CustomerId.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "default": {
            "description": "Internal server error.\n",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "listSmarthomeCapabilityTestPlansV1"
      }
    },
    "/v1/skills/{skillId}/smartHome/testing/capabilityEvaluations/{evaluationId}/results": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Get test case results for an evaluation run.",
        "description": "Get test case results for an evaluation run.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 50,
            "minimum": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          },
          {
            "name": "evaluationId",
            "in": "path",
            "description": "A unique ID to identify each Smart Home capability evaluation.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the evaluation result content.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.smartHomeEvaluation.GetSHCapabilityEvaluationResultsResponse"
            }
          },
          "400": {
            "description": "Bad Request. Returned when the request payload is malformed or when, at least, one required property is missing or invalid.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "403": {
            "description": "API user does not have permission or is currently in a state that does not allow calls to this API.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The specified skill, test plan, or evaluation does not exist. The error response will contain a description that indicates the specific resource type that was not found.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "429": {
            "description": "Exceeded the permitted request limit. Throttling criteria includes total requests, per API and CustomerId.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "default": {
            "description": "Internal server error.\n",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "getSmarthomeCapablityEvaluationResultsV1"
      }
    },
    "/v1/skills/{skillId}/smartHome/testing/capabilityEvaluations/{evaluationId}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Get top level information and status of a Smart Home capability evaluation.",
        "description": "Get top level information and status of a Smart Home capability evaluation.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "evaluationId",
            "in": "path",
            "description": "A unique ID to identify each Smart Home capability evaluation.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the evaluation status.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.smartHomeEvaluation.GetSHCapabilityEvaluationResponse"
            }
          },
          "400": {
            "description": "Bad Request. Returned when the request payload is malformed or when, at least, one required property is missing or invalid.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "403": {
            "description": "API user does not have permission or is currently in a state that does not allow calls to this API.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The specified skill, test plan, or evaluation does not exist. The error response will contain a description that indicates the specific resource type that was not found.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "429": {
            "description": "Exceeded the permitted request limit. Throttling criteria includes total requests, per API and CustomerId.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "default": {
            "description": "Internal server error.\n",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "getSmartHomeCapabilityEvaluationV1"
      }
    },
    "/v1/skills/{skillId}/smartHome/testing/capabilityEvaluations": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "List Smart Home capability evaluation runs for a skill.",
        "description": "List Smart Home capability evaluation runs for a skill.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stage",
            "in": "query",
            "description": "The stage of the skill to be used for evaluation. An error will be returned if this skill stage is not enabled on the account used for evaluation.",
            "required": true,
            "type": "string",
            "enum": [
              "development",
              "live"
            ]
          },
          {
            "name": "startTimestampFrom",
            "in": "query",
            "description": "The begnning of the start time to query evaluation result.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "startTimestampTo",
            "in": "query",
            "description": "The end of the start time to query evaluation result.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated = true.",
            "required": false,
            "type": "integer",
            "maximum": 50,
            "minimum": 1
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.",
            "required": false,
            "type": "string",
            "maxLength": 2047,
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the evaluation infomation.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.smartHomeEvaluation.ListSHCapabilityEvaluationsResponse"
            }
          },
          "400": {
            "description": "Bad Request. Returned when the request payload is malformed or when, at least, one required property is missing or invalid.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "403": {
            "description": "API user does not have permission or is currently in a state that does not allow calls to this API.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The specified skill, test plan, or evaluation does not exist. The error response will contain a description that indicates the specific resource type that was not found.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "429": {
            "description": "Exceeded the permitted request limit. Throttling criteria includes total requests, per API and CustomerId.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "default": {
            "description": "Internal server error.\n",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "listSmarthomeCapabilityEvaluationsV1"
      },
      "post": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Start a capability evaluation against a Smart Home skill.",
        "description": "Start a capability evaluation against a Smart Home skill.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "EvaluateSHCapabilityPayload",
            "description": "Payload sent to start a capability evaluation against a Smart Home skill.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/v1.smartHomeEvaluation.EvaluateSHCapabilityRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Evaluation has successfully begun.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the response body."
              },
              "Location": {
                "type": "string",
                "description": "Get location of the capability evaluaiton."
              }
            },
            "schema": {
              "$ref": "#/definitions/v1.smartHomeEvaluation.EvaluateSHCapabilityResponse"
            }
          },
          "400": {
            "description": "Bad Request. Returned when the request payload is malformed or when, at least, one required property is missing or invalid.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "403": {
            "description": "API user does not have permission or is currently in a state that does not allow calls to this API.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "404": {
            "description": "The specified skill, test plan, or evaluation does not exist. The error response will contain a description that indicates the specific resource type that was not found.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "409": {
            "description": "A test run is already in progress for the specified endpoint. Please retry after some time.\n",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          },
          "429": {
            "description": "Exceeded the permitted request limit. Throttling criteria includes total requests, per API and CustomerId.\n",
            "schema": {
              "$ref": "#/definitions/v1.BadRequestError"
            }
          },
          "default": {
            "description": "Internal server error.\n",
            "schema": {
              "$ref": "#/definitions/v1.Error"
            }
          }
        },
        "x-operation-name": "createSmarthomeCapabilityEvaluationV1"
      }
    },
    "/v2/skills/{skillId}/stages/{stage}/simulations": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Simulate executing a skill with the given id against a given stage.",
        "description": "This is an asynchronous API that simulates a skill execution in the Alexa eco-system given an utterance text of what a customer would say to Alexa. A successful response will contain a header with the location of the simulation resource. In cases where requests to this API results in an error, the response will contain an error code and a description of the problem. The skill being simulated must belong to and be enabled by the user of this API. Concurrent requests per user is currently not supported.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stage",
            "in": "path",
            "description": "Stage for skill.",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "simulationsApiRequest",
            "description": "Payload sent to the skill simulation API.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2.skill.simulations.SimulationsApiRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Skill simulation has successfully began.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Path to simulation resource."
              },
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v2.skill.simulations.SimulationsApiResponse"
            }
          },
          "400": {
            "description": "Bad request due to invalid or missing data.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v2.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/v2.Error"
            }
          },
          "403": {
            "description": "API user does not have permission to call this API or is currently in a state that does not allow simulation of this skill.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v2.BadRequestError"
            }
          },
          "404": {
            "description": "The specified skill does not exist.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v2.Error"
            }
          },
          "409": {
            "description": "This requests conflicts with another one currently being processed.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v2.Error"
            }
          },
          "429": {
            "description": "API user has exceeded the permitted request rate.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v2.Error"
            }
          },
          "500": {
            "description": "Internal service error.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v2.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v2.Error"
            }
          }
        },
        "x-operation-name": "simulateSkillV2"
      }
    },
    "/v2/skills/{skillId}/stages/{stage}/simulations/{simulationId}": {
      "get": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Get the result of a previously executed simulation.",
        "description": "This API gets the result of a previously executed simulation. A successful response will contain the status of the executed simulation. If the simulation successfully completed, the response will also contain information related to skill invocation. In cases where requests to this API results in an error, the response will contain an error code and a description of the problem. In cases where the simulation failed, the response will contain a status attribute indicating that a failure occurred and details about what was sent to the skill endpoint. Note that simulation results are stored for 10 minutes. A request for an expired simulation result will return a 404 HTTP status code.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stage",
            "in": "path",
            "description": "Stage for skill.",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "minLength": 1
          },
          {
            "name": "simulationId",
            "in": "path",
            "description": "Id of the simulation.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved skill simulation information.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v2.skill.simulations.SimulationsApiResponse"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/v2.Error"
            }
          },
          "403": {
            "description": "API user does not have permission or is currently in a state that does not allow calls to this API.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v2.BadRequestError"
            }
          },
          "404": {
            "description": "The specified skill or simulation does not exist. The error response will contain a description that indicates the specific resource type that was not found.\n",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v2.Error"
            }
          },
          "429": {
            "description": "API user has exceeded the permitted request rate.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v2.Error"
            }
          },
          "500": {
            "description": "Internal service error.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v2.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/v2.Error"
            }
          }
        },
        "x-operation-name": "getSkillSimulationV2"
      }
    },
    "/v2/skills/{skillId}/stages/{stage}/invocations": {
      "post": {
        "tags": [
          "skillManagement"
        ],
        "summary": "Invokes the Lambda or third party HTTPS endpoint for the given skill against a given stage.",
        "description": "This is a synchronous API that invokes the Lambda or third party HTTPS endpoint for a given skill. A successful response will contain information related to what endpoint was called, payload sent to and received from the endpoint. In cases where requests to this API results in an error, the response will contain an error code and a description of the problem. In cases where invoking the skill endpoint specifically fails, the response will contain a status attribute indicating that a failure occurred and details about what was sent to the endpoint. The skill must belong to and be enabled by the user of this API. Also,  note that calls to the skill endpoint will timeout after 10 seconds. This  API is currently designed in a way that allows extension to an asynchronous  API if a significantly bigger timeout is required.\n",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill ID.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          {
            "name": "stage",
            "in": "path",
            "description": "Stage for skill.",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "minLength": 1
          },
          {
            "in": "body",
            "name": "invocationsApiRequest",
            "description": "Payload sent to the skill invocation API.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/v2.skill.invocations.invocationsApiRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Skill was invoked.",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/v2.skill.invocations.InvocationsApiResponse"
            }
          },
          "400": {
            "description": "Bad request due to invalid or missing data.",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/v2.BadRequestError"
            }
          },
          "401": {
            "description": "The auth token is invalid/expired or doesn't have access to the resource.",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/v2.Error"
            }
          },
          "403": {
            "description": "API user does not have permission to call this API or is currently in a state that does not allow invocation of this skill.\n",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/v2.BadRequestError"
            }
          },
          "404": {
            "description": "The specified skill does not exist.",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/v2.Error"
            }
          },
          "429": {
            "description": "API user has exceeded the permitted request rate.",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/v2.Error"
            }
          },
          "500": {
            "description": "Internal service error.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v2.Error"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Returned content type, only application/json supported."
              }
            },
            "schema": {
              "$ref": "#/definitions/v2.Error"
            }
          }
        },
        "x-operation-name": "invokeSkillEndPointV2"
      }
    },
    "/v2/skills/{skillId}/metrics": {},
    "/v2/skills/metrics": {}
  },
  "securityDefinitions": {
    "skillManagement": {
      "type": "oauth2",
      "authorizationUrl": "api.amazon.com/ap/oa",
      "tokenUrl": "https://api.amazon.com/auth/o2/token",
      "flow": "accessCode",
      "x-use-refresh-grant": true
    }
  },
  "definitions": {
    "v1.BadRequestError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Human readable description of error."
        },
        "violations": {
          "type": "array",
          "description": "An array of violation messages.",
          "items": {
            "$ref": "#/definitions/v1.Error"
          }
        }
      }
    },
    "v1.Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "string",
          "description": "Error code that maps to an error message. Developers with different locales should be able to lookup the error description based on this code.\n"
        },
        "message": {
          "type": "string",
          "description": "Readable description of error. If standardized, this is generated from the error code and validation details."
        }
      },
      "x-baseType": true,
      "x-concreteType": true
    },
    "v2.BadRequestError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Human readable description of error."
        },
        "violations": {
          "type": "array",
          "description": "An array of violation messages.",
          "items": {
            "$ref": "#/definitions/v2.Error"
          }
        }
      }
    },
    "v2.Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "string",
          "description": "Error code that maps to an error message. Developers with different locales should be able to lookup the error description based on this code.\n"
        },
        "message": {
          "type": "string",
          "description": "Readable description of error."
        }
      }
    },
    "v1.Links": {
      "type": "object",
      "properties": {
        "self": {
          "$ref": "#/definitions/v1.Link"
        },
        "next": {
          "$ref": "#/definitions/v1.Link"
        }
      },
      "description": "Links for the API navigation."
    },
    "v1.Link": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        }
      }
    },
    "v1.StageV2Type": {
      "type": "object",
      "enum": [
        "live",
        "certified",
        "development"
      ]
    },
    "v1.StageType": {
      "type": "object",
      "enum": [
        "development",
        "live"
      ]
    },
    "v0.BadRequestError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Human readable description of error."
        },
        "violations": {
          "type": "array",
          "description": "An array of violation messages.",
          "items": {
            "$ref": "#/definitions/v0.Error"
          }
        }
      }
    },
    "v0.Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "string",
          "description": "Error code that maps to an error message. Developers with different locales should be able to lookup the error description based on this code.\n"
        },
        "message": {
          "type": "string",
          "description": "Readable description of error."
        }
      }
    },
    "v0.catalog.CreateCatalogRequest": {
      "type": "object",
      "required": [
        "title",
        "type",
        "usage",
        "vendorId"
      ],
      "properties": {
        "title": {
          "type": "string",
          "description": "Title of the catalog."
        },
        "type": {
          "$ref": "#/definitions/v0.catalog.CatalogType",
          "x-isEnum": true
        },
        "usage": {
          "$ref": "#/definitions/v0.catalog.CatalogUsage",
          "x-isEnum": true
        },
        "vendorId": {
          "type": "string",
          "description": "ID of the vendor owning the catalog.",
          "minLength": 1,
          "maxLength": 255
        }
      }
    },
    "v0.catalog.ListCatalogsResponse": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/v1.Links"
        },
        "catalogs": {
          "type": "array",
          "description": "List of catalog summaries.\n",
          "items": {
            "$ref": "#/definitions/v0.catalog.CatalogSummary"
          }
        },
        "isTruncated": {
          "type": "boolean"
        },
        "nextToken": {
          "type": "string"
        }
      },
      "description": "Information about catalogs."
    },
    "v0.catalog.CatalogDetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the added catalog object."
        },
        "title": {
          "type": "string",
          "description": "Title of the catalog."
        },
        "type": {
          "$ref": "#/definitions/v0.catalog.CatalogType",
          "x-isEnum": true
        },
        "usage": {
          "$ref": "#/definitions/v0.catalog.CatalogUsage",
          "x-isEnum": true
        },
        "lastUpdatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date time when the catalog was last updated."
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date time when the catalog was created."
        },
        "associatedSkillIds": {
          "type": "array",
          "description": "The list of skill Ids associated with the catalog.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v0.catalog.CatalogSummary": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the added catalog object."
        },
        "title": {
          "type": "string",
          "description": "Title of the catalog."
        },
        "type": {
          "$ref": "#/definitions/v0.catalog.CatalogType",
          "x-isEnum": true
        },
        "usage": {
          "$ref": "#/definitions/v0.catalog.CatalogUsage",
          "x-isEnum": true
        },
        "lastUpdatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date time when the catalog was last updated."
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date time when the catalog was created."
        },
        "associatedSkillIds": {
          "type": "array",
          "description": "The list of skill Ids associated with the catalog.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v0.catalog.CatalogType": {
      "type": "string",
      "description": "Type of catalog.",
      "enum": [
        "AMAZON.BroadcastChannel",
        "AMAZON.Genre",
        "AMAZON.MusicAlbum",
        "AMAZON.MusicGroup",
        "AMAZON.MusicPlaylist",
        "AMAZON.MusicRecording",
        "AMAZON.TerrestrialRadioChannel",
        "AMAZON.AudioRecording"
      ]
    },
    "v0.catalog.CatalogUsage": {
      "type": "string",
      "description": "Usage of the catalog.",
      "enum": [
        "AlexaMusic.Catalog.BroadcastChannel",
        "AlexaMusic.Catalog.Genre",
        "AlexaMusic.Catalog.MusicAlbum",
        "AlexaMusic.Catalog.MusicGroup",
        "AlexaMusic.Catalog.MusicPlaylist",
        "AlexaMusic.Catalog.MusicRecording",
        "AlexaMusic.Catalog.TerrestrialRadioChannel",
        "AlexaTest.Catalog.AudioRecording"
      ]
    },
    "v0.catalog.upload.CompleteUploadRequest": {
      "type": "object",
      "properties": {
        "partETags": {
          "type": "array",
          "description": "List of (eTag, part number) pairs for each part of the file uploaded.",
          "items": {
            "$ref": "#/definitions/v0.catalog.upload.PreSignedUrlItem"
          },
          "maxItems": 1000,
          "minItems": 1
        }
      }
    },
    "v0.catalog.upload.CreateContentUploadRequest": {
      "type": "object",
      "properties": {
        "numberOfUploadParts": {
          "type": "integer",
          "description": "Provides the number of parts the file will be split into. An equal number of presigned upload urls are generated in response to facilitate each part's upload."
        }
      }
    },
    "v0.catalog.upload.UploadStatus": {
      "type": "string",
      "description": "Status of the entire upload.",
      "enum": [
        "PENDING",
        "PROCESSING",
        "FAILED",
        "SUCCEEDED"
      ]
    },
    "v0.catalog.upload.IngestionStepName": {
      "type": "string",
      "enum": [
        "UPLOAD",
        "SCHEMA_VALIDATION"
      ]
    },
    "v0.catalog.upload.IngestionStatus": {
      "type": "string",
      "enum": [
        "PENDING",
        "IN_PROGRESS",
        "FAILED",
        "SUCCEEDED",
        "CANCELLED"
      ]
    },
    "v0.catalog.upload.UploadIngestionStep": {
      "type": "object",
      "required": [
        "errors",
        "name",
        "status"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/v0.catalog.upload.IngestionStepName",
          "x-isEnum": true
        },
        "status": {
          "$ref": "#/definitions/v0.catalog.upload.IngestionStatus",
          "x-isEnum": true
        },
        "logUrl": {
          "type": "string",
          "description": "Represents the url for the file containing logs of ingestion step."
        },
        "errors": {
          "type": "array",
          "description": "This array will contain the errors occurred during the execution of step. Will be empty, if execution succeeded.",
          "items": {
            "$ref": "#/definitions/v0.Error"
          }
        }
      },
      "description": "Represents a single step in the ingestion process of a new upload."
    },
    "v0.catalog.upload.ListUploadsResponse": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/v1.Links"
        },
        "isTruncated": {
          "type": "boolean"
        },
        "nextToken": {
          "type": "string"
        },
        "uploads": {
          "type": "array",
          "description": "List of upload summaries.",
          "items": {
            "$ref": "#/definitions/v0.catalog.upload.ContentUploadSummary"
          }
        }
      }
    },
    "v0.catalog.upload.ContentUploadSummary": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the upload."
        },
        "catalogId": {
          "type": "string",
          "description": "Provides a unique identifier of the catalog."
        },
        "status": {
          "$ref": "#/definitions/v0.catalog.upload.UploadStatus",
          "x-isEnum": true
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastUpdatedDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v0.catalog.upload.ContentUploadFileSummary": {
      "type": "object",
      "properties": {
        "presignedDownloadUrl": {
          "type": "string",
          "description": "If the file is available for download, presigned download URL can be used to download the file."
        },
        "status": {
          "$ref": "#/definitions/v0.catalog.upload.FileUploadStatus",
          "x-isEnum": true
        }
      }
    },
    "v0.catalog.upload.CreateContentUploadResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/v0.catalog.upload.ContentUploadSummary"
        },
        {
          "type": "object",
          "properties": {
            "ingestionSteps": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v0.catalog.upload.UploadIngestionStep"
              }
            },
            "presignedUploadParts": {
              "type": "array",
              "description": "Ordered list of presigned upload parts to perform a partitioned (multipart) file upload.",
              "items": {
                "$ref": "#/definitions/v0.catalog.upload.PresignedUploadPart"
              }
            }
          }
        }
      ],
      "description": "Request body for self-hosted catalog uploads."
    },
    "v0.catalog.upload.GetContentUploadResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/v0.catalog.upload.ContentUploadSummary"
        },
        {
          "type": "object",
          "properties": {
            "file": {
              "$ref": "#/definitions/v0.catalog.upload.ContentUploadFileSummary"
            },
            "ingestionSteps": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v0.catalog.upload.UploadIngestionStep"
              }
            }
          }
        }
      ],
      "description": "Response object for get content upload request."
    },
    "v0.catalog.upload.FileUploadStatus": {
      "type": "string",
      "description": "Value of status depends on if file is available for download or not.",
      "enum": [
        "PENDING",
        "AVAILABLE",
        "PURGED",
        "UNAVAILABLE"
      ]
    },
    "v0.catalog.upload.PresignedUploadPart": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "partNumber": {
          "type": "integer"
        }
      },
      "description": "Single upload part to perform a partitioned (multipart) file upload."
    },
    "v0.catalog.upload.PreSignedUrlItem": {
      "type": "object",
      "required": [
        "eTag",
        "partNumber"
      ],
      "properties": {
        "eTag": {
          "type": "string"
        },
        "partNumber": {
          "type": "integer",
          "minimum": 1,
          "maximum": 1000
        }
      }
    },
    "v0.developmentEvents.subscriber.Endpoint": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "description": "Uri of the endpoint that receives the notification."
        },
        "authorization": {
          "$ref": "#/definitions/v0.developmentEvents.subscriber.EndpointAuthorization"
        }
      }
    },
    "v0.developmentEvents.subscriber.EndpointAuthorization": {
      "type": "object",
      "required": [
        "type"
      ],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "x-isDiscriminator": true
        }
      },
      "description": "Authorization information to be able to publish notification to specified endpoint."
    },
    "v0.developmentEvents.subscriber.EndpointAwsAuthorization": {
      "allOf": [
        {
          "$ref": "#/definitions/v0.developmentEvents.subscriber.EndpointAuthorization"
        },
        {
          "type": "object",
          "properties": {
            "arn": {
              "type": "string",
              "description": "IAM Role arn to use/assumeRole for authorization."
            }
          }
        }
      ],
      "description": "Authorization for accessing AWS SNS endpoint.",
      "x-discriminator-value": "AWS_IAM"
    },
    "v0.developmentEvents.subscriber.EndpointAuthorizationType": {
      "type": "string",
      "description": "Type of authorization (e.g. AWS IAM, OAuth).",
      "enum": [
        "AWS_IAM"
      ]
    },
    "v0.developmentEvents.subscriber.SubscriberInfo": {
      "type": "object",
      "properties": {
        "subscriberId": {
          "type": "string",
          "description": "Unique identifier of the subscriber resource."
        },
        "name": {
          "type": "string",
          "description": "Name of the subscriber."
        },
        "endpoint": {
          "$ref": "#/definitions/v0.developmentEvents.subscriber.Endpoint"
        }
      },
      "description": "Information about the subscriber."
    },
    "v0.developmentEvents.subscriber.SubscriberSummary": {
      "type": "object",
      "properties": {
        "subscriberId": {
          "type": "string",
          "description": "Unique identifier of the subscriber resource."
        },
        "name": {
          "type": "string",
          "description": "Name of the subscriber."
        },
        "status": {
          "$ref": "#/definitions/v0.developmentEvents.subscriber.SubscriberStatus",
          "x-isEnum": true
        },
        "clientId": {
          "type": "string",
          "description": "Client Id of the subscriber resource."
        },
        "endpoint": {
          "$ref": "#/definitions/v0.developmentEvents.subscriber.Endpoint"
        }
      }
    },
    "v0.developmentEvents.subscriber.SubscriberStatus": {
      "type": "string",
      "description": "Status of the subscriber. This enum may get extended with new values in future. Clients are expected to gracefully handle any unknown values.",
      "enum": [
        "ACTIVE",
        "INACTIVE"
      ]
    },
    "v0.developmentEvents.subscriber.ListSubscribersResponse": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/v1.Links"
        },
        "nextToken": {
          "type": "string"
        },
        "subscribers": {
          "type": "array",
          "description": "List containing subscriber summary.",
          "items": {
            "$ref": "#/definitions/v0.developmentEvents.subscriber.SubscriberSummary"
          }
        }
      }
    },
    "v0.developmentEvents.subscriber.CreateSubscriberRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the subscriber."
        },
        "vendorId": {
          "type": "string",
          "description": "The Vendor ID."
        },
        "endpoint": {
          "$ref": "#/definitions/v0.developmentEvents.subscriber.Endpoint"
        }
      }
    },
    "v0.developmentEvents.subscriber.UpdateSubscriberRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the subscriber."
        },
        "endpoint": {
          "$ref": "#/definitions/v0.developmentEvents.subscriber.Endpoint"
        }
      }
    },
    "v0.developmentEvents.subscription.Event": {
      "type": "string",
      "description": "Represents an event that the subscriber is interested in. The event is of the format EventCategory.OPERATION. You can use wildcard event 'AlexaDevelopmentEvent.All' for recieving all AlexaDevelopmentEvent notifications listed below. We do not support 'AlexaCustomerFeedbackEvent.All' at this point as we only have one event in this category.\n  * 'AlexaDevelopmentEvent.ManifestUpdate' - The event representing the status of the update request on the Manifest.\n  * 'AlexaDevelopmentEvent.SkillPublish' -   The event representing the status of the skill publish process.\n  * 'AlexaDevelopmentEvent.SkillCertification' -   The event represents if a skill has been certified or not.\n  * 'AlexaDevelopmentEvent.InteractionModelUpdate' -   The event represents the status of an Interaction Model build for a particular locale.\n  * 'AlexaDevelopmentEvent.All' - A wildcard event name that allows subscription to all the existing events. While using this, you must not specify any other event name. AlexaDevelopmentEvent.All avoids the need of specifying every development event name in order to receive all events pertaining to a vendor account. Similarly, it avoids the need of updating an existing subscription to be able to receive new events, whenever supproted by notification service. Test Subscriber API cannot use this wildcard. Please make sure that your code can gracefully handle new/previously unknown events, if you are using this wildcard.\n  * 'AlexaCustomerFeedbackEvent.SkillReviewPublish' - The event represents the publishing of a new/updated customer review for a skill on the skill store.\n",
      "enum": [
        "AlexaDevelopmentEvent.ManifestUpdate",
        "AlexaDevelopmentEvent.SkillPublish",
        "AlexaDevelopmentEvent.SkillCertification",
        "AlexaDevelopmentEvent.InteractionModelUpdate",
        "AlexaDevelopmentEvent.All",
        "AlexaCustomerFeedbackEvent.SkillReviewPublish"
      ]
    },
    "v0.developmentEvents.subscription.SubscriptionInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the subscription."
        },
        "subscriptionId": {
          "type": "string",
          "description": "Unique identifier of the subscription resource."
        },
        "subscriberId": {
          "type": "string",
          "description": "Subscriber Id of the event-receiver."
        },
        "vendorId": {
          "type": "string",
          "description": "Vendor Id of the event-publisher."
        },
        "events": {
          "type": "array",
          "description": "The list of events that the subscriber should be notified for.",
          "items": {
            "$ref": "#/definitions/v0.developmentEvents.subscription.Event"
          }
        }
      }
    },
    "v0.developmentEvents.subscription.SubscriptionSummary": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the subscription."
        },
        "subscriptionId": {
          "type": "string",
          "description": "Unique identifier of the subscription resource."
        },
        "subscriberId": {
          "type": "string",
          "description": "Subscriber Id of the event-reciever."
        },
        "vendorId": {
          "type": "string",
          "description": "VendorId of the event-publisher."
        },
        "events": {
          "type": "array",
          "description": "The list of events that the subscriber should be notified for.",
          "items": {
            "$ref": "#/definitions/v0.developmentEvents.subscription.Event"
          }
        }
      }
    },
    "v0.developmentEvents.subscription.ListSubscriptionsResponse": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/v1.Links"
        },
        "nextToken": {
          "type": "string"
        },
        "subscriptions": {
          "type": "array",
          "description": "List of subscription summaries.",
          "items": {
            "$ref": "#/definitions/v0.developmentEvents.subscription.SubscriptionSummary"
          }
        }
      }
    },
    "v0.developmentEvents.subscription.CreateSubscriptionRequest": {
      "type": "object",
      "required": [
        "events",
        "name",
        "subscriberId",
        "vendorId"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the subscription."
        },
        "events": {
          "type": "array",
          "description": "The list of events that the subscriber should be notified for.",
          "items": {
            "$ref": "#/definitions/v0.developmentEvents.subscription.Event"
          }
        },
        "vendorId": {
          "type": "string",
          "description": "The vendorId of the event publisher."
        },
        "subscriberId": {
          "type": "string",
          "description": "The id of the subscriber that would receive the events."
        }
      }
    },
    "v0.developmentEvents.subscription.UpdateSubscriptionRequest": {
      "type": "object",
      "required": [
        "events",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the subscription.",
          "minLength": 1,
          "maxLength": 255
        },
        "events": {
          "type": "array",
          "description": "The list of events that the subscriber should be notified for.",
          "items": {
            "$ref": "#/definitions/v0.developmentEvents.subscription.Event"
          }
        }
      }
    },
    "v0.eventSchema.AlexaDevelopmentEvent.ManifestUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/v0.eventSchema.BaseSchema"
        },
        {
          "type": "object",
          "properties": {
            "requestId": {
              "type": "string",
              "description": "A development notification includes a unique identifier that identifies the original request that resulted in the development notification. The requestId for original request is returned by Amazon APIs in response's 'X-Amzn-RequestId' header.\n"
            },
            "payload": {
              "$ref": "#/definitions/v0.eventSchema.SkillEventAttributes"
            }
          }
        }
      ],
      "description": "'AlexaDevelopmentEvent.ManifestUpdate' event represents the status of the update request on the Manifest. This event is generated when request to create a skill or update an existing skill is completed. The request may complete either with `SUCCEEDED` or `FAILED` status.",
      "x-discriminator-value": "AlexaDevelopmentEvent.ManifestUpdate"
    },
    "v0.eventSchema.AlexaDevelopmentEvent.SkillPublish": {
      "allOf": [
        {
          "$ref": "#/definitions/v0.eventSchema.BaseSchema"
        },
        {
          "type": "object",
          "properties": {
            "requestId": {
              "type": "string",
              "description": "A development notification includes a unique identifier that identifies the original request that resulted in the development notification. The requestId for original request is returned by Amazon APIs in response's 'X-Amzn-RequestId' header.\n"
            },
            "payload": {
              "$ref": "#/definitions/v0.eventSchema.SkillEventAttributes"
            }
          }
        }
      ],
      "description": "'AlexaDevelopmentEvent.SkillPublish' event represents the status of publish to live operation. When a developer submits a skill for certification, it goes through `certification workflow` followed by publish to live workflow. This event is generated in publish workflow and may complete either with `SUCCEEDED` or `FAILED` status. If 'SUCCEEDED', users can see and enable latest version of the skill via Alexa Skill Store.",
      "x-discriminator-value": "AlexaDevelopmentEvent.SkillPublish"
    },
    "v0.eventSchema.AlexaDevelopmentEvent.SkillCertification": {
      "allOf": [
        {
          "$ref": "#/definitions/v0.eventSchema.BaseSchema"
        },
        {
          "type": "object",
          "properties": {
            "requestId": {
              "type": "string",
              "description": "A development notification includes a unique identifier that identifies the original request that resulted in the development notification. The requestId for original request is returned by Amazon APIs in response's 'X-Amzn-RequestId' header.\n"
            },
            "payload": {
              "$ref": "#/definitions/v0.eventSchema.SkillEventAttributes"
            }
          }
        }
      ],
      "description": "'AlexaDevelopmentEvent.SkillCertification' event represents the status of various validations of\n`certification workflow`. This step may complete either with `SUCCEEDED` or `FAILED` status.\n",
      "x-discriminator-value": "AlexaDevelopmentEvent.SkillCertification"
    },
    "v0.eventSchema.AlexaDevelopmentEvent.InteractionModelUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/v0.eventSchema.BaseSchema"
        },
        {
          "type": "object",
          "properties": {
            "requestId": {
              "type": "string",
              "description": "A development notification includes a unique identifier that identifies the original request that resulted in the development notification. The requestId for original request is returned by Amazon APIs in response's 'X-Amzn-RequestId' header.\n"
            },
            "payload": {
              "$ref": "#/definitions/v0.eventSchema.InteractionModelEventAttributes"
            }
          }
        }
      ],
      "description": "'AlexaDevelopmentEvent.InteractionModelUpdate' event represents the status of set/update interaction model\nrequest. The update request may complete either with `SUCCEEDED` or `FAILED` status.\n",
      "x-discriminator-value": "AlexaDevelopmentEvent.InteractionModelUpdate"
    },
    "v0.eventSchema.AlexaCustomerFeedbackEvent.SkillReviewPublish": {
      "allOf": [
        {
          "$ref": "#/definitions/v0.eventSchema.BaseSchema"
        },
        {
          "type": "object",
          "properties": {
            "payload": {
              "$ref": "#/definitions/v0.eventSchema.SkillReviewEventAttributes"
            }
          }
        }
      ],
      "description": "'AlexaCustomerFeedbackEvent.SkillReviewPublish' event represents the publishing of a new/updated customer review for a skill.\n",
      "x-discriminator-value": "AlexaCustomerFeedbackEvent.SkillReviewPublish"
    },
    "v0.eventSchema.SkillEventAttributes": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v0.eventSchema.RequestStatus",
          "x-isEnum": true
        },
        "actor": {
          "$ref": "#/definitions/v0.eventSchema.ActorAttributes"
        },
        "skill": {
          "$ref": "#/definitions/v0.eventSchema.SkillAttributes"
        },
        "subscription": {
          "$ref": "#/definitions/v0.eventSchema.SubscriptionAttributes"
        }
      },
      "description": "Skill event specific attributes.\n"
    },
    "v0.eventSchema.SkillReviewEventAttributes": {
      "type": "object",
      "properties": {
        "skill": {
          "$ref": "#/definitions/v0.eventSchema.SkillAttributes"
        },
        "subscription": {
          "$ref": "#/definitions/v0.eventSchema.SubscriptionAttributes"
        },
        "review": {
          "$ref": "#/definitions/v0.eventSchema.SkillReviewAttributes"
        }
      },
      "description": "Skill Review by customer event specific attributes.\n"
    },
    "v0.eventSchema.InteractionModelEventAttributes": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v0.eventSchema.RequestStatus",
          "x-isEnum": true
        },
        "actor": {
          "$ref": "#/definitions/v0.eventSchema.ActorAttributes"
        },
        "interactionModel": {
          "$ref": "#/definitions/v0.eventSchema.InteractionModelAttributes"
        },
        "subscription": {
          "$ref": "#/definitions/v0.eventSchema.SubscriptionAttributes"
        }
      },
      "description": "Interaction model event specific attributes.\n"
    },
    "v0.eventSchema.BaseSchema": {
      "type": "object",
      "required": [
        "eventName"
      ],
      "discriminator": "eventName",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 timestamp for the instant when event was created.\n"
        },
        "eventName": {
          "type": "string",
          "x-isDiscriminator": true
        }
      },
      "description": "Represents attributes common to all development notifications.\n"
    },
    "v0.eventSchema.SkillAttributes": {
      "type": "object",
      "properties": {
        "skillId": {
          "type": "string",
          "format": "Amazon Common Identifier",
          "description": "Unique identifier of an Alexa skill.\n"
        },
        "vendorId": {
          "type": "string",
          "description": "Unique identifier of vendor account to which this skill belongs.\n"
        }
      },
      "description": "Represents a set of attributes specific to an Alexa Skill.\n"
    },
    "v0.eventSchema.InteractionModelAttributes": {
      "allOf": [
        {
          "$ref": "#/definitions/v0.eventSchema.SkillAttributes"
        },
        {
          "type": "object",
          "properties": {
            "locale": {
              "type": "string",
              "format": "languager-region; same as BCP-47 language tag format",
              "description": "Locale of interaction model.\n"
            }
          }
        }
      ],
      "description": "Represents a set of attributes specific to interaction model of an Alexa Skill.\n"
    },
    "v0.eventSchema.SubscriptionAttributes": {
      "type": "object",
      "properties": {
        "subscriptionId": {
          "type": "string",
          "format": "Amazon Common Identifier",
          "description": "Unique subscription id that triggered the development notification event.\n"
        }
      },
      "description": "Represents attributes of a subscription for development notification.\n"
    },
    "v0.eventSchema.ActorAttributes": {
      "type": "object",
      "properties": {
        "customerId": {
          "type": "string",
          "description": "Identifies an Amazon Customer who submitted a request corresponding to the generated event.\n"
        }
      },
      "description": "Represents an actor that submitted a request causing development notification event.\n"
    },
    "v0.eventSchema.SkillReviewAttributes": {
      "type": "object",
      "properties": {
        "reviewId": {
          "type": "string",
          "description": "Unique review id associated with a customer review for a skill.\n"
        },
        "url": {
          "type": "string",
          "description": "Link to the customer review on Amazon retail website.\n"
        },
        "starRating": {
          "type": "string",
          "description": "StarRating provided by the customer in the review. It is always a natural number from 1 to 5 (inclusive of 1 and 5).\n"
        }
      },
      "description": "Represents attributes of a customer review for a skill.\n"
    },
    "v0.eventSchema.RequestStatus": {
      "type": "string",
      "description": "Represents the completion status of the request.\n",
      "enum": [
        "SUCCEEDED",
        "FAILED"
      ]
    },
    "v1.catalog.CreateContentUploadUrlRequest": {
      "type": "object",
      "required": [
        "numberOfUploadParts"
      ],
      "properties": {
        "numberOfUploadParts": {
          "type": "integer",
          "example": 1,
          "description": "Provides the number of parts the file will be split into. An equal number of presigned upload urls are generated in response to facilitate each part's upload.",
          "minimum": 1,
          "maximum": 1000
        }
      }
    },
    "v1.catalog.CreateContentUploadUrlResponse": {
      "type": "object",
      "required": [
        "urlId"
      ],
      "properties": {
        "urlId": {
          "type": "string",
          "description": "Unique identifier for collection of generated urls."
        },
        "presignedUploadParts": {
          "type": "array",
          "description": "Ordered list of presigned upload parts to perform a partitioned (multipart) file upload",
          "items": {
            "$ref": "#/definitions/v1.catalog.PresignedUploadPartItems"
          }
        }
      }
    },
    "v1.catalog.PresignedUploadPartItems": {
      "type": "object",
      "required": [
        "expiresAt",
        "partNumber",
        "url"
      ],
      "properties": {
        "url": {
          "type": "string"
        },
        "partNumber": {
          "type": "integer"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1.catalog.upload.CatalogUploadBase": {
      "type": "object",
      "x-baseType": true
    },
    "v1.catalog.upload.Location": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.catalog.upload.CatalogUploadBase"
        },
        {
          "type": "object",
          "properties": {
            "location": {
              "type": "string",
              "description": "self hosted url location."
            }
          }
        }
      ],
      "description": "Request body for self-hosted catalog uploads",
      "x-inheritsFrom": "v1.catalog.upload.CatalogUploadBase"
    },
    "v1.catalog.upload.PreSignedUrl": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.catalog.upload.CatalogUploadBase"
        },
        {
          "type": "object",
          "required": [
            "urlId"
          ],
          "properties": {
            "urlId": {
              "type": "string",
              "description": "Unique identifier for urls"
            },
            "partETags": {
              "type": "array",
              "description": "List of (eTag, part number) pairs for each part of the file uploaded",
              "items": {
                "$ref": "#/definitions/v1.catalog.upload.PreSignedUrlItem"
              },
              "maxItems": 1000,
              "minItems": 1
            }
          }
        }
      ],
      "description": "Request body for self-hosted catalog uploads",
      "x-inheritsFrom": "v1.catalog.upload.CatalogUploadBase"
    },
    "v1.catalog.upload.PreSignedUrlItem": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string"
        },
        "partNumber": {
          "type": "integer"
        }
      }
    },
    "v1.catalog.upload.GetContentUploadResponse": {
      "type": "object",
      "required": [
        "catalogId",
        "createdDate",
        "file",
        "id",
        "ingestionSteps",
        "lastUpdatedDate",
        "status"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the upload"
        },
        "catalogId": {
          "type": "string",
          "description": "Unique identifier of the added catalog object"
        },
        "status": {
          "$ref": "#/definitions/v1.catalog.upload.UploadStatus",
          "x-isEnum": true
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastUpdatedDate": {
          "type": "string",
          "format": "date-time"
        },
        "file": {
          "$ref": "#/definitions/v1.catalog.upload.ContentUploadFileSummary"
        },
        "ingestionSteps": {
          "type": "array",
          "description": "List of different steps performed on the upload.",
          "items": {
            "$ref": "#/definitions/v1.catalog.upload.UploadIngestionStep"
          }
        }
      }
    },
    "v1.catalog.upload.UploadStatus": {
      "type": "string",
      "description": "Status of the entire upload.",
      "enum": [
        "PENDING",
        "IN_PROGRESS",
        "FAILED",
        "SUCCEEDED"
      ]
    },
    "v1.catalog.upload.ContentUploadFileSummary": {
      "type": "object",
      "required": [
        "downloadUrl",
        "expiresAt",
        "status"
      ],
      "properties": {
        "downloadUrl": {
          "type": "string",
          "format": "uri",
          "description": "If the file is available for download, downloadUrl can be used to download the file."
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/v1.catalog.upload.FileUploadStatus",
          "x-isEnum": true
        }
      }
    },
    "v1.catalog.upload.FileUploadStatus": {
      "type": "string",
      "description": "Value of status depends on if file is available for download or not.",
      "enum": [
        "PENDING",
        "AVAILABLE",
        "PURGED",
        "UNAVAILABLE"
      ]
    },
    "v1.catalog.upload.UploadIngestionStep": {
      "type": "object",
      "required": [
        "name",
        "status",
        "violations"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/v1.catalog.upload.IngestionStepName",
          "x-isEnum": true
        },
        "status": {
          "$ref": "#/definitions/v1.catalog.upload.IngestionStatus",
          "x-isEnum": true
        },
        "logUrl": {
          "type": "string",
          "format": "uri",
          "description": "Url for the file containing logs of ingestion step."
        },
        "violations": {
          "type": "array",
          "description": "This array will contain the violations occurred during the execution of step. Will be empty, if execution succeeded.",
          "items": {
            "$ref": "#/definitions/v1.Error"
          }
        }
      },
      "description": "Represents a single step in the multi-step ingestion process of a new upload."
    },
    "v1.catalog.upload.IngestionStepName": {
      "type": "string",
      "enum": [
        "UPLOAD",
        "SCHEMA_VALIDATION"
      ]
    },
    "v1.catalog.upload.IngestionStatus": {
      "type": "string",
      "enum": [
        "PENDING",
        "IN_PROGRESS",
        "FAILED",
        "SUCCEEDED",
        "CANCELLED"
      ]
    },
    "v1.isp.ProductType": {
      "type": "string",
      "description": "Type of in-skill product.",
      "enum": [
        "SUBSCRIPTION",
        "ENTITLEMENT",
        "CONSUMABLE"
      ]
    },
    "v1.isp.ListInSkillProductResponse": {
      "type": "object",
      "properties": {
        "inSkillProductSummaryList": {
          "$ref": "#/definitions/v1.isp.ListInSkillProduct"
        }
      },
      "description": "List of in-skill product response."
    },
    "v1.isp.ListInSkillProduct": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/v1.Links"
        },
        "inSkillProducts": {
          "type": "array",
          "description": "Information for each in-skill product.",
          "items": {
            "$ref": "#/definitions/v1.isp.InSkillProductSummary"
          }
        },
        "isTruncated": {
          "type": "boolean"
        },
        "nextToken": {
          "type": "string"
        }
      },
      "description": "List of in-skill products."
    },
    "v1.isp.PurchasableState": {
      "type": "string",
      "description": "Whether or not the in-skill product is purchasable by customers. A product that is not purchasable will prevent new customers from being prompted to purchase the product. Customers who already own the product will see no effect and continue to have access to the product features.",
      "enum": [
        "PURCHASABLE",
        "NOT_PURCHASABLE"
      ]
    },
    "v1.isp.PromotableState": {
      "type": "string",
      "description": "Promote this ISP on Amazon channels such as Amazon.com. Enabling this setting will allow customers to view ISP detail pages and purchase the ISP on Amazon.com.",
      "enum": [
        "IN_SKILL_ONLY",
        "ALL_AMAZON_CHANNELS"
      ]
    },
    "v1.isp.InSkillProductSummaryResponse": {
      "type": "object",
      "properties": {
        "inSkillProductSummary": {
          "$ref": "#/definitions/v1.isp.InSkillProductSummary"
        }
      },
      "description": "In-skill product summary response."
    },
    "v1.isp.InSkillProductSummary": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v1.isp.ProductType",
          "x-isEnum": true
        },
        "productId": {
          "type": "string",
          "description": "primary identifier of in-skill product."
        },
        "referenceName": {
          "type": "string",
          "description": "Developer selected in-skill product name. This is for developer reference only, it can be used to filter query results to identify a matching in-skill product."
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time",
          "description": "Date of last update."
        },
        "nameByLocale": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "status": {
          "$ref": "#/definitions/v1.isp.Status",
          "x-isEnum": true
        },
        "stage": {
          "$ref": "#/definitions/v1.StageType",
          "x-isEnum": true
        },
        "editableState": {
          "$ref": "#/definitions/v1.isp.EditableState",
          "x-isEnum": true
        },
        "purchasableState": {
          "$ref": "#/definitions/v1.isp.PurchasableState",
          "x-isEnum": true
        },
        "promotableState": {
          "$ref": "#/definitions/v1.isp.PromotableState",
          "x-isEnum": true
        },
        "_links": {
          "$ref": "#/definitions/v1.isp.IspSummaryLinks"
        },
        "pricing": {
          "type": "object",
          "description": "In-skill product pricing information.",
          "additionalProperties": {
            "$ref": "#/definitions/v1.isp.SummaryMarketplacePricing"
          }
        }
      },
      "description": "Information about the in-skill product that is not editable."
    },
    "v1.isp.Status": {
      "type": "string",
      "description": "Current status of in-skill product.",
      "enum": [
        "INCOMPLETE",
        "COMPLETE",
        "CERTIFICATION",
        "PUBLISHED",
        "SUPPRESSED"
      ]
    },
    "v1.isp.EditableState": {
      "type": "string",
      "description": "Whether or not the in-skill product is editable.",
      "enum": [
        "EDITABLE",
        "NOT_EDITABLE"
      ]
    },
    "v1.isp.IspSummaryLinks": {
      "type": "object",
      "properties": {
        "self": {
          "$ref": "#/definitions/v1.Link"
        }
      }
    },
    "v1.isp.SummaryMarketplacePricing": {
      "type": "object",
      "properties": {
        "releaseDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when in-skill product is available to customers for both purchase and use. Prior to this date the in-skill product will appear unavailable to customers and will not be purchasable."
        },
        "defaultPriceListing": {
          "$ref": "#/definitions/v1.isp.SummaryPriceListing"
        }
      },
      "description": "Localized in-skill product pricing information."
    },
    "v1.isp.SummaryPriceListing": {
      "type": "object",
      "properties": {
        "price": {
          "type": "number",
          "description": "The price of an in-skill product."
        },
        "primeMemberPrice": {
          "type": "number",
          "description": "The prime price of an in-skill product."
        },
        "currency": {
          "$ref": "#/definitions/v1.isp.Currency",
          "x-isEnum": true
        }
      },
      "description": "Price listing information for in-skill product."
    },
    "v1.isp.Currency": {
      "type": "string",
      "format": "ISO 4217 format",
      "description": "Currency to use for in-skill product.",
      "enum": [
        "USD",
        "GBP",
        "EUR",
        "JPY"
      ]
    },
    "v1.isp.createInSkillProductRequest": {
      "type": "object",
      "properties": {
        "vendorId": {
          "type": "string",
          "description": "ID of the vendor owning the in-skill product."
        },
        "inSkillProductDefinition": {
          "$ref": "#/definitions/v1.isp.InSkillProductDefinition"
        }
      }
    },
    "v1.isp.InSkillProductDefinitionResponse": {
      "type": "object",
      "properties": {
        "inSkillProductDefinition": {
          "$ref": "#/definitions/v1.isp.InSkillProductDefinition"
        }
      },
      "description": "Defines In-skill product response."
    },
    "v1.isp.InSkillProductDefinition": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "description": "Version of in-skill product definition."
        },
        "type": {
          "$ref": "#/definitions/v1.isp.ProductType",
          "x-isEnum": true
        },
        "referenceName": {
          "type": "string",
          "description": "Developer selected in-skill product name. This is for developer reference only, it can be used to filter query results to identify a matching in-skill product."
        },
        "purchasableState": {
          "$ref": "#/definitions/v1.isp.PurchasableState",
          "x-isEnum": true
        },
        "promotableState": {
          "$ref": "#/definitions/v1.isp.PromotableState",
          "x-isEnum": true
        },
        "subscriptionInformation": {
          "$ref": "#/definitions/v1.isp.SubscriptionInformation"
        },
        "publishingInformation": {
          "$ref": "#/definitions/v1.isp.PublishingInformation"
        },
        "privacyAndCompliance": {
          "$ref": "#/definitions/v1.isp.PrivacyAndCompliance"
        },
        "testingInstructions": {
          "type": "string",
          "description": "Special instructions provided by the developer to test the in-skill product."
        }
      },
      "description": "Defines the structure for an in-skill product."
    },
    "v1.isp.SubscriptionInformation": {
      "type": "object",
      "properties": {
        "subscriptionPaymentFrequency": {
          "$ref": "#/definitions/v1.isp.subscriptionPaymentFrequency",
          "x-isEnum": true
        },
        "subscriptionTrialPeriodDays": {
          "type": "integer",
          "description": "Days of free trial period for subscription. Max allowed is 365 days."
        }
      },
      "description": "Defines the structure for in-skill product subscription information."
    },
    "v1.isp.subscriptionPaymentFrequency": {
      "type": "string",
      "description": "The frequency in which payments are collected for the subscription.",
      "enum": [
        "MONTHLY",
        "YEARLY"
      ]
    },
    "v1.isp.PublishingInformation": {
      "type": "object",
      "properties": {
        "locales": {
          "type": "object",
          "description": "Defines the structure for locale specific publishing information for an in-skill product.",
          "additionalProperties": {
            "$ref": "#/definitions/v1.isp.LocalizedPublishingInformation"
          }
        },
        "distributionCountries": {
          "type": "array",
          "description": "List of countries where the in-skill product is available.",
          "items": {
            "$ref": "#/definitions/v1.isp.DistributionCountries"
          }
        },
        "pricing": {
          "type": "object",
          "description": "Defines the structure for in-skill product pricing.",
          "additionalProperties": {
            "$ref": "#/definitions/v1.isp.MarketplacePricing"
          }
        },
        "taxInformation": {
          "$ref": "#/definitions/v1.isp.TaxInformation"
        }
      },
      "description": "Defines the structure for in-skill product publishing information."
    },
    "v1.isp.LocalizedPublishingInformation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the in-skill product that is heard by customers and displayed in the Alexa app."
        },
        "smallIconUri": {
          "type": "string",
          "description": "Uri for the small icon image of the in-skill product."
        },
        "largeIconUri": {
          "type": "string",
          "description": "Uri for the large icon image of the in-skill product."
        },
        "summary": {
          "type": "string",
          "description": "Short description of the in-skill product that displays on the in-skill product list page in the Alexa App."
        },
        "description": {
          "type": "string",
          "description": "Description of the in-skill product's purpose and features, and how it works. Should describe any prerequisites like hardware or account requirements and detailed steps for the customer to get started. This description displays to customers on the in-skill product detail card in the Alexa app."
        },
        "examplePhrases": {
          "type": "array",
          "description": "Example phrases appear on the in-skill product detail page and are the key utterances that customers can say to interact directly with the in-skill product.",
          "items": {
            "type": "string"
          }
        },
        "keywords": {
          "type": "array",
          "description": "Search terms that can be used to describe the in-skill product. This helps customers find an in-skill product.",
          "items": {
            "type": "string"
          }
        },
        "customProductPrompts": {
          "$ref": "#/definitions/v1.isp.CustomProductPrompts"
        }
      },
      "description": "Defines the structure for locale specific publishing information in the in-skill product definition."
    },
    "v1.isp.CustomProductPrompts": {
      "type": "object",
      "properties": {
        "purchasePromptDescription": {
          "type": "string",
          "example": "{PREMIUM_CONTENT_TITLE} includes <emphasis level=\"moderate\"> an assortment of fifty questions on a broad range of historical topics.<break time=\"150ms\">",
          "description": "Description of in-skill product heard before customer is prompted for purchase."
        },
        "boughtCardDescription": {
          "type": "string",
          "example": "Enjoy {PREMIUM_CONTENT_TITLE}! Ask for a list of adventures to explore your purchase..",
          "description": "A description of the product that displays on the skill card in the Alexa app."
        }
      },
      "description": "Custom prompts used for in-skill product purchasing options. Supports Speech Synthesis Markup Language (SSML), which can be used to control pronunciation, intonation, timing, and emotion."
    },
    "v1.isp.DistributionCountries": {
      "type": "string",
      "enum": [
        "AF",
        "AX",
        "AL",
        "DZ",
        "AS",
        "AD",
        "AO",
        "AI",
        "AQ",
        "AG",
        "AR",
        "AM",
        "AW",
        "AU",
        "AT",
        "AZ",
        "BS",
        "BH",
        "BD",
        "BB",
        "BY",
        "BE",
        "BZ",
        "BJ",
        "BM",
        "BT",
        "BO",
        "BA",
        "BW",
        "BV",
        "BR",
        "IO",
        "BN",
        "BG",
        "BF",
        "BI",
        "KH",
        "CM",
        "CA",
        "CV",
        "KY",
        "CF",
        "TD",
        "CL",
        "CN",
        "CX",
        "CC",
        "CO",
        "KM",
        "CG",
        "CD",
        "CK",
        "CR",
        "HR",
        "CY",
        "CZ",
        "DK",
        "DJ",
        "DM",
        "DO",
        "EC",
        "EG",
        "SV",
        "GQ",
        "ER",
        "EE",
        "ET",
        "FK",
        "FO",
        "FJ",
        "FI",
        "FR",
        "GF",
        "PF",
        "TF",
        "GA",
        "GM",
        "GE",
        "DE",
        "GH",
        "GI",
        "GR",
        "GL",
        "GD",
        "GP",
        "GU",
        "GT",
        "GG",
        "GN",
        "GW",
        "GY",
        "HT",
        "HM",
        "VA",
        "HN",
        "HK",
        "HU",
        "IS",
        "IN",
        "ID",
        "IQ",
        "IE",
        "IM",
        "IL",
        "IT",
        "CI",
        "JM",
        "JP",
        "JE",
        "JO",
        "KZ",
        "KE",
        "KI",
        "KR",
        "KW",
        "KG",
        "LA",
        "LV",
        "LB",
        "LS",
        "LR",
        "LY",
        "LI",
        "LT",
        "LU",
        "MO",
        "MK",
        "MG",
        "MW",
        "MY",
        "MV",
        "ML",
        "MT",
        "MH",
        "MQ",
        "MR",
        "MU",
        "YT",
        "MX",
        "FM",
        "MD",
        "MC",
        "MN",
        "ME",
        "MS",
        "MA",
        "MZ",
        "MM",
        "NA",
        "NR",
        "NP",
        "NL",
        "AN",
        "NC",
        "NZ",
        "NI",
        "NE",
        "NG",
        "NU",
        "NF",
        "MP",
        "NO",
        "OM",
        "PK",
        "PW",
        "PS",
        "PA",
        "PG",
        "PY",
        "PE",
        "PH",
        "PN",
        "PL",
        "PT",
        "PR",
        "QA",
        "RE",
        "RO",
        "RU",
        "RW",
        "BL",
        "SH",
        "KN",
        "LC",
        "MF",
        "PM",
        "VC",
        "WS",
        "SM",
        "ST",
        "SA",
        "SN",
        "RS",
        "SC",
        "SL",
        "SG",
        "SK",
        "SI",
        "SB",
        "SO",
        "ZA",
        "GS",
        "ES",
        "LK",
        "SR",
        "SJ",
        "SZ",
        "SE",
        "CH",
        "TW",
        "TJ",
        "TZ",
        "TH",
        "TL",
        "TG",
        "TK",
        "TO",
        "TT",
        "TN",
        "TR",
        "TM",
        "TC",
        "TV",
        "UG",
        "UA",
        "AE",
        "GB",
        "US",
        "UM",
        "UY",
        "UZ",
        "VU",
        "VE",
        "VN",
        "VG",
        "VI",
        "WF",
        "EH",
        "YE",
        "ZM",
        "ZW"
      ]
    },
    "v1.isp.MarketplacePricing": {
      "type": "object",
      "properties": {
        "releaseDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when in-skill product is available to customers for both purchase and use. Prior to this date the in-skill product will appear unavailable to customers and will not be purchasable."
        },
        "defaultPriceListing": {
          "$ref": "#/definitions/v1.isp.PriceListing"
        }
      },
      "description": "In-skill product pricing information for a marketplace."
    },
    "v1.isp.PriceListing": {
      "type": "object",
      "properties": {
        "price": {
          "type": "number",
          "description": "Defines the price of an in-skill product. The list price should be your suggested price, not including any VAT or similar taxes. Taxes are included in the final price to end users."
        },
        "currency": {
          "$ref": "#/definitions/v1.isp.Currency",
          "x-isEnum": true
        }
      },
      "description": "Price listing information for in-skill product."
    },
    "v1.isp.TaxInformation": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/v1.isp.TaxInformationCategory",
          "x-isEnum": true
        }
      },
      "description": "Defines the structure for in-skill product tax information."
    },
    "v1.isp.TaxInformationCategory": {
      "type": "string",
      "description": "Select tax category that best describes in-skill product. Choice will be validated during certification process.",
      "enum": [
        "SOFTWARE",
        "STREAMING_AUDIO",
        "STREAMING_RADIO",
        "INFORMATION_SERVICES",
        "VIDEO",
        "PERIODICALS",
        "NEWSPAPERS"
      ]
    },
    "v1.isp.PrivacyAndCompliance": {
      "type": "object",
      "properties": {
        "locales": {
          "type": "object",
          "description": "Defines the structure for locale specific privacy and compliance.",
          "additionalProperties": {
            "$ref": "#/definitions/v1.isp.LocalizedPrivacyAndCompliance"
          }
        }
      },
      "description": "Defines the structure for privacy and compliance."
    },
    "v1.isp.LocalizedPrivacyAndCompliance": {
      "type": "object",
      "properties": {
        "privacyPolicyUrl": {
          "type": "string",
          "description": "Link to the privacy policy that applies to this in-skill product."
        }
      },
      "description": "Defines the structure for localized privacy and compliance."
    },
    "v1.isp.ProductResponse": {
      "type": "object",
      "properties": {
        "productId": {
          "type": "string",
          "description": "ID of the in-skill product created."
        }
      },
      "description": "Product ID information."
    },
    "v1.isp.updateInSkillProductRequest": {
      "type": "object",
      "properties": {
        "inSkillProductDefinition": {
          "$ref": "#/definitions/v1.isp.InSkillProductDefinition"
        }
      }
    },
    "v1.isp.AssociatedSkillResponse": {
      "type": "object",
      "properties": {
        "associatedSkillIds": {
          "type": "array",
          "description": "List of skill IDs that correspond to the skills associated with the in-skill product. The associations are stage specific. A live association is created through successful skill certification.",
          "items": {
            "type": "string"
          }
        },
        "_links": {
          "$ref": "#/definitions/v1.Links"
        },
        "isTruncated": {
          "type": "boolean"
        },
        "nextToken": {
          "type": "string"
        }
      },
      "description": "In-skill product skill association details."
    },
    "v1.skill.accountLinking.AccountLinkingResponse": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v1.skill.accountLinking.AccountLinkingType",
          "x-isEnum": true
        },
        "authorizationUrl": {
          "type": "string",
          "format": "uri",
          "description": "The url where customers will be redirected in the companion app to enter login credentials."
        },
        "domains": {
          "type": "array",
          "description": "The list of domains that the authorization URL will fetch content from.",
          "items": {
            "type": "string"
          }
        },
        "clientId": {
          "type": "string",
          "description": "The unique public string used to identify the client requesting for authentication."
        },
        "scopes": {
          "type": "array",
          "description": "The list of permissions which will be requested from the skill user.",
          "items": {
            "type": "string"
          }
        },
        "accessTokenUrl": {
          "type": "string",
          "description": "The url used for access token and token refresh requests."
        },
        "accessTokenScheme": {
          "$ref": "#/definitions/v1.skill.accountLinking.AccessTokenSchemeType",
          "x-isEnum": true
        },
        "defaultTokenExpirationInSeconds": {
          "type": "integer",
          "description": "The time in seconds for which access token is valid.\nIf OAuth client returns \"expires_in\", it will be overwrite this parameter.\n"
        },
        "redirectUrls": {
          "type": "array",
          "description": "The list of valid urls to redirect back to, when the linking process is initiated from a third party system.",
          "items": {
            "type": "string"
          }
        },
        "authorizationUrlsByPlatform": {
          "type": "array",
          "description": "The list of valid authorization urls for allowed platforms to initiate account linking.",
          "items": {
            "$ref": "#/definitions/v1.skill.accountLinking.AccountLinkingPlatformAuthorizationUrl"
          }
        }
      },
      "description": "The account linking information of a skill."
    },
    "v1.skill.accountLinking.AccountLinkingType": {
      "type": "string",
      "description": "The type of account linking.",
      "enum": [
        "AUTH_CODE",
        "IMPLICIT"
      ]
    },
    "v1.skill.accountLinking.AccessTokenSchemeType": {
      "type": "string",
      "description": "The type of client authentication scheme.",
      "enum": [
        "HTTP_BASIC",
        "REQUEST_BODY_CREDENTIALS"
      ]
    },
    "v1.skill.accountLinking.AccountLinkingPlatformAuthorizationUrl": {
      "type": "object",
      "required": [
        "platformAuthorizationUrl",
        "platformType"
      ],
      "properties": {
        "platformType": {
          "$ref": "#/definitions/v1.skill.accountLinking.PlatformType",
          "x-isEnum": true
        },
        "platformAuthorizationUrl": {
          "type": "string",
          "description": "Defines the OAuth2 Authorization URL that will be used in this platform to authenticate the customer / person."
        }
      },
      "description": "A key-value pair object that contains the OAuth2 authorization url to initiate the skill account linking process."
    },
    "v1.skill.accountLinking.PlatformType": {
      "type": "string",
      "description": "Defines the type of platform that will be used by the customer to perform account linking.",
      "enum": [
        "iOS",
        "Android"
      ]
    },
    "v1.skill.accountLinking.AccountLinkingRequest": {
      "type": "object",
      "properties": {
        "accountLinkingRequest": {
          "$ref": "#/definitions/v1.skill.accountLinking.AccountLinkingRequestPayload"
        }
      },
      "description": "The request body of AccountLinkingRequest."
    },
    "v1.skill.accountLinking.AccountLinkingRequestPayload": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v1.skill.accountLinking.AccountLinkingType",
          "x-isEnum": true
        },
        "authorizationUrl": {
          "type": "string",
          "description": "The url where customers will be redirected in the companion app to enter login credentials."
        },
        "domains": {
          "type": "array",
          "description": "The list of domains that the authorization URL will fetch content from.",
          "items": {
            "type": "string"
          }
        },
        "clientId": {
          "type": "string",
          "description": "The unique public string used to identify the client requesting for authentication."
        },
        "scopes": {
          "type": "array",
          "description": "The list of permissions which will be requested from the skill user.",
          "items": {
            "type": "string"
          }
        },
        "accessTokenUrl": {
          "type": "string",
          "description": "The url used for access token and token refresh requests."
        },
        "clientSecret": {
          "type": "string",
          "description": "The client secret provided by developer."
        },
        "accessTokenScheme": {
          "$ref": "#/definitions/v1.skill.accountLinking.AccessTokenSchemeType",
          "x-isEnum": true
        },
        "defaultTokenExpirationInSeconds": {
          "type": "integer",
          "description": "The time in seconds for which access token is valid.\nIf OAuth client returns \"expires_in\", it will be overwrite this parameter.\n"
        },
        "reciprocalAccessTokenUrl": {
          "type": "string",
          "description": "Optional, if your skill requires reciprocal authorization, provide this additional access token url to handle reciprocal (Alexa) authorization codes that can be exchanged for Alexa access tokens."
        },
        "redirectUrls": {
          "type": "array",
          "description": "The list of valid urls to redirect back to, when the linking process is initiated from a third party system.",
          "items": {
            "type": "string"
          }
        },
        "authorizationUrlsByPlatform": {
          "type": "array",
          "description": "The list of valid authorization urls for allowed platforms to initiate account linking.",
          "items": {
            "$ref": "#/definitions/v1.skill.accountLinking.AccountLinkingPlatformAuthorizationUrl"
          }
        },
        "skipOnEnablement": {
          "type": "boolean",
          "description": "Set to true to let users enable the skill without starting the account linking flow. Set to false to require the normal account linking flow when users enable the skill."
        }
      },
      "description": "The payload for creating the account linking partner."
    },
    "v1.skill.AlexaHosted.HostingConfiguration": {
      "type": "object",
      "properties": {
        "alexaHosted": {
          "$ref": "#/definitions/v1.skill.AlexaHosted.AlexaHostedConfig"
        }
      },
      "description": "Configurations for creating new hosted skill"
    },
    "v1.skill.AlexaHosted.HostedSkillRepositoryCredentialsRequest": {
      "type": "object",
      "required": [
        "repository"
      ],
      "properties": {
        "repository": {
          "$ref": "#/definitions/v1.skill.AlexaHosted.HostedSkillRepositoryInfo"
        }
      }
    },
    "v1.skill.AlexaHosted.HostedSkillRepositoryInfo": {
      "type": "object",
      "required": [
        "type",
        "url"
      ],
      "properties": {
        "url": {
          "type": "string",
          "pattern": "^(https?|git|git+ssh)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]$"
        },
        "type": {
          "$ref": "#/definitions/v1.skill.AlexaHosted.HostedSkillRepository",
          "x-isEnum": true
        }
      },
      "description": "Alexa Hosted Skill's Repository Information"
    },
    "v1.skill.AlexaHosted.HostedSkillRepository": {
      "type": "string",
      "enum": [
        "GIT"
      ]
    },
    "v1.skill.AlexaHosted.HostedSkillRepositoryCredentialsList": {
      "type": "object",
      "properties": {
        "repositoryCredentials": {
          "$ref": "#/definitions/v1.skill.AlexaHosted.HostedSkillRepositoryCredentials"
        }
      },
      "description": "defines the structure for the hosted skill repository credentials response"
    },
    "v1.skill.AlexaHosted.HostedSkillRepositoryCredentials": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "AWS Access Key ID used to access hosted skill repository"
        },
        "password": {
          "type": "string",
          "description": "signed AWS Credentials used to access hosted skill repository"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time",
          "description": "expiration time for the credentials"
        }
      }
    },
    "v1.skill.AlexaHosted.HostedSkillMetadata": {
      "type": "object",
      "properties": {
        "alexaHosted": {
          "$ref": "#/definitions/v1.skill.AlexaHosted.HostedSkillInfo"
        }
      },
      "description": "Alexa Hosted skill's metadata"
    },
    "v1.skill.AlexaHosted.HostedSkillInfo": {
      "type": "object",
      "properties": {
        "repository": {
          "$ref": "#/definitions/v1.skill.AlexaHosted.HostedSkillRepositoryInfo"
        },
        "runtime": {
          "$ref": "#/definitions/v1.skill.AlexaHosted.HostedSkillRuntime",
          "x-isEnum": true
        }
      }
    },
    "v1.skill.AlexaHosted.AlexaHostedConfig": {
      "type": "object",
      "properties": {
        "runtime": {
          "$ref": "#/definitions/v1.skill.AlexaHosted.HostedSkillRuntime",
          "x-isEnum": true
        },
        "region": {
          "$ref": "#/definitions/v1.skill.AlexaHosted.HostedSkillRegion",
          "x-isEnum": true
        }
      },
      "description": "Alexa hosted skill create configuration"
    },
    "v1.skill.AlexaHosted.HostedSkillRuntime": {
      "type": "string",
      "description": "Hosted skill lambda runtime; Node.js 10.x is deprecated by Hosted Skill service as of July 30, 2021.",
      "enum": [
        "NODE_10_X",
        "PYTHON_3_7",
        "NODE_12_X"
      ]
    },
    "v1.skill.AlexaHosted.HostedSkillRegion": {
      "type": "string",
      "description": "Hosted skill AWS region",
      "enum": [
        "US_EAST_1",
        "US_WEST_2",
        "EU_WEST_1"
      ]
    },
    "v1.skill.AlexaHosted.HostedSkillPermissionType": {
      "type": "string",
      "enum": [
        "NEW_SKILL"
      ]
    },
    "v1.skill.AlexaHosted.HostedSkillPermissionStatus": {
      "type": "string",
      "enum": [
        "ALLOWED",
        "NEW_USER_REGISTRATION_REQUIRED",
        "RESOURCE_LIMIT_EXCEEDED",
        "RATE_EXCEEDED"
      ]
    },
    "v1.skill.AlexaHosted.HostedSkillPermission": {
      "type": "object",
      "properties": {
        "permission": {
          "$ref": "#/definitions/v1.skill.AlexaHosted.HostedSkillPermissionType",
          "x-isEnum": true
        },
        "status": {
          "$ref": "#/definitions/v1.skill.AlexaHosted.HostedSkillPermissionStatus",
          "x-isEnum": true
        },
        "actionUrl": {
          "type": "string"
        }
      },
      "description": "Customer's permission about Hosted skill features."
    },
    "v1.skill.betaTest.BetaTest": {
      "type": "object",
      "properties": {
        "expiryDate": {
          "type": "string",
          "format": "date-time",
          "description": "Expiry date of the beta test."
        },
        "status": {
          "$ref": "#/definitions/v1.skill.betaTest.Status",
          "x-isEnum": true
        },
        "feedbackEmail": {
          "type": "string",
          "description": "Email address for providing feedback"
        },
        "invitationUrl": {
          "type": "string",
          "description": "Deeplinking for getting authorized to the beta test."
        },
        "invitesRemaining": {
          "type": "integer",
          "description": "Remaining invite count for the beta test."
        }
      },
      "description": "Beta test for an Alexa skill."
    },
    "v1.skill.betaTest.Status": {
      "type": "string",
      "description": "Status of the beta test.",
      "enum": [
        "IN_DRAFT",
        "STARTING",
        "RUNNING",
        "STOPPING",
        "ENDED"
      ]
    },
    "v1.skill.betaTest.TestBody": {
      "type": "object",
      "properties": {
        "feedbackEmail": {
          "type": "string",
          "description": "Email address for providing feedback."
        }
      },
      "description": "Beta test meta-data."
    },
    "v1.skill.betaTest.testers.ListTestersResponse": {
      "type": "object",
      "properties": {
        "testers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.betaTest.testers.TesterWithDetails"
          }
        },
        "isTruncated": {
          "type": "boolean"
        },
        "nextToken": {
          "type": "string"
        }
      }
    },
    "v1.skill.betaTest.testers.TesterWithDetails": {
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string",
          "description": "Email address of the tester."
        },
        "associationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the tester is added to the beta test."
        },
        "isReminderAllowed": {
          "type": "boolean",
          "description": "Indicates whether the tester is allowed to be sent reminder."
        },
        "invitationStatus": {
          "$ref": "#/definitions/v1.skill.betaTest.testers.InvitationStatus",
          "x-isEnum": true
        }
      },
      "description": "Tester information."
    },
    "v1.skill.betaTest.testers.InvitationStatus": {
      "type": "string",
      "description": "Indicates whether the tester has accepted the invitation.",
      "enum": [
        "ACCEPTED",
        "NOT_ACCEPTED"
      ]
    },
    "v1.skill.betaTest.testers.TestersList": {
      "type": "object",
      "properties": {
        "testers": {
          "type": "array",
          "description": "List of the email address of testers.",
          "items": {
            "$ref": "#/definitions/v1.skill.betaTest.testers.Tester"
          }
        }
      },
      "description": "List of testers."
    },
    "v1.skill.betaTest.testers.Tester": {
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string",
          "description": "Email address of the tester."
        }
      }
    },
    "v1.skill.blueprint.ShoppingKit": {
      "type": "object",
      "properties": {
        "isShoppingActionsEnabled": {
          "type": "boolean",
          "description": "True if the skill uses Alexa Shopping Actions, false otherwise."
        }
      },
      "description": "Defines the structure for Shopping Kit related information in the skill manifest."
    },
    "v1.skill.certification.CertificationSummary": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Certification Id for the skill."
        },
        "status": {
          "$ref": "#/definitions/v1.skill.certification.CertificationStatus",
          "x-isEnum": true
        },
        "skillSubmissionTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp for when the skill was submitted for certification."
        },
        "reviewTrackingInfo": {
          "$ref": "#/definitions/v1.skill.certification.ReviewTrackingInfoSummary"
        }
      },
      "description": "Summary of the certification resource. This is a leaner view of the certification resource for the collections API."
    },
    "v1.skill.certification.CertificationResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Certification Id for the skill"
        },
        "status": {
          "$ref": "#/definitions/v1.skill.certification.CertificationStatus",
          "x-isEnum": true
        },
        "skillSubmissionTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp for when the skill was submitted for certification."
        },
        "reviewTrackingInfo": {
          "$ref": "#/definitions/v1.skill.certification.ReviewTrackingInfo"
        },
        "result": {
          "$ref": "#/definitions/v1.skill.certification.CertificationResult"
        }
      }
    },
    "v1.skill.certification.CertificationStatus": {
      "type": "string",
      "description": "String that specifies the current status of skill's certification Possible values are \"IN_PROGRESS\", \"SUCCEEDED\", \"FAILED\" and \"CANCELLED\"\n",
      "enum": [
        "IN_PROGRESS",
        "SUCCEEDED",
        "FAILED",
        "CANCELLED"
      ]
    },
    "v1.skill.certification.ReviewTrackingInfoSummary": {
      "type": "object",
      "properties": {
        "estimatedCompletionTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp for estimated completion of certification review for the skill."
        },
        "actualCompletionTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp for actual completion of certification review workflow for the skill."
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp for when the last update was made to review tracking info."
        }
      },
      "description": "Structure for summarised view of review tracking information of the skill. This does not have the estimationUpdates array field."
    },
    "v1.skill.certification.ReviewTrackingInfo": {
      "type": "object",
      "properties": {
        "estimatedCompletionTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp for estimated completion of certification review for the skill."
        },
        "actualCompletionTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp for actual completion of certification review for the skill."
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp for when the last update was made to review tracking info."
        },
        "estimationUpdates": {
          "type": "array",
          "description": "List of updates to estimation completion time for certification review for the skill.",
          "items": {
            "$ref": "#/definitions/v1.skill.certification.EstimationUpdate"
          }
        }
      },
      "description": "Structure for review tracking information of the skill."
    },
    "v1.skill.certification.EstimationUpdate": {
      "type": "object",
      "properties": {
        "originalEstimatedCompletionTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp for originally estimated completion of certification review for the skill."
        },
        "revisedEstimatedCompletionTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp for originally estimated completion of certification review for the skill."
        },
        "reason": {
          "type": "string",
          "description": "Reason for updates to estimates for certification review"
        }
      },
      "description": "Structure for any updates to estimation completion time for certification review for the skill."
    },
    "v1.skill.certification.CertificationResult": {
      "type": "object",
      "properties": {
        "distributionInfo": {
          "$ref": "#/definitions/v1.skill.certification.DistributionInfo"
        }
      },
      "description": "Structure for the result for the outcomes of certification review for the skill. Currently provides the distribution information of a skill if the certification SUCCEEDED.\n"
    },
    "v1.skill.certification.DistributionInfo": {
      "type": "object",
      "properties": {
        "publishedCountries": {
          "type": "array",
          "description": "All countries where the skill was published in by Amazon.",
          "items": {
            "type": "string",
            "description": "Two letter country codes in ISO 3166-1 alpha-2 format."
          }
        },
        "publicationFailures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.certification.PublicationFailure"
          }
        }
      },
      "description": "The distribution information for skill where Amazon distributed the skill"
    },
    "v1.skill.certification.PublicationFailure": {
      "type": "object",
      "properties": {
        "reason": {
          "type": "string",
          "description": "Reason why Amazon did not publish the skill in certain countries."
        },
        "countries": {
          "type": "array",
          "description": "List of countries where Amazon did not publish the skill for a specific reason",
          "items": {
            "type": "string",
            "description": "Two letter country codes in ISO 3166-1 alpha-2 format."
          }
        }
      },
      "description": "Information about why the skill was not published in certain countries."
    },
    "v1.skill.certification.ListCertificationsResponse": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/v1.Links"
        },
        "isTruncated": {
          "type": "boolean",
          "description": "boolean value for if the response is truncated. isTruncated = true if more than the assigned maxResults parameter value certification items are available for the skill. The results are then paginated and the remaining results can be retrieved in a similar paginated manner by using 'next' link in the _links or using the nextToken in a following request.\n"
        },
        "nextToken": {
          "type": "string",
          "description": "Encrypted token present when isTruncated is true."
        },
        "totalCount": {
          "type": "integer",
          "description": "Total number of certification results available for the skill."
        },
        "items": {
          "type": "array",
          "description": "List of certifications available for a skill. The list of certifications is sorted in a default descending sort order on id field.\n",
          "items": {
            "$ref": "#/definitions/v1.skill.certification.CertificationSummary"
          }
        }
      },
      "description": "List of certification summary for a skill."
    },
    "v1.skill.evaluations.ProfileNluRequest": {
      "type": "object",
      "required": [
        "utterance"
      ],
      "properties": {
        "utterance": {
          "type": "string",
          "description": "Actual representation of user input to Alexa."
        },
        "multiTurnToken": {
          "type": "string",
          "description": "Opaque string which contains multi-turn related context."
        }
      }
    },
    "v1.skill.evaluations.ProfileNluResponse": {
      "type": "object",
      "properties": {
        "sessionEnded": {
          "type": "boolean",
          "description": "Represents when an utterance results in the skill exiting. It would be true when NLU selects 1P ExitAppIntent or GoHomeIntent, and false otherwise.\n"
        },
        "selectedIntent": {
          "$ref": "#/definitions/v1.skill.evaluations.ProfileNluSelectedIntent"
        },
        "consideredIntents": {
          "type": "array",
          "description": "All intents that Alexa considered for the utterance in the request, but did not select.",
          "items": {
            "$ref": "#/definitions/v1.skill.evaluations.Intent"
          }
        },
        "multiTurn": {
          "$ref": "#/definitions/v1.skill.evaluations.MultiTurn"
        }
      }
    },
    "v1.skill.evaluations.ProfileNluSelectedIntent": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.evaluations.Intent"
        }
      ],
      "description": "The intent that Alexa selected for the utterance in the request."
    },
    "v1.skill.evaluations.MultiTurn": {
      "type": "object",
      "properties": {
        "dialogAct": {
          "$ref": "#/definitions/v1.skill.evaluations.DialogAct"
        },
        "token": {
          "type": "string",
          "description": "Opaque string which contains multi-turn related context."
        },
        "prompt": {
          "type": "string",
          "description": "A sample prompt defined in the dialog model for each DialogAct."
        }
      },
      "description": "Included when the selected intent has dialog defined and the dialog is not completed.  To continue the dialog, provide the value of the token in the multiTurnToken field in the next request.\n"
    },
    "v1.skill.evaluations.DialogAct": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v1.skill.evaluations.DialogActType",
          "x-isEnum": true
        },
        "targetSlot": {
          "type": "string",
          "description": "The name of the target slot that needs to be filled or confirmed for a dialogAct"
        }
      },
      "description": "A representation of question prompts to the user for multi-turn, which requires user to fill a slot value, or confirm a slot value, or confirm an intent.\n"
    },
    "v1.skill.evaluations.DialogActType": {
      "type": "string",
      "enum": [
        "Dialog.ElicitSlot",
        "Dialog.ConfirmSlot",
        "Dialog.ConfirmIntent"
      ]
    },
    "v1.skill.evaluations.Intent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "confirmationStatus": {
          "$ref": "#/definitions/v1.skill.evaluations.ConfirmationStatusType",
          "x-isEnum": true
        },
        "slots": {
          "type": "object",
          "description": "A map of key-value pairs that further describes what the user meant based on a predefined intent schema. The map can be empty.\n",
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.evaluations.Slot"
          }
        }
      }
    },
    "v1.skill.evaluations.ConfirmationStatusType": {
      "type": "string",
      "description": "An enumeration indicating whether the user has explicitly confirmed or denied the entire intent. Possible values: \"NONE\", \"CONFIRMED\", \"DENIED\".\n",
      "enum": [
        "NONE",
        "CONFIRMED",
        "DENIED"
      ]
    },
    "v1.skill.evaluations.Slot": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "confirmationStatus": {
          "$ref": "#/definitions/v1.skill.evaluations.ConfirmationStatusType",
          "x-isEnum": true
        },
        "resolutions": {
          "$ref": "#/definitions/v1.skill.evaluations.SlotResolutions"
        }
      }
    },
    "v1.skill.evaluations.SlotResolutions": {
      "type": "object",
      "properties": {
        "resolutionsPerAuthority": {
          "type": "array",
          "description": "An array of objects representing each possible authority for entity resolution. An authority represents the source for the data provided for the slot. For a custom slot type, the authority is the slot type you defined.\n",
          "items": {
            "$ref": "#/definitions/v1.skill.evaluations.ResolutionsPerAuthorityItems"
          }
        }
      },
      "description": "A resolutions object representing the results of resolving the words captured from the user's utterance.\n"
    },
    "v1.skill.evaluations.ResolutionsPerAuthorityItems": {
      "type": "object",
      "properties": {
        "authority": {
          "type": "string",
          "description": "The name of the authority for the slot values. For custom slot types, this authority label incorporates your skill ID and the slot type name.\n"
        },
        "status": {
          "$ref": "#/definitions/v1.skill.evaluations.ResolutionsPerAuthorityStatus"
        },
        "values": {
          "type": "array",
          "description": "An array of resolved values for the slot.",
          "items": {
            "$ref": "#/definitions/v1.skill.evaluations.ResolutionsPerAuthorityValueItems"
          }
        }
      }
    },
    "v1.skill.evaluations.ResolutionsPerAuthorityStatus": {
      "type": "object",
      "properties": {
        "code": {
          "$ref": "#/definitions/v1.skill.evaluations.ResolutionsPerAuthorityStatusCode",
          "x-isEnum": true
        }
      },
      "description": "An object representing the status of entity resolution for the slot."
    },
    "v1.skill.evaluations.ResolutionsPerAuthorityStatusCode": {
      "type": "string",
      "description": "A code indicating the results of attempting to resolve the user utterance against the defined slot types. This can be one of the following:\nER_SUCCESS_MATCH: The spoken value matched a value or synonym explicitly defined in your custom slot type. ER_SUCCESS_NO_MATCH: The spoken value did not match any values or synonyms explicitly defined in your custom slot type. ER_ERROR_TIMEOUT: An error occurred due to a timeout. ER_ERROR_EXCEPTION: An error occurred due to an exception during processing.\n",
      "enum": [
        "ER_SUCCESS_MATCH",
        "ER_SUCCESS_NO_MATCH",
        "ER_ERROR_TIMEOUT",
        "ER_ERROR_EXCEPTION"
      ]
    },
    "v1.skill.evaluations.ResolutionsPerAuthorityValueItems": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The string for the resolved slot value."
        },
        "id": {
          "type": "string",
          "description": "The unique ID defined for the resolved slot value. This is based on the IDs defined in the slot type definition.\n"
        }
      },
      "description": "An object representing the resolved value for the slot, based on the user's utterance and the slot type definition.\n"
    },
    "v1.skill.experiment.PaginationContext": {
      "type": "object",
      "properties": {
        "nextToken": {
          "type": "string",
          "description": "Provided by server to retrieve the next set of paginated results."
        }
      },
      "description": "Defines the body that provides pagination-related properties in the operation response to indicate\nthat additional paginated results are available.\n"
    },
    "v1.skill.experiment.CreateExperimentRequest": {
      "type": "object",
      "required": [
        "experiment"
      ],
      "properties": {
        "experiment": {
          "$ref": "#/definitions/v1.skill.experiment.CreateExperimentInput"
        }
      },
      "description": "Defines the request body for creating an experiment."
    },
    "v1.skill.experiment.UpdateExperimentRequest": {
      "type": "object",
      "required": [
        "experiment"
      ],
      "properties": {
        "experiment": {
          "$ref": "#/definitions/v1.skill.experiment.UpdateExperimentInput"
        }
      },
      "description": "Defines the request body for updating an experiment."
    },
    "v1.skill.experiment.UpdateExposureRequest": {
      "type": "object",
      "required": [
        "exposurePercentage"
      ],
      "properties": {
        "exposurePercentage": {
          "type": "integer",
          "description": "The percentage of unique customers that will be part of the skill experiment while the experiment is running.",
          "minimum": 0,
          "maximum": 100
        }
      },
      "description": "Defines the request body for updating the exposure of an experiment."
    },
    "v1.skill.experiment.SetCustomerTreatmentOverrideRequest": {
      "type": "object",
      "required": [
        "treatmentId"
      ],
      "properties": {
        "treatmentId": {
          "$ref": "#/definitions/v1.skill.experiment.TreatmentId",
          "x-isEnum": true
        }
      },
      "description": "Defines the request body for adding this customer's treatment override to an experiment."
    },
    "v1.skill.experiment.GetCustomerTreatmentOverrideResponse": {
      "type": "object",
      "properties": {
        "treatmentId": {
          "$ref": "#/definitions/v1.skill.experiment.TreatmentId",
          "x-isEnum": true
        },
        "treatmentOverrideCount": {
          "type": "integer",
          "description": "The number of overrides which currently exist for the experiment.\n"
        }
      },
      "description": "Defines the response body when this customer's treatment override information is requested."
    },
    "v1.skill.experiment.ManageExperimentStateRequest": {
      "type": "object",
      "required": [
        "targetState"
      ],
      "properties": {
        "targetState": {
          "$ref": "#/definitions/v1.skill.experiment.TargetState",
          "x-isEnum": true
        },
        "stoppedReason": {
          "$ref": "#/definitions/v1.skill.experiment.ExperimentStoppedReason",
          "x-isEnum": true
        }
      },
      "description": "Defines the request body for performing an experiment action to move it to a target state."
    },
    "v1.skill.experiment.GetExperimentStateResponse": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/v1.skill.experiment.State",
          "x-isEnum": true
        }
      },
      "description": "Defines the response body for retrieving the current experiment state."
    },
    "v1.skill.experiment.ListExperimentsResponse": {
      "type": "object",
      "properties": {
        "paginationContext": {
          "$ref": "#/definitions/v1.skill.experiment.PaginationContext"
        },
        "experiments": {
          "type": "array",
          "description": "List of experiments with select fields returned.",
          "items": {
            "$ref": "#/definitions/v1.skill.experiment.ExperimentSummary"
          }
        }
      },
      "description": "Defines the response body for retrieving all the experiments of a skill."
    },
    "v1.skill.experiment.GetExperimentResponse": {
      "type": "object",
      "properties": {
        "experiment": {
          "$ref": "#/definitions/v1.skill.experiment.ExperimentInformation"
        },
        "lastStateTransition": {
          "$ref": "#/definitions/v1.skill.experiment.ExperimentLastStateTransition"
        }
      },
      "description": "Defines the response body for retrieving an experiment."
    },
    "v1.skill.experiment.ListExperimentMetricSnapshotsResponse": {
      "type": "object",
      "properties": {
        "paginationContext": {
          "$ref": "#/definitions/v1.skill.experiment.PaginationContext"
        },
        "metricSnapshots": {
          "type": "array",
          "description": "List of experiment metric snapshots.",
          "items": {
            "$ref": "#/definitions/v1.skill.experiment.MetricSnapshot"
          }
        }
      },
      "description": "Defines the response body for retrieving the experiment metric snapshots."
    },
    "v1.skill.experiment.GetExperimentMetricSnapshotResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1.skill.experiment.MetricSnapshotStatus",
          "x-isEnum": true
        },
        "statusReason": {
          "type": "string",
          "description": "The reason why the metric snapshot status is unreliable.\n"
        },
        "metrics": {
          "type": "array",
          "description": "List of actual experiment metrics represented by a metric snapshot.",
          "items": {
            "$ref": "#/definitions/v1.skill.experiment.Metric"
          }
        }
      },
      "description": "Defines the response body for retrieving the experiment results."
    },
    "v1.skill.experiment.ExperimentInformation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name that developer assigns to the experiment for easier identification."
        },
        "description": {
          "type": "string",
          "description": "Hypothesis that developer provides to describe the experiment's purpose."
        },
        "type": {
          "$ref": "#/definitions/v1.skill.experiment.ExperimentType",
          "x-isEnum": true
        },
        "plannedDuration": {
          "type": "string",
          "description": "The number of weeks the skill builder intends to run the experiment.\nUsed for documentation purposes and by metric platform as a reference.\nDoes not impact experiment execution.\nFormat uses ISO-8601 representation of duration. (Example: 4 weeks = \"P4W\")\n"
        },
        "exposurePercentage": {
          "type": "integer",
          "description": "The percentage of unique customers that will be part of the skill experiment while the experiment is running.",
          "minimum": 0,
          "maximum": 100
        },
        "treatmentOverrideCount": {
          "type": "integer",
          "description": "The number of overrides which currently exist for the experiment.\n"
        },
        "metricConfigurations": {
          "type": "array",
          "description": "List of metric configurations that determine which metrics are key/guardrail metrics and the expected metric direction.\nThis is required by the system that collects metrics and generates the metric reports.\n",
          "items": {
            "$ref": "#/definitions/v1.skill.experiment.MetricConfiguration"
          }
        },
        "state": {
          "$ref": "#/definitions/v1.skill.experiment.State",
          "x-isEnum": true
        },
        "history": {
          "$ref": "#/definitions/v1.skill.experiment.ExperimentHistory"
        },
        "trigger": {
          "$ref": "#/definitions/v1.skill.experiment.ExperimentTrigger"
        }
      },
      "description": "Defines the full Experiment body which would contain all experiment details.\n"
    },
    "v1.skill.experiment.ExperimentLastStateTransition": {
      "type": "object",
      "properties": {
        "sourceState": {
          "$ref": "#/definitions/v1.skill.experiment.SourceState",
          "x-isEnum": true
        },
        "targetState": {
          "$ref": "#/definitions/v1.skill.experiment.DestinationState",
          "x-isEnum": true
        },
        "status": {
          "$ref": "#/definitions/v1.skill.experiment.StateTransitionStatus",
          "x-isEnum": true
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "errors": {
          "type": "array",
          "description": "List of error objects which define what errors caused the state transition failure.\n",
          "items": {
            "$ref": "#/definitions/v1.skill.experiment.StateTransitionError"
          }
        }
      },
      "description": "Defines the last state transition information for the experiment.\n"
    },
    "v1.skill.experiment.CreateExperimentInput": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name that developer assigns to the experiment for easier identification.",
          "minLength": 1,
          "maxLength": 255
        },
        "description": {
          "type": "string",
          "description": "Hypothesis that developer provides to describe the experiment's purpose.",
          "maxLength": 300
        },
        "type": {
          "$ref": "#/definitions/v1.skill.experiment.ExperimentType",
          "x-isEnum": true
        },
        "plannedDuration": {
          "type": "string",
          "description": "The number of weeks the skill builder intends to run the experiment.\nUsed for documentation purposes and by metric platform as a reference.\nDoes not impact experiment execution.\nFormat uses ISO-8601 representation of duration. (Example: 4 weeks = \"P4W\")\n",
          "minLength": 1,
          "maxLength": 255
        },
        "exposurePercentage": {
          "type": "integer",
          "description": "The percentage of unique customers that will be part of the skill experiment while the experiment is running.",
          "minimum": 0,
          "maximum": 100
        },
        "metricConfigurations": {
          "type": "array",
          "description": "List of metric configurations that determine which metrics are key/guardrail metrics and the expected metric direction.",
          "items": {
            "$ref": "#/definitions/v1.skill.experiment.MetricConfiguration"
          }
        }
      },
      "description": "Defines the Experiment body used for requesting an experiment creation.\nOnly includes fields that are editable by the user.\n"
    },
    "v1.skill.experiment.UpdateExperimentInput": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Hypothesis that developer provides to describe the experiment's purpose.",
          "maxLength": 300
        },
        "plannedDuration": {
          "type": "string",
          "description": "The number of weeks the skill builder intends to run the experiment.\nUsed for documentation purposes and by metric platform as a reference.\nDoes not impact experiment execution.\nFormat uses ISO-8601 representation of duration. (Example: 4 weeks = \"P4W\")\n",
          "minLength": 1,
          "maxLength": 255
        },
        "exposurePercentage": {
          "type": "integer",
          "description": "The percentage of unique customers that will be part of the skill experiment while the experiment is running.",
          "minimum": 0,
          "maximum": 100
        },
        "metricConfigurations": {
          "type": "array",
          "description": "List of metric configurations that determine which metrics are key/guardrail metrics and the expected metric direction.",
          "items": {
            "$ref": "#/definitions/v1.skill.experiment.MetricConfiguration"
          }
        }
      },
      "description": "Defines the Experiment body used for requesting an experiment update.\nOnly includes fields that are editable by the user.\n"
    },
    "v1.skill.experiment.ExperimentSummary": {
      "type": "object",
      "properties": {
        "experimentId": {
          "type": "string",
          "description": "Identifier for experiment within a skill."
        },
        "name": {
          "type": "string",
          "description": "Name that developer assigns to the experiment for easier identification."
        },
        "state": {
          "$ref": "#/definitions/v1.skill.experiment.State",
          "x-isEnum": true
        },
        "experimentHistory": {
          "$ref": "#/definitions/v1.skill.experiment.ExperimentHistory"
        }
      },
      "description": "Defines the shortened Experiment body which would contain a summary of experiment information.\n"
    },
    "v1.skill.experiment.ExperimentHistory": {
      "type": "object",
      "properties": {
        "creationTime": {
          "type": "string",
          "format": "date-time"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "stoppedReason": {
          "type": "string",
          "description": "The reason an experiment was stopped if experiment was stopped."
        }
      },
      "description": "Defines historical properties of a skill experiment."
    },
    "v1.skill.experiment.ExperimentTrigger": {
      "type": "object",
      "properties": {
        "scheduledEndTime": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "Defines trigger properties of a skill experiment."
    },
    "v1.skill.experiment.MetricConfiguration": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique name that identifies experiment metric.",
          "minLength": 1,
          "maxLength": 125
        },
        "metricTypes": {
          "type": "array",
          "description": "List of types that the metric has been assigned.",
          "items": {
            "$ref": "#/definitions/v1.skill.experiment.MetricType"
          }
        },
        "expectedChange": {
          "$ref": "#/definitions/v1.skill.experiment.MetricChangeDirection",
          "x-isEnum": true
        }
      },
      "description": "Configures the metrics that will be captured for the skill experiment.\nThis is required by the system that collects metrics and generates the metric reports.\n"
    },
    "v1.skill.experiment.MetricSnapshot": {
      "type": "object",
      "properties": {
        "metricSnapshotId": {
          "type": "string",
          "description": "Identifies the experiment metric snapshot in a skill experiment."
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "The start date of the metric snapshot."
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "The end date of the metric snapshot."
        }
      },
      "description": "Defines the metric snapshot body with supplemental metadata properties."
    },
    "v1.skill.experiment.Metric": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique name that identifies experiment metric."
        },
        "treatmentId": {
          "$ref": "#/definitions/v1.skill.experiment.TreatmentId",
          "x-isEnum": true
        },
        "values": {
          "$ref": "#/definitions/v1.skill.experiment.MetricValues"
        }
      },
      "description": "Defines the metrics body."
    },
    "v1.skill.experiment.MetricValues": {
      "type": "object",
      "properties": {
        "mean": {
          "type": "number",
          "format": "double",
          "description": "The mean (average) of each sample (T1 or C group)."
        },
        "percentDiff": {
          "type": "number",
          "format": "double",
          "description": "The relative percent difference between the mean of the T1 group and the mean of the C group."
        },
        "confidenceIntervalLower": {
          "type": "number",
          "format": "double",
          "description": "The lower limit number of the confidence interval range.\nConfidence interval measures the probability that the mean falls within a range.\n"
        },
        "confidenceIntervalUpper": {
          "type": "number",
          "format": "double",
          "description": "The upper limit number of the confidence interval range."
        },
        "pValue": {
          "type": "number",
          "format": "double",
          "description": "The probability that the difference between the two means (from T1 and C) is due to random sampling error."
        },
        "userCount": {
          "type": "integer",
          "format": "int64",
          "description": "Count of users in the treatment sample."
        }
      },
      "description": "Defines the body of the metric result values."
    },
    "v1.skill.experiment.MetricType": {
      "type": "string",
      "description": "The metric types a specific metric can be assigned to.\n* `KEY` - Identified as a metric that should provide clear evidence of expected changes caused by the new treatment experience.\n* `GUARDRAIL` - Identified as a metric that would detect unexpected regressions caused by the new treatment experience.\n",
      "enum": [
        "KEY",
        "GUARDRAIL"
      ]
    },
    "v1.skill.experiment.MetricChangeDirection": {
      "type": "string",
      "description": "The direction that an experiment metric is expected to trend during the experiment.\n* `INCREASE` - An upward change in metric value.\n* `DECREASE` - A downward change in metric value.\n",
      "enum": [
        "INCREASE",
        "DECREASE"
      ]
    },
    "v1.skill.experiment.State": {
      "type": "string",
      "description": "* `CREATED` - The experiment is successfully created but has not been enabled or started.\n* `ENABLING` - The experiment has initiated the transition to becoming \"ENABLED\".\n* `ENABLED` - The experiment configurations have been deployed but only customer treatment overrides set to T1 can view the T1 experience of a skill. No metrics are collected.\n* `RUNNING` - The experiment has started and a percentage of skill customers defined in the exposurePercentage will be entered into the experiment. Customers will randomly get assigned the T1 or C experience. Metric collection will begin.\n* `STOPPING` - The experiment has initated the transition to becoming \"STOPPED\".\n* `STOPPED` - The experiment has ended and all customers will experience the C behavior. Metrics will stop being collected.\n* `FAILED` - The experiment configurations have failed to deploy while enabling or starting the experiment.\n",
      "enum": [
        "CREATED",
        "ENABLING",
        "ENABLED",
        "RUNNING",
        "STOPPING",
        "STOPPED",
        "FAILED"
      ]
    },
    "v1.skill.experiment.TargetState": {
      "type": "string",
      "description": "These states are used to perform a transition action (Pilot, Start, Stop, Conclude) on the experiment.\n* `ENABLED`: Target state for the 'Pilot' action. Experiment configurations are deployed and customer overrides are activated. Actual experiment has not started yet.\n* `RUNNING`: Target state for the 'Start' action. Experiment has started with the configured exposure. Skill customers selected within the exposure are contributing to the metric data.\n* `STOPPED`: Target state for the 'Stop' action. Experiment has stopped and all experiment configurations have been removed. All customers will see the C behavior by default.\n",
      "enum": [
        "ENABLED",
        "RUNNING",
        "STOPPED"
      ]
    },
    "v1.skill.experiment.SourceState": {
      "type": "string",
      "description": "These states are for recording the previous state from a transition action (Created, Pilot, Start, Stop) on the experiment.\n* `CREATED`: Result state for the 'Create' action. Experiment has been created.\n* `ENABLED`: Result state for the 'Pilot' action. Experiment configurations are deployed and customer overrides are activated. Actual experiment has not started yet.\n* `RUNNING`: Result state for the 'Start' action. Experiment has started with the configured exposure. Skill customers selected within the exposure are contributing to the metric data.\n",
      "enum": [
        "CREATED",
        "ENABLED",
        "RUNNING"
      ]
    },
    "v1.skill.experiment.DestinationState": {
      "type": "string",
      "description": "These states are for recording the destination state from a transition action (Created, Pilot, Start, Stop) on the experiment.\n* `CREATED`: Result state for the 'Create' action. Experiment has been created.\n* `ENABLED`: Result state for the 'Pilot' action. Experiment configurations are deployed and customer overrides are activated. Actual experiment has not started yet.\n* `RUNNING`: Result state for the 'Start' action. Experiment has started with the configured exposure. Skill customers selected within the exposure are contributing to the metric data.\n* `STOPPED`: Result state for the 'Stop' action. Experiment has stopped and all experiment configurations have been removed. All customers will see the C behavior by default.\n",
      "enum": [
        "CREATED",
        "ENABLED",
        "RUNNING",
        "STOPPED"
      ]
    },
    "v1.skill.experiment.TreatmentId": {
      "type": "string",
      "description": "Treatment identifier for an experiment.\n* `C` - Control. The treatment that defines the existing skill experience.\n* `T1` - Treatment 1. The threatment that defines the experimental skill experience.\n",
      "enum": [
        "C",
        "T1"
      ]
    },
    "v1.skill.experiment.ExperimentType": {
      "type": "string",
      "description": "Type of the experiment which directly affects the skill version used for T1.\nC will always point to the skill version in the skill's LIVE stage regardless of experiment type.\n",
      "enum": [
        "ENDPOINT_BASED"
      ]
    },
    "v1.skill.experiment.StateTransitionStatus": {
      "type": "string",
      "description": "Status indiciating whether the state transiton was successful, in progress, or failed.\n",
      "enum": [
        "SUCCEEDED",
        "IN_PROGRESS",
        "FAILED"
      ]
    },
    "v1.skill.experiment.ExperimentStoppedReason": {
      "type": "string",
      "description": "The reason indicating why an exerpiment was stopped. If none is chosen then default to DEVELOPER_REQUEST.\nOnly used when putting experiment into STOPPED state.\n",
      "enum": [
        "EXPERIMENT_SUCCESS",
        "EXPERIMENT_ISSUE"
      ]
    },
    "v1.skill.experiment.StateTransitionErrorType": {
      "type": "string",
      "description": "The error type which caused a state transition failure.\n",
      "enum": [
        "INELIGIBLITY"
      ]
    },
    "v1.skill.experiment.MetricSnapshotStatus": {
      "type": "string",
      "description": "The status of the metric snapshot, whether it's RELIABLE or UNRELIABLE.\n",
      "enum": [
        "RELIABLE",
        "UNRELIABLE"
      ]
    },
    "v1.skill.experiment.StateTransitionError": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v1.skill.experiment.StateTransitionErrorType",
          "x-isEnum": true
        },
        "message": {
          "type": "string",
          "description": "The message associated with the state transition error."
        }
      },
      "description": "The errors which caused a state transition failure.\n"
    },
    "v1.skill.history.DialogActName": {
      "type": "string",
      "description": "Dialog act directive name.\n* `Dialog.ElicitSlot`: Alexa asked the user for the value of a specific slot. (https://developer.amazon.com/docs/custom-skills/dialog-interface-reference.html#elicitslot)\n* `Dialog.ConfirmSlot`: Alexa confirmed the value of a specific slot before continuing with the dialog. (https://developer.amazon.com/docs/custom-skills/dialog-interface-reference.html#confirmslot)\n* `Dialog.ConfirmIntent`: Alexa confirmed the all the information the user has provided for the intent before the skill took action. (https://developer.amazon.com/docs/custom-skills/dialog-interface-reference.html#confirmintent)\n",
      "enum": [
        "Dialog.ElicitSlot",
        "Dialog.ConfirmSlot",
        "Dialog.ConfirmIntent"
      ]
    },
    "v1.skill.history.Confidence": {
      "type": "object",
      "properties": {
        "bin": {
          "$ref": "#/definitions/v1.skill.history.ConfidenceBin",
          "x-isEnum": true
        }
      },
      "description": "The hypothesized confidence for this interaction."
    },
    "v1.skill.history.ConfidenceBin": {
      "type": "string",
      "description": "Intent confidence bin for this utterance.\n* `HIGH`: Intent was recognized with high confidence.\n* `MEDIUM`: Intent was recognized with medium confidence.\n* `LOW`: Intent was recognized with low confidence. Note: Low confidence intents are not sent to the skill.\n",
      "enum": [
        "HIGH",
        "MEDIUM",
        "LOW"
      ]
    },
    "v1.skill.history.Slot": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the slot that was used in this interaction."
        }
      }
    },
    "v1.skill.history.Intent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The hypothesized intent for this utterance."
        },
        "confidence": {
          "$ref": "#/definitions/v1.skill.history.Confidence"
        },
        "slots": {
          "type": "object",
          "description": "The hypothesized slot(s) for this interaction.",
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.history.Slot"
          }
        }
      },
      "description": "Provides the intent name, slots and confidence of the intent used in this interaction."
    },
    "v1.skill.history.IntentRequest": {
      "type": "object",
      "properties": {
        "dialogAct": {
          "$ref": "#/definitions/v1.skill.history.DialogAct"
        },
        "intent": {
          "$ref": "#/definitions/v1.skill.history.Intent"
        },
        "interactionType": {
          "$ref": "#/definitions/v1.skill.history.InteractionType",
          "x-isEnum": true
        },
        "locale": {
          "$ref": "#/definitions/v1.skill.history.IntentRequestLocales",
          "x-isEnum": true
        },
        "publicationStatus": {
          "$ref": "#/definitions/v1.skill.history.PublicationStatus",
          "x-isEnum": true
        },
        "stage": {
          "$ref": "#/definitions/v1.StageType",
          "x-isEnum": true
        },
        "utteranceText": {
          "type": "string",
          "description": "The transcribed user speech."
        }
      }
    },
    "v1.skill.history.DialogAct": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/v1.skill.history.DialogActName",
          "x-isEnum": true
        }
      },
      "description": "The dialog act used in the interaction."
    },
    "v1.skill.history.IntentRequests": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/v1.Links"
        },
        "nextToken": {
          "type": "string",
          "description": "This token can be used to load the next page of the result."
        },
        "isTruncated": {
          "type": "boolean",
          "description": "This property is true when all the results matching the search request haven't been returned, false otherwise."
        },
        "totalCount": {
          "type": "number",
          "description": "Total number of records that matched the given search query."
        },
        "startIndex": {
          "type": "number",
          "description": "Position of the current page in the result set."
        },
        "skillId": {
          "type": "string",
          "description": "The Skill Id."
        },
        "items": {
          "type": "array",
          "description": "List of intent requests for the skill",
          "items": {
            "$ref": "#/definitions/v1.skill.history.IntentRequest"
          }
        }
      },
      "description": "Response to the GET Intent Request History API. It contains the collection of utterances for the skill, nextToken and other metadata related to the search query."
    },
    "v1.skill.history.IntentRequestLocales": {
      "type": "string",
      "description": "Skill locale in which this interaction occurred.",
      "enum": [
        "en-US",
        "en-GB",
        "en-IN",
        "en-CA",
        "en-AU",
        "de-DE",
        "ja-JP"
      ]
    },
    "v1.skill.history.PublicationStatus": {
      "type": "string",
      "description": "The publication status of the skill when this interaction occurred",
      "enum": [
        "Development",
        "Certification"
      ]
    },
    "v1.skill.history.InteractionType": {
      "type": "string",
      "description": "Indicates if the utterance was executed as a \"ONE_SHOT\" interaction or \"MODAL\" interaction.\n* `ONE_SHOT`: The user invokes the skill and states their intent in a single phrase.\n* `MODAL`: The user first invokes the skill and then states their intent.\n",
      "enum": [
        "ONE_SHOT",
        "MODAL"
      ]
    },
    "v1.skill.history.sortFieldForIntentRequestType": {
      "type": "string",
      "enum": [
        "recordCount",
        "intent.name",
        "intent.confidence.bin",
        "stage",
        "dialogAct.name",
        "locale",
        "utteranceText",
        "publicationStatus",
        "interactionType"
      ],
      "default": "recordCount"
    },
    "v1.skill.history.IntentConfidenceBin": {
      "type": "string",
      "description": "A filter used to retrieve items where the intent confidence bin is equal to the given value.\n* `HIGH`: Intent was recognized with high confidence.\n* `MEDIUM`: Intent was recognized with medium confidence.\n* `LOW`: Intent was recognized with low confidence. Note: Low confidence intents are not sent to the skill.\n",
      "enum": [
        "HIGH",
        "MEDIUM",
        "LOW"
      ]
    },
    "v1.skill.history.localeInQuery": {
      "type": "string",
      "description": "A filter used to retrieve items where the locale is equal to the given value.",
      "enum": [
        "en-US",
        "en-GB",
        "en-IN",
        "en-CA",
        "en-AU",
        "de-DE",
        "ja-JP"
      ]
    },
    "v1.skill.interactionModel.InteractionModelData": {
      "type": "object",
      "required": [
        "interactionModel"
      ],
      "properties": {
        "version": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "interactionModel": {
          "$ref": "#/definitions/v1.skill.interactionModel.InteractionModelSchema"
        }
      }
    },
    "v1.skill.interactionModel.InteractionModelSchema": {
      "type": "object",
      "required": [
        "languageModel"
      ],
      "properties": {
        "languageModel": {
          "$ref": "#/definitions/v1.skill.interactionModel.languageModel"
        },
        "dialog": {
          "$ref": "#/definitions/v1.skill.interactionModel.Dialog"
        },
        "prompts": {
          "type": "array",
          "description": "List of prompts.",
          "items": {
            "$ref": "#/definitions/v1.skill.interactionModel.Prompt"
          }
        }
      }
    },
    "v1.skill.interactionModel.languageModel": {
      "type": "object",
      "required": [
        "intents",
        "invocationName"
      ],
      "properties": {
        "invocationName": {
          "type": "string",
          "description": "Invocation name of the skill.",
          "minLength": 1
        },
        "types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.interactionModel.SlotType"
          }
        },
        "intents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.interactionModel.Intent"
          },
          "minItems": 1
        },
        "modelConfiguration": {
          "$ref": "#/definitions/v1.skill.interactionModel.ModelConfiguration"
        }
      },
      "description": "Define the language model."
    },
    "v1.skill.interactionModel.ModelConfiguration": {
      "type": "object",
      "properties": {
        "fallbackIntentSensitivity": {
          "$ref": "#/definitions/v1.skill.interactionModel.FallbackIntentSensitivity"
        }
      },
      "description": "Global configurations applicable to a skill's model."
    },
    "v1.skill.interactionModel.FallbackIntentSensitivity": {
      "type": "object",
      "required": [
        "level"
      ],
      "properties": {
        "level": {
          "$ref": "#/definitions/v1.skill.interactionModel.FallbackIntentSensitivityLevel",
          "x-isEnum": true
        }
      },
      "description": "Denotes skill's sensitivity for out-of-domain utterances."
    },
    "v1.skill.interactionModel.FallbackIntentSensitivityLevel": {
      "type": "string",
      "description": "Skill's sensitivity level for out-of-domain utterances. By default, the sensitivity level of the skill is set to ‘LOW’.\nAs the sensitivity level for a skill is increased, more customer utterances that are not supported by the skill will be captured by AMAZON.FallbackIntent.\n",
      "enum": [
        "HIGH",
        "MEDIUM",
        "LOW"
      ]
    },
    "v1.skill.interactionModel.SlotType": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the custom slot type."
        },
        "values": {
          "type": "array",
          "description": "List of expected values. Values outside the list are still returned.",
          "items": {
            "$ref": "#/definitions/v1.skill.interactionModel.TypeValue"
          }
        },
        "valueSupplier": {
          "$ref": "#/definitions/v1.skill.interactionModel.ValueSupplier"
        }
      },
      "description": "Custom slot type to define a list of possible values for a slot. Used for items that are not covered by Amazon's built-in slot types."
    },
    "v1.skill.interactionModel.ValueSupplier": {
      "type": "object",
      "required": [
        "type"
      ],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "description": "The exact type of validation e.g.CatalogValueSupplier etc.",
          "x-isDiscriminator": true
        }
      },
      "description": "Supplier object to provide slot values."
    },
    "v1.skill.interactionModel.InlineValueSupplier": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.interactionModel.ValueSupplier"
        },
        {
          "type": "object",
          "properties": {
            "values": {
              "type": "array",
              "description": "The list of slot type values.",
              "items": {
                "$ref": "#/definitions/v1.skill.interactionModel.TypeValue"
              }
            }
          }
        }
      ],
      "description": "Supplies inline slot type values.",
      "x-discriminator-value": "InlineValueSupplier"
    },
    "v1.skill.interactionModel.CatalogValueSupplier": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.interactionModel.ValueSupplier"
        },
        {
          "type": "object",
          "properties": {
            "valueCatalog": {
              "$ref": "#/definitions/v1.skill.interactionModel.ValueCatalog"
            }
          }
        }
      ],
      "description": "Supply slot values from catalog(s).",
      "x-discriminator-value": "CatalogValueSupplier"
    },
    "v1.skill.interactionModel.TypeValue": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/v1.skill.interactionModel.TypeValueObject"
        }
      },
      "description": "The value schema in type object of interaction model."
    },
    "v1.skill.interactionModel.TypeValueObject": {
      "type": "object",
      "required": [
        "synonyms",
        "value"
      ],
      "properties": {
        "value": {
          "type": "string",
          "minLength": 1
        },
        "synonyms": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1
        }
      },
      "description": "The object that contains individual type values."
    },
    "v1.skill.interactionModel.ValueCatalog": {
      "type": "object",
      "required": [
        "catalogId",
        "version"
      ],
      "properties": {
        "catalogId": {
          "type": "string",
          "description": "CatalogId.",
          "minLength": 1
        },
        "version": {
          "type": "string",
          "description": "Catalog version.",
          "minLength": 1
        }
      },
      "description": "Catalog reference to provide values."
    },
    "v1.skill.interactionModel.Intent": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name to identify the intent.",
          "minLength": 1
        },
        "generatedBy": {
          "type": "string",
          "description": "Name of the generator used to generate this object.",
          "minLength": 1,
          "maxLength": 100
        },
        "slots": {
          "type": "array",
          "description": "List of slots within the intent.",
          "items": {
            "$ref": "#/definitions/v1.skill.interactionModel.SlotDefinition"
          }
        },
        "samples": {
          "type": "array",
          "description": "Phrases the user can speak e.g. to trigger an intent or provide value for a slot elicitation.",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "The set of intents your service can accept and process."
    },
    "v1.skill.interactionModel.SlotDefinition": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the slot.",
          "minLength": 1
        },
        "type": {
          "type": "string",
          "description": "The type of the slot. It can be a built-in or custom type."
        },
        "generatedBy": {
          "type": "string",
          "description": "Name of the generator used to generate this object.",
          "minLength": 1,
          "maxLength": 100
        },
        "multipleValues": {
          "description": "Configuration object for multiple values capturing behavior for this slot.",
          "$ref": "#/definitions/v1.skill.interactionModel.MultipleValuesConfig"
        },
        "samples": {
          "type": "array",
          "description": "Phrases the user can speak e.g. to trigger an intent or provide value for a slot elicitation.",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Slot definition."
    },
    "v1.skill.interactionModel.MultipleValuesConfig": {
      "type": "object",
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Boolean that indicates whether this slot can capture multiple values."
        }
      },
      "description": "Configuration object for multiple values capturing behavior for this slot."
    },
    "v1.skill.interactionModel.Dialog": {
      "type": "object",
      "required": [
        "intents"
      ],
      "properties": {
        "delegationStrategy": {
          "description": "Defines a delegation strategy for the dialogs in this dialog model.",
          "$ref": "#/definitions/v1.skill.interactionModel.DelegationStrategyType",
          "x-isEnum": true
        },
        "intents": {
          "type": "array",
          "description": "List of intents that have dialog rules associated with them. Dialogs can also span multiple intents.",
          "items": {
            "$ref": "#/definitions/v1.skill.interactionModel.DialogIntents"
          },
          "minItems": 1
        }
      },
      "description": "Defines dialog rules e.g. slot elicitation and validation, intent chaining etc."
    },
    "v1.skill.interactionModel.DialogIntents": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the intent that has a dialog specification.",
          "minLength": 1
        },
        "delegationStrategy": {
          "description": "Defines an intent-specific delegation strategy for this dialog intent. Overrides dialog-level setting.",
          "$ref": "#/definitions/v1.skill.interactionModel.DelegationStrategyType",
          "x-isEnum": true
        },
        "slots": {
          "type": "array",
          "description": "List of slots that have dialog rules.",
          "items": {
            "$ref": "#/definitions/v1.skill.interactionModel.DialogSlotItems"
          }
        },
        "confirmationRequired": {
          "type": "boolean",
          "description": "Describes whether confirmation of the intent is required."
        },
        "prompts": {
          "$ref": "#/definitions/v1.skill.interactionModel.DialogIntentsPrompts"
        }
      }
    },
    "v1.skill.interactionModel.DelegationStrategyType": {
      "type": "string",
      "description": "Enumerates delegation strategies used to control automatic dialog management through the defined dialog model. When no delegation strategies are defined, the value SKILL_RESPONSE is assumed.\n",
      "enum": [
        "ALWAYS",
        "SKILL_RESPONSE"
      ]
    },
    "v1.skill.interactionModel.DialogSlotItems": {
      "type": "object",
      "required": [
        "name",
        "prompts",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the slot that has dialog rules associated with it.",
          "minLength": 1
        },
        "type": {
          "type": "string",
          "description": "Type of the slot in the dialog intent.",
          "minLength": 1
        },
        "elicitationRequired": {
          "type": "boolean",
          "description": "Describes whether elicitation of the slot is required."
        },
        "confirmationRequired": {
          "type": "boolean",
          "description": "Describes whether confirmation of the slot is required."
        },
        "prompts": {
          "$ref": "#/definitions/v1.skill.interactionModel.DialogPrompts"
        },
        "validations": {
          "type": "array",
          "description": "List of validations for the slot. if validation fails, user will be prompted with the provided prompt.",
          "items": {
            "$ref": "#/definitions/v1.skill.interactionModel.SlotValidation"
          }
        }
      }
    },
    "v1.skill.interactionModel.DialogPrompts": {
      "type": "object",
      "properties": {
        "elicitation": {
          "type": "string",
          "description": "Reference to a prompt-id to use If this slot value is missing."
        },
        "confirmation": {
          "type": "string",
          "description": "Reference to a prompt-id to use to confirm the slots value."
        }
      },
      "description": "Dialog prompts associated with this slot i.e. for elicitation and/or confirmation."
    },
    "v1.skill.interactionModel.SlotValidation": {
      "type": "object",
      "required": [
        "prompt",
        "type"
      ],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "description": "The exact type of validation e.g. isLessThan,isGreaterThan etc.",
          "x-isDiscriminator": true
        },
        "prompt": {
          "type": "string",
          "description": "The prompt id that should be used if validation fails.",
          "minLength": 1
        }
      },
      "description": "Validation on a slot with support for prompt and confirmation."
    },
    "v1.skill.interactionModel.DialogIntentsPrompts": {
      "type": "object",
      "properties": {
        "elicitation": {
          "type": "string",
          "description": "Enum value in the dialog_slots map to reference the elicitation prompt id."
        },
        "confirmation": {
          "type": "string",
          "description": "Enum value in the dialog_slots map to reference the confirmation prompt id."
        }
      },
      "description": "Collection of prompts for this intent."
    },
    "v1.skill.interactionModel.IsGreaterThan": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.interactionModel.SlotValidation"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "type": "string",
              "description": "Value to compare to.",
              "minLength": 1
            }
          }
        }
      ],
      "description": "Validates that slot value is greater than the specified value.",
      "x-discriminator-value": "isGreaterThan"
    },
    "v1.skill.interactionModel.IsGreaterThanOrEqualTo": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.interactionModel.SlotValidation"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "type": "string",
              "description": "Value to compare to.",
              "minLength": 1
            }
          }
        }
      ],
      "description": "Validates that slot value is greater than or equals to the specified value.",
      "x-discriminator-value": "isGreaterThanOrEqualTo"
    },
    "v1.skill.interactionModel.IsLessThan": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.interactionModel.SlotValidation"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "type": "string",
              "description": "Value to compare to.",
              "minLength": 1
            }
          }
        }
      ],
      "description": "Validates that slot value is less than or equals to the specified value.",
      "x-discriminator-value": "isLessThan"
    },
    "v1.skill.interactionModel.IsLessThanOrEqualTo": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.interactionModel.SlotValidation"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "type": "string",
              "description": "Value to compare to.",
              "minLength": 1
            }
          }
        }
      ],
      "description": "Validates that slot value is less than or equals to the specified value.",
      "x-discriminator-value": "isLessThanOrEqualTo"
    },
    "v1.skill.interactionModel.IsInSet": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.interactionModel.SlotValidation"
        },
        {
          "type": "object",
          "required": [
            "values"
          ],
          "properties": {
            "values": {
              "type": "array",
              "description": "List of values to check.",
              "items": {
                "type": "string"
              },
              "minItems": 1
            }
          }
        }
      ],
      "description": "Validates if the slot is in the specified set of values.",
      "x-discriminator-value": "isInSet"
    },
    "v1.skill.interactionModel.IsNotInSet": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.interactionModel.SlotValidation"
        },
        {
          "type": "object",
          "required": [
            "values"
          ],
          "properties": {
            "values": {
              "type": "array",
              "description": "List of values to check.",
              "items": {
                "type": "string"
              },
              "minItems": 1
            }
          }
        }
      ],
      "description": "Validates if the slot is not in the specified set of values.",
      "x-discriminator-value": "isNotInSet"
    },
    "v1.skill.interactionModel.HasEntityResolutionMatch": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.interactionModel.SlotValidation"
        }
      ],
      "description": "The hasEntityResolutionMatch would allow Alexa to trigger a re-prompt when the status produced by ER is \"ER_SUCCESS_NO_MATCH\".",
      "x-discriminator-value": "hasEntityResolutionMatch"
    },
    "v1.skill.interactionModel.IsInDuration": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.interactionModel.SlotValidation"
        },
        {
          "type": "object",
          "properties": {
            "start": {
              "type": "string",
              "description": "* `AMAZON.DATE`: ISO 8601 Duration using Y, M or D components or ISO 8601 Calendar Date in YYYY-MM-DD format.\n* `AMAZON.TIME`: ISO 8601 Duration using H or M component or ISO 8601 24-Hour Clock Time in hh:mm format.\n"
            },
            "end": {
              "type": "string",
              "description": "* `AMAZON.DATE`: ISO 8601 Duration using Y, M or D components or ISO 8601 Calendar Date in YYYY-MM-DD format.\n* `AMAZON.TIME`: ISO 8601 Duration using H or M component or ISO 8601 24-Hour Clock Time in hh:mm format.\n"
            }
          }
        }
      ],
      "description": "Validates that the given date or time (as a slot value) is in a given interval. Unlike other range validations, duration based validations lets the developer define a dynamic range of date or time using ISO_8601 Duration Format. Based on the given 'start' and 'end' parameters an interval is created. The slot value given by the skill's user at runtime is then validated inside this interval.\nBoth 'start' and 'end' parameters are in reference to the current date/time. Here the current date/time refers to the date/time when the skill's user made the request.\n",
      "x-discriminator-value": "isInDuration"
    },
    "v1.skill.interactionModel.IsNotInDuration": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.interactionModel.SlotValidation"
        },
        {
          "type": "object",
          "properties": {
            "start": {
              "type": "string",
              "description": "* `AMAZON.DATE`: ISO 8601 Duration using Y, M or D components or ISO 8601 Calendar Date in YYYY-MM-DD format.\n* `AMAZON.TIME`: ISO 8601 Duration using H or M component or ISO 8601 24-Hour Clock Time in hh:mm format.\n"
            },
            "end": {
              "type": "string",
              "description": "* `AMAZON.DATE`: ISO 8601 Duration using Y, M or D components or ISO 8601 Calendar Date in YYYY-MM-DD format.\n* `AMAZON.TIME`: ISO 8601 Duration using H or M component or ISO 8601 24-Hour Clock Time in hh:mm format.\n"
            }
          }
        }
      ],
      "description": "Validates that the given date or time (as a slot value) is not in a given interval. Unlike other range validations, duration based validations lets the developer define a dynamic range of date or time using ISO_8601 Duration Format. Based on the given 'start' and 'end' parameters an interval is created. The slot value given by the skill's user at runtime is then validated inside this interval.\nBoth 'start' and 'end' parameters are in reference to the current date/time. Here the current date/time refers to the date/time when the skill's user made the request.\n",
      "x-discriminator-value": "isNotInDuration"
    },
    "v1.skill.interactionModel.Prompt": {
      "type": "object",
      "required": [
        "id",
        "variations"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The prompt id, this id can be used from dialog definitions.",
          "minLength": 1
        },
        "variations": {
          "type": "array",
          "description": "List of variations of the prompt, each variation can be either a text string or a well defined ssml string depending on the type defined.",
          "items": {
            "$ref": "#/definitions/v1.skill.interactionModel.PromptItems"
          },
          "minItems": 1
        }
      }
    },
    "v1.skill.interactionModel.PromptItems": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "type": {
          "$ref": "#/definitions/v1.skill.interactionModel.PromptItemsType",
          "x-isEnum": true
        },
        "value": {
          "type": "string",
          "description": "Specifies the prompt.",
          "minLength": 1
        }
      }
    },
    "v1.skill.interactionModel.PromptItemsType": {
      "type": "string",
      "description": "Prompt can be specified in different formats e.g. text, ssml.",
      "enum": [
        "SSML",
        "PlainText"
      ]
    },
    "v1.skill.interactionModel.catalog.UpdateRequest": {
      "type": "object",
      "required": [
        "description",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The catalog name."
        },
        "description": {
          "type": "string",
          "description": "The catalog description with a 255 character maximum."
        }
      },
      "description": "Catalog update request object."
    },
    "v1.skill.interactionModel.catalog.DefinitionData": {
      "type": "object",
      "required": [
        "catalog",
        "vendorId"
      ],
      "properties": {
        "catalog": {
          "$ref": "#/definitions/v1.skill.interactionModel.catalog.CatalogInput"
        },
        "vendorId": {
          "type": "string",
          "description": "The vendorId that the catalog should belong to."
        }
      },
      "description": "Catalog request definitions."
    },
    "v1.skill.interactionModel.catalog.CatalogInput": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the catalog."
        },
        "description": {
          "type": "string",
          "description": "Description string about the catalog."
        }
      },
      "description": "Definition for catalog input."
    },
    "v1.skill.interactionModel.catalog.CatalogEntity": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the catalog."
        },
        "description": {
          "type": "string",
          "description": "Description string about the catalog."
        }
      },
      "description": "Definition for catalog entity."
    },
    "v1.skill.interactionModel.catalog.CatalogItem": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the catalog."
        },
        "description": {
          "type": "string",
          "description": "Description string about the catalog."
        },
        "catalogId": {
          "type": "string",
          "description": "Identifier of the catalog, optional in get response as the request already has catalogId."
        },
        "_links": {
          "$ref": "#/definitions/v1.Links"
        }
      },
      "description": "Definition for catalog entity."
    },
    "v1.skill.interactionModel.catalog.ListCatalogResponse": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/v1.Links"
        },
        "catalogs": {
          "type": "array",
          "description": "List of catalogs.\n",
          "items": {
            "$ref": "#/definitions/v1.skill.interactionModel.catalog.CatalogItem"
          }
        },
        "isTruncated": {
          "type": "boolean"
        },
        "nextToken": {
          "type": "string"
        },
        "totalCount": {
          "type": "integer"
        }
      },
      "description": "List of catalog versions of a skill for the vendor."
    },
    "v1.skill.interactionModel.catalog.CatalogStatus": {
      "type": "object",
      "properties": {
        "lastUpdateRequest": {
          "$ref": "#/definitions/v1.skill.interactionModel.catalog.LastUpdateRequest"
        }
      },
      "description": "Defines the structure for catalog status response."
    },
    "v1.skill.interactionModel.catalog.LastUpdateRequest": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1.skill.interactionModel.catalog.CatalogStatusType",
          "x-isEnum": true
        },
        "version": {
          "type": "string",
          "description": "The version id of the entity returned."
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.StandardizedError"
          }
        }
      },
      "description": "Contains attributes related to last modification request of a resource."
    },
    "v1.skill.interactionModel.catalog.CatalogStatusType": {
      "type": "string",
      "description": "Status of last modification request for a resource.",
      "enum": [
        "FAILED",
        "IN_PROGRESS",
        "SUCCEEDED"
      ]
    },
    "v1.skill.interactionModel.catalog.CatalogResponse": {
      "type": "object",
      "properties": {
        "catalogId": {
          "type": "string",
          "description": "ID of the catalog created."
        }
      },
      "description": "CatalogId information."
    },
    "v1.skill.interactionModel.catalog.CatalogDefinitionOutput": {
      "type": "object",
      "properties": {
        "catalog": {
          "$ref": "#/definitions/v1.skill.interactionModel.catalog.CatalogEntity"
        },
        "creationTime": {
          "type": "string",
          "description": "Time of the catalog definition creation."
        },
        "totalVersions": {
          "type": "string",
          "description": "Total number of versions."
        }
      },
      "description": "Catalog request definitions."
    },
    "v1.skill.interactionModel.conflictDetection.GetConflictDetectionJobStatusResponse": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "$ref": "#/definitions/v1.skill.interactionModel.conflictDetection.ConflictDetectionJobStatus",
          "x-isEnum": true
        },
        "totalConflicts": {
          "type": "number",
          "format": "long",
          "description": "The total number of conflicts within skill model."
        }
      }
    },
    "v1.skill.interactionModel.conflictDetection.ConflictDetectionJobStatus": {
      "type": "string",
      "description": "The status of conflict detection job.",
      "enum": [
        "IN_PROGRESS",
        "COMPLETED",
        "FAILED"
      ]
    },
    "v1.skill.interactionModel.conflictDetection.GetConflictsResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.interactionModel.conflictDetection.PagedResponse"
        },
        {
          "type": "object",
          "required": [
            "results"
          ],
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1.skill.interactionModel.conflictDetection.GetConflictsResponseResult"
              }
            }
          }
        }
      ]
    },
    "v1.skill.interactionModel.conflictDetection.GetConflictsResponseResult": {
      "type": "object",
      "required": [
        "conflictingUtterance",
        "conflicts"
      ],
      "properties": {
        "conflictingUtterance": {
          "type": "string",
          "description": "Utterance resolved from sample utterance that causes conflicts among different intents."
        },
        "conflicts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.interactionModel.conflictDetection.ConflictResult"
          }
        }
      }
    },
    "v1.skill.interactionModel.conflictDetection.ConflictResult": {
      "type": "object",
      "required": [
        "intent",
        "sampleUtterance"
      ],
      "properties": {
        "sampleUtterance": {
          "type": "string",
          "description": "Sample utterance provided by 3P developers for intents."
        },
        "intent": {
          "$ref": "#/definitions/v1.skill.interactionModel.conflictDetection.ConflictIntent"
        }
      }
    },
    "v1.skill.interactionModel.conflictDetection.ConflictIntent": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Conflict intent name"
        },
        "slots": {
          "type": "object",
          "description": "List of conflict intent slots",
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.interactionModel.conflictDetection.ConflictIntentSlot"
          }
        }
      }
    },
    "v1.skill.interactionModel.conflictDetection.ConflictIntentSlot": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1.skill.interactionModel.conflictDetection.PagedResponse": {
      "type": "object",
      "properties": {
        "paginationContext": {
          "$ref": "#/definitions/v1.skill.interactionModel.conflictDetection.PaginationContext"
        },
        "_links": {
          "$ref": "#/definitions/v1.Links"
        }
      }
    },
    "v1.skill.interactionModel.conflictDetection.PaginationContext": {
      "type": "object",
      "properties": {
        "nextToken": {
          "type": "string",
          "description": "A token returned if there are more results for the given inputs than `maxResults` from the request. It should also be used in the next request to retrieve more results."
        },
        "totalCount": {
          "type": "integer",
          "format": "int64",
          "description": "Total avaliable results for the given query."
        }
      }
    },
    "v1.skill.interactionModel.version.catalogUpdate": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "The catalog description with a 255 character maximum."
        }
      },
      "description": "Catalog update description object."
    },
    "v1.skill.interactionModel.version.VersionData": {
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "source": {
          "$ref": "#/definitions/v1.skill.interactionModel.version.InputSource"
        },
        "description": {
          "type": "string",
          "description": "Description string for specific catalog version."
        }
      },
      "description": "Catalog version specific data."
    },
    "v1.skill.interactionModel.version.InputSource": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of catalog."
        },
        "url": {
          "type": "string",
          "description": "Url to the catalog reference."
        }
      },
      "description": "Definition for catalog version input data."
    },
    "v1.skill.interactionModel.version.CatalogVersionData": {
      "type": "object",
      "properties": {
        "source": {
          "$ref": "#/definitions/v1.skill.interactionModel.version.InputSource"
        },
        "description": {
          "type": "string",
          "description": "Description string for specific catalog version."
        },
        "version": {
          "type": "string",
          "description": "Specific catalog version."
        }
      },
      "description": "Catalog version data with metadata."
    },
    "v1.skill.interactionModel.version.CatalogValues": {
      "type": "object",
      "properties": {
        "isTruncated": {
          "type": "boolean"
        },
        "nextToken": {
          "type": "string"
        },
        "totalCount": {
          "type": "integer",
          "description": "Total number of catalog values."
        },
        "_links": {
          "$ref": "#/definitions/v1.Links"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.interactionModel.version.ValueSchema"
          }
        }
      },
      "description": "List of catalog values."
    },
    "v1.skill.interactionModel.version.ValueSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/v1.skill.interactionModel.version.ValueSchemaName"
        }
      },
      "description": "The value schema in type object of interaction model."
    },
    "v1.skill.interactionModel.version.ValueSchemaName": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "synonyms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1.skill.interactionModel.version.ListResponse": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/v1.Links"
        },
        "skillModelVersions": {
          "type": "array",
          "description": "List of interaction model versions.\n",
          "items": {
            "$ref": "#/definitions/v1.skill.interactionModel.version.VersionItems"
          }
        },
        "isTruncated": {
          "type": "boolean"
        },
        "nextToken": {
          "type": "string"
        }
      },
      "description": "List of interactionModel versions of a skill for the vendor"
    },
    "v1.skill.interactionModel.version.VersionItems": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "creationTime": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "_links": {
          "$ref": "#/definitions/v1.skill.interactionModel.version.Links"
        }
      },
      "description": "Version metadata about the entity."
    },
    "v1.skill.interactionModel.version.Links": {
      "type": "object",
      "properties": {
        "self": {
          "$ref": "#/definitions/v1.Link"
        }
      }
    },
    "v1.skill.interactionModel.version.CatalogEntityVersion": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "creationTime": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "_links": {
          "$ref": "#/definitions/v1.skill.interactionModel.version.Links"
        }
      },
      "description": "Version metadata about the catalog entity version."
    },
    "v1.skill.interactionModel.version.ListCatalogEntityVersionsResponse": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/v1.skill.interactionModel.version.Links"
        },
        "catalogVersions": {
          "type": "array",
          "description": "List of catalog entity versions.\n",
          "items": {
            "$ref": "#/definitions/v1.skill.interactionModel.version.CatalogEntityVersion"
          }
        },
        "isTruncated": {
          "type": "boolean"
        },
        "nextToken": {
          "type": "string"
        },
        "totalCount": {
          "type": "integer"
        }
      },
      "description": "List of catalog versions of a catalog for the vendor in sortDirection order, descending as default."
    },
    "v1.skill.interactionModel.type.UpdateRequest": {
      "type": "object",
      "properties": {
        "slotType": {
          "$ref": "#/definitions/v1.skill.interactionModel.type.SlotTypeUpdateDefinition"
        }
      },
      "description": "Slot type update request object."
    },
    "v1.skill.interactionModel.type.SlotTypeUpdateDefinition": {
      "type": "object",
      "required": [
        "description"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "The slot type description with a 255 character maximum."
        }
      },
      "description": "Slot type update definition object."
    },
    "v1.skill.interactionModel.type.DefinitionData": {
      "type": "object",
      "properties": {
        "slotType": {
          "$ref": "#/definitions/v1.skill.interactionModel.type.SlotTypeInput"
        },
        "vendorId": {
          "type": "string",
          "description": "The vendorId that the slot type should belong to."
        }
      },
      "description": "Slot type request definitions."
    },
    "v1.skill.interactionModel.type.SlotTypeInput": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the slot type."
        },
        "description": {
          "type": "string",
          "description": "Description string about the slot type."
        }
      },
      "description": "Definition for slot type input."
    },
    "v1.skill.interactionModel.type.SlotTypeItem": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the slot type."
        },
        "description": {
          "type": "string",
          "description": "Description string about the slot type."
        },
        "id": {
          "type": "string",
          "description": "Identifier of the slot type, optional in get response as the request already has slotTypeId."
        },
        "_links": {
          "$ref": "#/definitions/v1.Links"
        }
      },
      "description": "Definition for slot type entity."
    },
    "v1.skill.interactionModel.type.ListSlotTypeResponse": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/v1.Links"
        },
        "slotTypes": {
          "type": "array",
          "description": "List of slot types.\n",
          "items": {
            "$ref": "#/definitions/v1.skill.interactionModel.type.SlotTypeItem"
          }
        },
        "nextToken": {
          "type": "string"
        }
      },
      "description": "List of slot types of a skill for the vendor."
    },
    "v1.skill.interactionModel.type.SlotTypeStatus": {
      "type": "object",
      "properties": {
        "updateRequest": {
          "$ref": "#/definitions/v1.skill.interactionModel.type.LastUpdateRequest"
        }
      },
      "description": "Defines the structure for slot type status response."
    },
    "v1.skill.interactionModel.type.LastUpdateRequest": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1.skill.interactionModel.type.SlotTypeStatusType",
          "x-isEnum": true
        },
        "version": {
          "type": "string",
          "description": "The version id of the entity returned."
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.interactionModel.type.Error"
          }
        },
        "warnings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.interactionModel.type.Warning"
          }
        }
      },
      "description": "Contains attributes related to last modification request of a resource."
    },
    "v1.skill.interactionModel.type.SlotTypeStatusType": {
      "type": "string",
      "description": "Status of last modification request for a resource.",
      "enum": [
        "FAILED",
        "IN_PROGRESS",
        "SUCCEEDED"
      ]
    },
    "v1.skill.interactionModel.type.SlotTypeResponse": {
      "type": "object",
      "properties": {
        "slotType": {
          "$ref": "#/definitions/v1.skill.interactionModel.type.SlotTypeResponseEntity"
        }
      },
      "description": "Slot Type information."
    },
    "v1.skill.interactionModel.type.SlotTypeResponseEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the slot type created."
        }
      },
      "description": "SlotTypeId information."
    },
    "v1.skill.interactionModel.type.SlotTypeDefinitionOutput": {
      "type": "object",
      "properties": {
        "slotType": {
          "$ref": "#/definitions/v1.skill.interactionModel.type.SlotTypeInput"
        },
        "totalVersions": {
          "type": "string",
          "description": "Total number of versions."
        }
      },
      "description": "Slot Type request definitions."
    },
    "v1.skill.interactionModel.type.Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "The error code."
        },
        "message": {
          "type": "string",
          "description": "The error message."
        }
      },
      "description": "The error which would fail requests."
    },
    "v1.skill.interactionModel.type.Warning": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "The warning code."
        },
        "message": {
          "type": "string",
          "description": "The warning message."
        }
      },
      "description": "The warning which would not fail requests."
    },
    "v1.skill.interactionModel.typeVersion.slotTypeUpdate": {
      "type": "object",
      "properties": {
        "slotType": {
          "$ref": "#/definitions/v1.skill.interactionModel.typeVersion.slotTypeUpdateObject"
        }
      },
      "description": "Slot Type update description wrapper."
    },
    "v1.skill.interactionModel.typeVersion.slotTypeUpdateObject": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "The slot type description with a 255 character maximum."
        }
      },
      "description": "Slot Type update description object."
    },
    "v1.skill.interactionModel.typeVersion.VersionData": {
      "type": "object",
      "properties": {
        "slotType": {
          "$ref": "#/definitions/v1.skill.interactionModel.typeVersion.VersionDataObject"
        }
      },
      "description": "Slot Type version specific data."
    },
    "v1.skill.interactionModel.typeVersion.VersionDataObject": {
      "type": "object",
      "properties": {
        "definition": {
          "$ref": "#/definitions/v1.skill.interactionModel.typeVersion.ValueSupplierObject"
        },
        "description": {
          "type": "string",
          "description": "Description string for specific slot type version."
        }
      },
      "description": "Slot Type version fields with specific data."
    },
    "v1.skill.interactionModel.typeVersion.SlotTypeVersionData": {
      "type": "object",
      "properties": {
        "slotType": {
          "$ref": "#/definitions/v1.skill.interactionModel.typeVersion.SlotTypeVersionDataObject"
        }
      },
      "description": "Slot Type version data with metadata."
    },
    "v1.skill.interactionModel.typeVersion.SlotTypeVersionDataObject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Slot type id associated with the slot type version."
        },
        "definition": {
          "$ref": "#/definitions/v1.skill.interactionModel.typeVersion.ValueSupplierObject"
        },
        "description": {
          "type": "string",
          "description": "Description string for specific slot type version."
        },
        "version": {
          "type": "string",
          "description": "Specific slot type version."
        }
      },
      "description": "Slot Type version fields with metadata."
    },
    "v1.skill.interactionModel.typeVersion.ValueSupplierObject": {
      "type": "object",
      "properties": {
        "valueSupplier": {
          "$ref": "#/definitions/v1.skill.interactionModel.ValueSupplier"
        }
      },
      "description": "Value supplier object for slot definition."
    },
    "v1.skill.interactionModel.typeVersion.SlotTypeVersionItem": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "description": "Version number of slot type."
        },
        "description": {
          "type": "string",
          "description": "Description string about the slot type version."
        },
        "_links": {
          "$ref": "#/definitions/v1.Links"
        }
      },
      "description": "Definition for slot type entity."
    },
    "v1.skill.interactionModel.typeVersion.ListSlotTypeVersionResponse": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/v1.Links"
        },
        "slotTypeVersions": {
          "type": "array",
          "description": "List of slot types.\n",
          "items": {
            "$ref": "#/definitions/v1.skill.interactionModel.typeVersion.SlotTypeVersionItem"
          }
        },
        "nextToken": {
          "type": "string"
        }
      },
      "description": "List of slot type versions of a skill for the vendor."
    },
    "v1.skill.interactionModel.jobs.JobDefinition": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "description": "Polymorphic type of the job",
          "x-isDiscriminator": true
        },
        "trigger": {
          "$ref": "#/definitions/v1.skill.interactionModel.jobs.Trigger"
        },
        "status": {
          "type": "string",
          "description": "Current status of the job definition."
        }
      },
      "description": "Definition for dynamic job."
    },
    "v1.skill.interactionModel.jobs.CatalogAutoRefresh": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.interactionModel.jobs.JobDefinition"
        },
        {
          "type": "object",
          "properties": {
            "trigger": {
              "description": "CatalogAutoRefresh can only have CatalogAutoRefresh trigger.",
              "$ref": "#/definitions/v1.skill.interactionModel.jobs.Scheduled"
            },
            "resource": {
              "description": "The resource that the job is act on. Only catalog is allowed.",
              "$ref": "#/definitions/v1.skill.interactionModel.jobs.Catalog"
            }
          }
        }
      ],
      "description": "Definition for CatalogAutoRefresh job.",
      "x-discriminator-value": "CatalogAutoRefresh"
    },
    "v1.skill.interactionModel.jobs.ReferenceVersionUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.interactionModel.jobs.JobDefinition"
        },
        {
          "type": "object",
          "properties": {
            "trigger": {
              "description": "Can only have ReferencedResourceJobsComplete trigger.",
              "$ref": "#/definitions/v1.skill.interactionModel.jobs.ReferencedResourceJobsComplete"
            },
            "resource": {
              "description": "The resource that the job is act on. Only slot and interactionModel are allowed.",
              "$ref": "#/definitions/v1.skill.interactionModel.jobs.ResourceObject"
            },
            "references": {
              "type": "array",
              "description": "Referenced resources working with ReferencedResourceJobsComplete trigger.",
              "items": {
                "$ref": "#/definitions/v1.skill.interactionModel.jobs.ResourceObject"
              }
            },
            "publishToLive": {
              "type": "boolean",
              "description": "Whether publish development stage to live after the updates."
            }
          }
        }
      ],
      "description": "Definition for ReferenceVersionUpdate job.",
      "x-discriminator-value": "ReferenceVersionUpdate"
    },
    "v1.skill.interactionModel.jobs.ResourceObject": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "description": "Polymorphic type of the ResourceObject.",
          "x-isDiscriminator": true
        }
      },
      "description": "Resource object where the job is applied on."
    },
    "v1.skill.interactionModel.jobs.Catalog": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.interactionModel.jobs.ResourceObject"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Catalog identifier."
            }
          }
        }
      ],
      "description": "Catalog the job is applied on.",
      "x-discriminator-value": "Catalog"
    },
    "v1.skill.interactionModel.jobs.SlotTypeReference": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.interactionModel.jobs.ResourceObject"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "SlotTypeReference identifier."
            }
          }
        }
      ],
      "description": "Slot type reference the job is applied on.",
      "x-discriminator-value": "SlotTypeReference"
    },
    "v1.skill.interactionModel.jobs.InteractionModel": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.interactionModel.jobs.ResourceObject"
        },
        {
          "type": "object",
          "required": [
            "id",
            "locales"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Skill identifier."
            },
            "locales": {
              "type": "array",
              "description": "Locale identifier and default is empty list which means all available locales.",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "description": "Interaction model the job is applied on.",
      "x-discriminator-value": "InteractionModel"
    },
    "v1.skill.interactionModel.jobs.Trigger": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "description": "Polymorphic type of the trigger",
          "x-isDiscriminator": true
        }
      },
      "description": "Condition when jobs will be executed."
    },
    "v1.skill.interactionModel.jobs.Scheduled": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.interactionModel.jobs.Trigger"
        },
        {
          "type": "object",
          "required": [
            "hour"
          ],
          "properties": {
            "hour": {
              "type": "integer",
              "description": "The cron-like attribute in UTC time to describe the hour of the day and currently can only be 0,4,8,12,16,20."
            },
            "dayOfWeek": {
              "type": "integer",
              "description": "If not null, this means the scheudule is weekly. the cron-like attribute in UTC time to describe the day of the week (0-6)."
            }
          }
        }
      ],
      "description": "Time-based condition when jobs will be executed.",
      "x-discriminator-value": "Scheduled"
    },
    "v1.skill.interactionModel.jobs.ReferencedResourceJobsComplete": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.interactionModel.jobs.Trigger"
        },
        {
          "type": "object"
        }
      ],
      "description": "Dependent job condition when jobs will be executed.",
      "x-discriminator-value": "ReferencedResourceJobsComplete"
    },
    "v1.skill.interactionModel.jobs.Execution": {
      "type": "object",
      "properties": {
        "executionId": {
          "type": "string",
          "description": "Identifier of the execution."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "example": "2020-10-25T20:00:02.135Z",
          "description": "ISO date-time timestamp when the execution starts."
        },
        "errorCode": {
          "type": "string",
          "description": "ErrorCode to explain what went wrong in case of FAILUREs."
        },
        "status": {
          "type": "string",
          "description": "Current status of the job execution."
        },
        "errorDetails": {
          "$ref": "#/definitions/v1.skill.interactionModel.jobs.JobErrorDetails"
        }
      },
      "description": "Execution data."
    },
    "v1.skill.interactionModel.jobs.JobErrorDetails": {
      "type": "object",
      "properties": {
        "executionMetadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.interactionModel.jobs.ExecutionMetadata"
          }
        }
      },
      "description": "Optional details if the execution is depending on other executions."
    },
    "v1.skill.interactionModel.jobs.JobDefinitionMetadata": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Job identifier."
        },
        "type": {
          "type": "string",
          "description": "Polymorphic type of the job."
        },
        "status": {
          "$ref": "#/definitions/v1.skill.interactionModel.jobs.JobDefinitionStatus",
          "x-isEnum": true
        }
      },
      "description": "Metadata of the job definition."
    },
    "v1.skill.interactionModel.jobs.ExecutionMetadata": {
      "type": "object",
      "properties": {
        "jobId": {
          "type": "string",
          "description": "Identifier of the job."
        },
        "errorCode": {
          "type": "string",
          "description": "ErrorCode to explain what went wrong in case of FAILUREs."
        },
        "status": {
          "type": "string",
          "description": "Current status of the job execution."
        }
      },
      "description": "ExecutionMetadata for executions."
    },
    "v1.skill.interactionModel.jobs.ListJobDefinitionsResponse": {
      "type": "object",
      "properties": {
        "paginationContext": {
          "$ref": "#/definitions/v1.skill.interactionModel.jobs.JobAPIPaginationContext"
        },
        "_links": {
          "$ref": "#/definitions/v1.Links"
        },
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.interactionModel.jobs.JobDefinitionMetadata"
          }
        }
      },
      "description": "The response of list job definitions."
    },
    "v1.skill.interactionModel.jobs.CreateJobDefinitionRequest": {
      "type": "object",
      "properties": {
        "vendorId": {
          "type": "string",
          "description": "ID of the vendor owning the skill."
        },
        "jobDefinition": {
          "$ref": "#/definitions/v1.skill.interactionModel.jobs.JobDefinition"
        }
      },
      "description": "Request to create job definitions."
    },
    "v1.skill.interactionModel.jobs.CreateJobDefinitionResponse": {
      "type": "object",
      "properties": {
        "jobId": {
          "type": "string",
          "description": "Idenitifier of the job definition."
        }
      },
      "description": "The response of create job definition."
    },
    "v1.skill.interactionModel.jobs.GetExecutionsResponse": {
      "type": "object",
      "properties": {
        "paginationContext": {
          "$ref": "#/definitions/v1.skill.interactionModel.jobs.JobAPIPaginationContext"
        },
        "_links": {
          "$ref": "#/definitions/v1.Links"
        },
        "executions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.interactionModel.jobs.Execution"
          }
        }
      },
      "description": "The response of get execution history."
    },
    "v1.skill.interactionModel.jobs.UpdateJobStatusRequest": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "$ref": "#/definitions/v1.skill.interactionModel.jobs.JobDefinitionStatus",
          "x-isEnum": true
        }
      },
      "description": "Update job status."
    },
    "v1.skill.interactionModel.jobs.JobAPIPaginationContext": {
      "type": "object",
      "properties": {
        "nextToken": {
          "type": "string"
        }
      }
    },
    "v1.skill.interactionModel.jobs.ValidationErrors": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "description": "The list of errors.",
          "items": {
            "$ref": "#/definitions/v1.skill.interactionModel.jobs.DynamicUpdateError"
          }
        }
      },
      "description": "The list of errors."
    },
    "v1.skill.interactionModel.jobs.DynamicUpdateError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Dynamic update error code."
        },
        "message": {
          "type": "string",
          "description": "Readable description of error."
        }
      },
      "description": "Error schema for dynamic update."
    },
    "v1.skill.interactionModel.jobs.JobDefinitionStatus": {
      "type": "string",
      "description": "Current status of the job definition.",
      "enum": [
        "DISABLED",
        "ENALBED"
      ]
    },
    "v1.skill.invocations.InvokeSkillRequest": {
      "type": "object",
      "required": [
        "endpointRegion",
        "skillRequest"
      ],
      "properties": {
        "endpointRegion": {
          "$ref": "#/definitions/v1.skill.invocations.EndPointRegions",
          "x-isEnum": true
        },
        "skillRequest": {
          "$ref": "#/definitions/v1.skill.invocations.SkillRequest"
        }
      }
    },
    "v1.skill.invocations.EndPointRegions": {
      "type": "string",
      "description": "Region of endpoint to be called.",
      "enum": [
        "NA",
        "EU",
        "FE"
      ]
    },
    "v1.skill.invocations.SkillRequest": {
      "type": "object",
      "required": [
        "body"
      ],
      "properties": {
        "body": {
          "type": "object",
          "description": "ASK request body schema as defined in the public facing documentation (https://developer.amazon.com/en-US/docs/alexa/custom-skills/request-and-response-json-reference.html#request-body-syntax)\n",
          "properties": {}
        }
      }
    },
    "v1.skill.invocations.InvokeSkillResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1.skill.invocations.InvocationResponseStatus",
          "x-isEnum": true
        },
        "result": {
          "$ref": "#/definitions/v1.skill.invocations.InvocationResponseResult"
        }
      }
    },
    "v1.skill.invocations.InvocationResponseStatus": {
      "type": "string",
      "description": "String that specifies the status of skill invocation. Possible values are \"SUCCEEDED\", and \"FAILED\".\n",
      "enum": [
        "SUCCEEDED",
        "FAILED"
      ]
    },
    "v1.skill.invocations.InvocationResponseResult": {
      "type": "object",
      "properties": {
        "skillExecutionInfo": {
          "$ref": "#/definitions/v1.skill.invocations.SkillExecutionInfo"
        },
        "error": {
          "$ref": "#/definitions/v1.skill.StandardizedError"
        }
      }
    },
    "v1.skill.invocations.SkillExecutionInfo": {
      "type": "object",
      "properties": {
        "invocationRequest": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.invocations.Request"
          }
        },
        "invocationResponse": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.invocations.Response"
          }
        },
        "metrics": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.invocations.Metrics"
          }
        }
      }
    },
    "v1.skill.invocations.Request": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "Skill's Lambda or HTTPS endpoint."
        },
        "body": {
          "type": "object",
          "description": "JSON payload that was sent to the skill's Lambda or HTTPS endpoint.\n",
          "properties": {}
        }
      }
    },
    "v1.skill.invocations.Response": {
      "type": "object",
      "properties": {
        "body": {
          "type": "object",
          "description": "Payload that was returned by the skill's Lambda or HTTPS endpoint.\n",
          "properties": {}
        }
      }
    },
    "v1.skill.invocations.Metrics": {
      "type": "object",
      "properties": {
        "skillExecutionTimeInMilliseconds": {
          "type": "integer",
          "description": "How long, in milliseconds, it took the skill's Lambda or HTTPS endpoint to process the request.\n"
        }
      }
    },
    "v1.skill.Manifest.SkillManifestEnvelope": {
      "type": "object",
      "properties": {
        "manifest": {
          "$ref": "#/definitions/v1.skill.Manifest.SkillManifest"
        }
      }
    },
    "v1.skill.Manifest.SkillManifest": {
      "type": "object",
      "properties": {
        "manifestVersion": {
          "$ref": "#/definitions/v1.skill.Manifest.ManifestVersion",
          "x-isEnum": true
        },
        "publishingInformation": {
          "$ref": "#/definitions/v1.skill.Manifest.SkillManifestPublishingInformation"
        },
        "privacyAndCompliance": {
          "$ref": "#/definitions/v1.skill.Manifest.SkillManifestPrivacyAndCompliance"
        },
        "events": {
          "$ref": "#/definitions/v1.skill.Manifest.SkillManifestEvents"
        },
        "permissions": {
          "type": "array",
          "description": "Defines the structure for required permissions information in the skill manifest.",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.PermissionItems"
          }
        },
        "authorizedClients": {
          "type": "array",
          "description": "Defines a list of clients authorized for a skill.",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.AuthorizedClient"
          }
        },
        "apis": {
          "$ref": "#/definitions/v1.skill.Manifest.SkillManifestApis"
        }
      },
      "description": "Defines the structure for a skill's metadata."
    },
    "v1.skill.Manifest.ManifestVersion": {
      "type": "string",
      "description": "Version of the skill manifest.",
      "enum": [
        "1.0"
      ]
    },
    "v1.skill.Manifest.AuthorizedClient": {
      "type": "object",
      "required": [
        "authenticationProvider"
      ],
      "properties": {
        "authenticationProvider": {
          "type": "string"
        }
      },
      "description": "Defines a client authorized for a skill."
    },
    "v1.skill.Manifest.AuthorizedClientLwa": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.Manifest.AuthorizedClient"
        },
        {
          "type": "object",
          "properties": {
            "applications": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1.skill.Manifest.AuthorizedClientLwaApplication"
              },
              "minItems": 1
            }
          }
        }
      ],
      "description": "Defines client using Login With Amazon authentication provider, corresponds to LWA Security Profile.",
      "x-discriminator-value": "LWA"
    },
    "v1.skill.Manifest.AuthorizedClientLwaApplication": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "description": "Defines an application for LWA security profile."
    },
    "v1.skill.Manifest.AuthorizedClientLwaApplicationAndroid": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.Manifest.AuthorizedClientLwaApplication"
        },
        {
          "type": "object",
          "properties": {
            "appStoreAppId": {
              "type": "string"
            },
            "clientId": {
              "type": "string"
            }
          }
        }
      ],
      "description": "Defines an android application for LWA authentication provider.",
      "x-discriminator-value": "LWA_ANDROID"
    },
    "v1.skill.Manifest.SkillManifestPublishingInformation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the skill that is displayed to customers in the Alexa app."
        },
        "description": {
          "type": "string",
          "description": "Description of the skill's purpose and feature and how it works. Should describe any prerequisites like hardware or account requirements and detailed steps for the customer to get started. For Flash Briefing skill list the feeds offered within the skill. Use a conversational tone and correct grammar and punctuation. This description displays to customers on the skill detail card in the Alexa app."
        },
        "locales": {
          "type": "object",
          "description": "Defines the structure for locale specific publishing information in the skill manifest.",
          "minProperties": 1,
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.Manifest.SkillManifestLocalizedPublishingInformation"
          }
        },
        "isAvailableWorldwide": {
          "type": "boolean",
          "description": "True if the skill should be distributed in all countries where Amazon distributes skill false otherwise."
        },
        "distributionMode": {
          "$ref": "#/definitions/v1.skill.Manifest.DistributionMode",
          "x-isEnum": true
        },
        "gadgetSupport": {
          "$ref": "#/definitions/v1.skill.Manifest.ManifestGadgetSupport"
        },
        "testingInstructions": {
          "type": "string",
          "description": "Special instructions provided by the developer to test the skill.",
          "maxLength": 4000
        },
        "category": {
          "type": "string",
          "description": "Category that best describes a skill. Indicates the filter category for the skill in the Alexa App."
        },
        "distributionCountries": {
          "type": "array",
          "description": "Selected list of countries provided by the skill owner where Amazon can distribute the skill.",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.DistributionCountries"
          }
        },
        "automaticDistribution": {
          "$ref": "#/definitions/v1.skill.Manifest.AutomaticDistribution"
        },
        "automaticClonedLocale": {
          "$ref": "#/definitions/v1.skill.Manifest.AutomaticClonedLocale"
        },
        "paidSkillInformation": {
          "$ref": "#/definitions/v1.skill.Manifest.PaidSkillInformation"
        }
      },
      "description": "Defines the structure for publishing information in the skill manifest."
    },
    "v1.skill.Manifest.AutomaticClonedLocale": {
      "type": "object",
      "required": [
        "locales"
      ],
      "properties": {
        "locales": {
          "type": "array",
          "description": "List of language specific source locale to target locales mapping.",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.LocalesByAutomaticClonedLocale"
          }
        }
      },
      "description": "Defines the structure for Sync Locales in the skill manifest. This is an optional property and Sync Locales will be disabled if not set."
    },
    "v1.skill.Manifest.LocalesByAutomaticClonedLocale": {
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "source": {
          "type": "string",
          "description": "Locale where the metadata and model will be copied from. For example: en-US. This locale must already exist in the skill."
        },
        "targets": {
          "type": "array",
          "description": "Optional. List of locales where the metadata and model will be copied to. All configuration of source locale will be copied, so target locales do not have to exist before. Defaults to all locales with the same language as the sourceLocale.",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "maps source locale to list of target locales. Source and target locales should be with the same language."
    },
    "v1.skill.Manifest.AutomaticDistribution": {
      "type": "object",
      "required": [
        "isActive"
      ],
      "properties": {
        "isActive": {
          "type": "boolean",
          "description": "set to true to opt in to Automatic Skill Distribution. If false, then the skill will not be considered for Automatic Skill Distribution. Note that once a skill has gone through the automatic distribution process and this value is later set to false, any locales that were published through this feature will not be reverted. Any published locales will need to be suppressed manually via contacting DAG."
        },
        "sourceLocaleForLanguages": {
          "type": "array",
          "description": "list of items pairing a language with a source locale. Required if isActive is set to true. For each language there must be exactly one source locale.",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.SourceLanguageForLocales"
          }
        }
      },
      "description": "optional. Used by developer to opt in to Automatic Skill Distribution, a feature where a skill will automatically be published in new eligible locales from the same language (e.g. from \"en-US\" to \"en-CA\" and \"en-GB\"). Locales that the developer has already created will not be overwritten."
    },
    "v1.skill.Manifest.SourceLanguageForLocales": {
      "type": "object",
      "required": [
        "language",
        "sourceLocale"
      ],
      "properties": {
        "language": {
          "type": "string",
          "description": "two-letter string representing the language to distribute to. There must be at least one locale in publishingInformation.locales which has this language as the prefix."
        },
        "sourceLocale": {
          "type": "string",
          "description": "locale where the metadata and model will be copied from. This locale must already exist in the skill."
        }
      },
      "description": "maps a language to a locale. During Automatic Skill Distribution, skill metadata and model of the source locale will be copied to other eligible locales of the same language. Eligible destination locales will be determined by the system."
    },
    "v1.skill.Manifest.ManifestGadgetSupport": {
      "type": "object",
      "required": [
        "requirement"
      ],
      "properties": {
        "requirement": {
          "$ref": "#/definitions/v1.skill.Manifest.GadgetSupportRequirement",
          "x-isEnum": true
        },
        "minGadgetButtons": {
          "type": "integer",
          "description": "Minimum number of gadget buttons required.",
          "minimum": 1,
          "maximum": 4
        },
        "maxGadgetButtons": {
          "type": "integer",
          "description": "Maximum number of gadget buttons required.",
          "minimum": 1,
          "maximum": 4
        },
        "numPlayersMax": {
          "type": "integer",
          "description": "Maximum number of players in the game.",
          "minimum": 1
        },
        "numPlayersMin": {
          "type": "integer",
          "description": "Minimum number of players in the game.",
          "minimum": 1,
          "maximum": 16
        }
      },
      "description": "Defines the structure for gadget buttons support in the skill manifest."
    },
    "v1.skill.Manifest.DistributionMode": {
      "type": "string",
      "description": "What audience the skill should be distributed to. \"PUBLIC\" - available to all users. Has ASIN and can be enabled. \"PRIVATE\" - available to entitled users. Has ASIN and can be enabled. \"INTERNAL\" - has no ASIN and cannot be enabled by users. Internally managed skills.\n",
      "enum": [
        "PRIVATE",
        "PUBLIC"
      ]
    },
    "v1.skill.Manifest.GadgetSupportRequirement": {
      "type": "string",
      "description": "Specifies if gadget support is required/optional for this skill to work.",
      "enum": [
        "REQUIRED",
        "OPTIONAL"
      ]
    },
    "v1.skill.Manifest.SkillManifestLocalizedPublishingInformation": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the skill that is displayed to customers in the Alexa app.",
          "minLength": 2
        },
        "smallIconUri": {
          "type": "string",
          "description": "URL to a small icon for the skill, which is shown in the list of skills (108x108px)."
        },
        "largeIconUri": {
          "type": "string",
          "description": "URL to a large icon that represents this skill (512x512px)."
        },
        "summary": {
          "type": "string",
          "description": "Summary description of the skill, which is shown when viewing the list of skills.",
          "maxLength": 160
        },
        "description": {
          "type": "string",
          "description": "A full description explaining the skill’s core functionality and any prerequisites to using it (such as additional hardware, software, or accounts). For a Flash Briefing skill, you must list the feeds for the skill.",
          "maxLength": 4000
        },
        "updatesDescription": {
          "type": "string",
          "description": "Updates description of the skill's new features and fixes in the version. Should describe changes in the revisions of the skill.",
          "maxLength": 4000
        },
        "examplePhrases": {
          "type": "array",
          "description": "Three example phrases that illustrate how users can invoke your skill. For accuracy, these phrases must come directly from your sample utterances.",
          "items": {
            "type": "string",
            "maxLength": 200
          },
          "maxItems": 3
        },
        "keywords": {
          "type": "array",
          "description": "Sample keyword phrases that describe the skill.",
          "items": {
            "type": "string",
            "maxLength": 150
          },
          "maxItems": 30
        },
        "customProductPrompts": {
          "$ref": "#/definitions/v1.skill.Manifest.CustomProductPrompts"
        }
      },
      "description": "Defines the structure for locale specific publishing information in the skill manifest."
    },
    "v1.skill.Manifest.DistributionCountries": {
      "type": "string",
      "enum": [
        "AF",
        "AX",
        "AL",
        "DZ",
        "AS",
        "AD",
        "AO",
        "AI",
        "AQ",
        "AG",
        "AR",
        "AM",
        "AW",
        "AU",
        "AT",
        "AZ",
        "BS",
        "BH",
        "BD",
        "BB",
        "BY",
        "BE",
        "BZ",
        "BJ",
        "BM",
        "BT",
        "BO",
        "BA",
        "BW",
        "BV",
        "BR",
        "IO",
        "BN",
        "BG",
        "BF",
        "BI",
        "KH",
        "CM",
        "CA",
        "CV",
        "KY",
        "CF",
        "TD",
        "CL",
        "CN",
        "CX",
        "CC",
        "CO",
        "KM",
        "CG",
        "CD",
        "CK",
        "CR",
        "HR",
        "CY",
        "CZ",
        "DK",
        "DJ",
        "DM",
        "DO",
        "EC",
        "EG",
        "SV",
        "GQ",
        "ER",
        "EE",
        "ET",
        "FK",
        "FO",
        "FJ",
        "FI",
        "FR",
        "GF",
        "PF",
        "TF",
        "GA",
        "GM",
        "GE",
        "DE",
        "GH",
        "GI",
        "GR",
        "GL",
        "GD",
        "GP",
        "GU",
        "GT",
        "GG",
        "GN",
        "GW",
        "GY",
        "HT",
        "HM",
        "VA",
        "HN",
        "HK",
        "HU",
        "IS",
        "IN",
        "ID",
        "IQ",
        "IE",
        "IM",
        "IL",
        "IT",
        "CI",
        "JM",
        "JP",
        "JE",
        "JO",
        "KZ",
        "KE",
        "KI",
        "KR",
        "KW",
        "KG",
        "LA",
        "LV",
        "LB",
        "LS",
        "LR",
        "LY",
        "LI",
        "LT",
        "LU",
        "MO",
        "MK",
        "MG",
        "MW",
        "MY",
        "MV",
        "ML",
        "MT",
        "MH",
        "MQ",
        "MR",
        "MU",
        "YT",
        "MX",
        "FM",
        "MD",
        "MC",
        "MN",
        "ME",
        "MS",
        "MA",
        "MZ",
        "MM",
        "NA",
        "NR",
        "NP",
        "NL",
        "AN",
        "NC",
        "NZ",
        "NI",
        "NE",
        "NG",
        "NU",
        "NF",
        "MP",
        "NO",
        "OM",
        "PK",
        "PW",
        "PS",
        "PA",
        "PG",
        "PY",
        "PE",
        "PH",
        "PN",
        "PL",
        "PT",
        "PR",
        "QA",
        "RE",
        "RO",
        "RU",
        "RW",
        "BL",
        "SH",
        "KN",
        "LC",
        "MF",
        "PM",
        "VC",
        "WS",
        "SM",
        "ST",
        "SA",
        "SN",
        "RS",
        "SC",
        "SL",
        "SG",
        "SK",
        "SI",
        "SB",
        "SO",
        "ZA",
        "GS",
        "ES",
        "LK",
        "SR",
        "SJ",
        "SZ",
        "SE",
        "CH",
        "TW",
        "TJ",
        "TZ",
        "TH",
        "TL",
        "TG",
        "TK",
        "TO",
        "TT",
        "TN",
        "TR",
        "TM",
        "TC",
        "TV",
        "UG",
        "UA",
        "AE",
        "GB",
        "US",
        "UM",
        "UY",
        "UZ",
        "VU",
        "VE",
        "VN",
        "VG",
        "VI",
        "WF",
        "EH",
        "YE",
        "ZM",
        "ZW"
      ]
    },
    "v1.skill.Manifest.SkillManifestPrivacyAndCompliance": {
      "type": "object",
      "properties": {
        "locales": {
          "type": "object",
          "description": "Object that contains <locale> objects for each supported locale.",
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.Manifest.SkillManifestLocalizedPrivacyAndCompliance"
          }
        },
        "allowsPurchases": {
          "type": "boolean",
          "description": "True if the skill allows users to make purchases or spend real money false otherwise."
        },
        "usesPersonalInfo": {
          "type": "boolean",
          "description": "True if the skill collects users' personal information false otherwise."
        },
        "isChildDirected": {
          "type": "boolean",
          "description": "True if the skill is directed to or targets children under the age of 13/16 false otherwise."
        },
        "isExportCompliant": {
          "type": "boolean",
          "description": "True if it is certified that the skill may be imported to and exported from the United States and all other countries and regions in which Amazon operate its program or in which skill owner have authorized sales to end users (without the need for Amazon to obtain any license or clearance or take any other action) and is in full compliance with all applicable laws and regulations governing imports and export including those applicable to software that makes use of encryption technology."
        },
        "containsAds": {
          "type": "boolean",
          "description": "True if the skill contains advertising false otherwise."
        },
        "usesHealthInfo": {
          "type": "boolean",
          "description": "True if the skill developer is a Covered Entity (CE) or Business Associate (BA) as defined by the Health Insurance Portability And Accountability Act (HIPAA) and the skill requires Amazon to process PHI on their behalf, false otherwise. This is an optional property and treated as false if not set."
        },
        "shoppingKit": {
          "$ref": "#/definitions/v1.skill.Manifest.ShoppingKit"
        }
      },
      "description": "Defines the structure for privacy & compliance information in the skill manifest."
    },
    "v1.skill.Manifest.ShoppingKit": {
      "type": "object",
      "properties": {
        "isShoppingActionsEnabled": {
          "type": "boolean",
          "description": "True if the skill uses Alexa Shopping Actions, false otherwise."
        }
      },
      "description": "Defines the structure for Shopping Kit related information in the skill manifest."
    },
    "v1.skill.Manifest.SkillManifestLocalizedPrivacyAndCompliance": {
      "type": "object",
      "properties": {
        "privacyPolicyUrl": {
          "type": "string",
          "description": "Link to the privacy policy that applies to this skill."
        },
        "termsOfUseUrl": {
          "type": "string",
          "description": "link to the terms of use document for this skill"
        }
      },
      "description": "Defines the structure for locale specific privacy & compliance information in the skill manifest."
    },
    "v1.skill.Manifest.SkillManifestEndpoint": {
      "type": "object",
      "required": [
        "uri"
      ],
      "properties": {
        "uri": {
          "type": "string",
          "format": "uri",
          "description": "Amazon Resource Name (ARN) of the skill's Lambda function or HTTPS URL.",
          "pattern": "^(arn|https://)"
        },
        "sslCertificateType": {
          "$ref": "#/definitions/v1.skill.Manifest.SSLCertificateType",
          "x-isEnum": true
        }
      },
      "description": "Defines the structure for endpoint information in the skill manifest."
    },
    "v1.skill.Manifest.SSLCertificateType": {
      "type": "string",
      "description": "The SSL certificate type of the skill's HTTPS endpoint. Only valid for HTTPS endpoint not for AWS Lambda ARN.",
      "enum": [
        "SelfSigned",
        "Wildcard",
        "Trusted"
      ]
    },
    "v1.skill.Manifest.SkillManifestEvents": {
      "type": "object",
      "required": [
        "endpoint"
      ],
      "properties": {
        "subscriptions": {
          "type": "array",
          "description": "Contains an array of eventName object each of which contains the name of a skill event.",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.EventName"
          }
        },
        "publications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.EventPublications"
          }
        },
        "regions": {
          "type": "object",
          "description": "Contains an array of the supported <region> Objects.",
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.Manifest.Region"
          }
        },
        "endpoint": {
          "$ref": "#/definitions/v1.skill.Manifest.SkillManifestEndpoint"
        }
      },
      "description": "Defines the structure for subscribed events information in the skill manifest."
    },
    "v1.skill.Manifest.EventName": {
      "type": "object",
      "properties": {
        "eventName": {
          "$ref": "#/definitions/v1.skill.Manifest.EventNameType",
          "x-isEnum": true
        }
      }
    },
    "v1.skill.Manifest.EventNameType": {
      "type": "string",
      "description": "Name of the event to be subscribed to.",
      "enum": [
        "Legacy.AudioPlayerGui.LyricsViewedEvent",
        "Legacy.ListModel.DeleteItemRequest",
        "Legacy.MediaPlayer.SequenceModified",
        "Legacy.PlaybackController.ButtonCommand",
        "EffectsController.RequestEffectChangeRequest",
        "Legacy.ExternalMediaPlayer.RequestToken",
        "ITEMS_UPDATED",
        "Alexa.Video.Xray.ShowDetailsSuccessful",
        "PlaybackController.NextCommandIssued",
        "Legacy.MediaPlayer.PlaybackFinished",
        "Alexa.Camera.VideoCaptureController.CaptureFailed",
        "SKILL_DISABLED",
        "Alexa.Camera.VideoCaptureController.CancelCaptureFailed",
        "CustomInterfaceController.EventsReceived",
        "Legacy.DeviceNotification.NotificationStarted",
        "REMINDER_UPDATED",
        "AUDIO_ITEM_PLAYBACK_STOPPED",
        "Legacy.AuxController.InputActivityStateChanged",
        "LocalApplication.MShopPurchasing.Event",
        "Legacy.ExternalMediaPlayer.AuthorizationComplete",
        "LocalApplication.HHOPhotos.Event",
        "Alexa.Presentation.APL.UserEvent",
        "Legacy.AudioPlayer.PlaybackInterrupted",
        "Legacy.BluetoothNetwork.DeviceUnpairFailure",
        "IN_SKILL_PRODUCT_SUBSCRIPTION_ENDED",
        "Alexa.FileManager.UploadController.UploadFailed",
        "Legacy.BluetoothNetwork.DeviceConnectedFailure",
        "Legacy.AudioPlayer.AudioStutter",
        "Alexa.Camera.VideoCaptureController.CaptureStarted",
        "Legacy.Speaker.MuteChanged",
        "CardRenderer.DisplayContentFinished",
        "Legacy.SpeechSynthesizer.SpeechStarted",
        "AudioPlayer.PlaybackStopped",
        "Legacy.SoftwareUpdate.CheckSoftwareUpdateReport",
        "CardRenderer.DisplayContentStarted",
        "LocalApplication.NotificationsApp.Event",
        "AudioPlayer.PlaybackStarted",
        "Legacy.DeviceNotification.NotificationEnteredForground",
        "Legacy.DeviceNotification.SetNotificationFailed",
        "Legacy.AudioPlayer.PeriodicPlaybackProgressReport",
        "Legacy.HomeAutoWifiController.HttpNotified",
        "Alexa.Camera.PhotoCaptureController.CancelCaptureFailed",
        "SKILL_ACCOUNT_LINKED",
        "LIST_UPDATED",
        "Legacy.DeviceNotification.NotificationSync",
        "Legacy.SconeRemoteControl.VolumeDown",
        "Legacy.MediaPlayer.PlaybackPaused",
        "Legacy.Presentation.PresentationUserEvent",
        "PlaybackController.PlayCommandIssued",
        "Legacy.ListModel.UpdateItemRequest",
        "Messaging.MessageReceived",
        "Legacy.SoftwareUpdate.InitiateSoftwareUpdateReport",
        "AUDIO_ITEM_PLAYBACK_FAILED",
        "LocalApplication.DeviceMessaging.Event",
        "Alexa.Camera.PhotoCaptureController.CaptureFailed",
        "Legacy.AudioPlayer.PlaybackIdle",
        "Legacy.BluetoothNetwork.EnterPairingModeSuccess",
        "Legacy.AudioPlayer.PlaybackError",
        "Legacy.ListModel.GetPageByOrdinalRequest",
        "Legacy.MediaGrouping.GroupChangeResponseEvent",
        "Legacy.BluetoothNetwork.DeviceDisconnectedFailure",
        "Legacy.BluetoothNetwork.EnterPairingModeFailure",
        "Legacy.SpeechSynthesizer.SpeechInterrupted",
        "PlaybackController.PreviousCommandIssued",
        "Legacy.AudioPlayer.PlaybackFinished",
        "Legacy.System.UserInactivity",
        "Display.UserEvent",
        "Legacy.PhoneCallController.Event",
        "Legacy.DeviceNotification.SetNotificationSucceeded",
        "LocalApplication.Photos.Event",
        "LocalApplication.VideoExperienceService.Event",
        "Legacy.ContentManager.ContentPlaybackTerminated",
        "Legacy.PlaybackController.PlayCommand",
        "Legacy.PlaylistController.ErrorResponse",
        "Legacy.SconeRemoteControl.VolumeUp",
        "MessagingController.UpdateConversationsStatus",
        "Legacy.BluetoothNetwork.DeviceDisconnectedSuccess",
        "LocalApplication.Communications.Event",
        "AUDIO_ITEM_PLAYBACK_STARTED",
        "Legacy.BluetoothNetwork.DevicePairFailure",
        "LIST_DELETED",
        "Legacy.PlaybackController.ToggleCommand",
        "Legacy.BluetoothNetwork.DevicePairSuccess",
        "Legacy.MediaPlayer.PlaybackError",
        "AudioPlayer.PlaybackFinished",
        "Legacy.DeviceNotification.NotificationStopped",
        "Legacy.SipClient.Event",
        "Display.ElementSelected",
        "LocalApplication.MShop.Event",
        "Legacy.ListModel.AddItemRequest",
        "Legacy.BluetoothNetwork.ScanDevicesReport",
        "Legacy.MediaPlayer.PlaybackStopped",
        "Legacy.AudioPlayerGui.ButtonClickedEvent",
        "LocalApplication.AlexaVoiceLayer.Event",
        "Legacy.PlaybackController.PreviousCommand",
        "Legacy.AudioPlayer.InitialPlaybackProgressReport",
        "Legacy.BluetoothNetwork.DeviceConnectedSuccess",
        "LIST_CREATED",
        "Legacy.ActivityManager.ActivityContextRemovedEvent",
        "ALL_LISTS_CHANGED",
        "Legacy.AudioPlayer.PlaybackNearlyFinished",
        "Legacy.MediaGrouping.GroupChangeNotificationEvent",
        "LocalApplication.Sentry.Event",
        "SKILL_PROACTIVE_SUBSCRIPTION_CHANGED",
        "SKILL_NOTIFICATION_SUBSCRIPTION_CHANGED",
        "REMINDER_CREATED",
        "Alexa.Presentation.HTML.Event",
        "FitnessSessionController.FitnessSessionError",
        "Legacy.SconeRemoteControl.Next",
        "Alexa.Camera.VideoCaptureController.CaptureFinished",
        "Legacy.MediaPlayer.SequenceItemsRequested",
        "Legacy.PlaybackController.PauseCommand",
        "LocalApplication.AlexaVision.Event",
        "LocalApplication.Closet.Event",
        "Alexa.FileManager.UploadController.CancelUploadFailed",
        "Legacy.MediaPlayer.PlaybackResumed",
        "SKILL_PERMISSION_ACCEPTED",
        "FitnessSessionController.FitnessSessionPaused",
        "Legacy.AudioPlayer.PlaybackPaused",
        "Alexa.Presentation.HTML.LifecycleStateChanged",
        "LocalApplication.SipUserAgent.Event",
        "Legacy.MediaPlayer.PlaybackStarted",
        "REMINDER_STATUS_CHANGED",
        "MessagingController.UploadConversations",
        "ITEMS_DELETED",
        "Legacy.AuxController.PluggedStateChanged",
        "Legacy.AudioPlayer.PlaybackStarted",
        "Alexa.FileManager.UploadController.UploadStarted",
        "ITEMS_CREATED",
        "Legacy.ExternalMediaPlayer.Event",
        "LocalApplication.LocalMediaPlayer.Event",
        "LocalApplication.KnightContacts.Event",
        "LocalApplication.Calendar.Event",
        "Legacy.AlertsController.DismissCommand",
        "Legacy.AudioPlayer.PlaybackStutterFinished",
        "Legacy.SpeechSynthesizer.SpeechFinished",
        "Legacy.ExternalMediaPlayer.ReportDiscoveredPlayers",
        "LocalApplication.SipClient.Event",
        "Legacy.BluetoothNetwork.DeviceUnpairSuccess",
        "Legacy.Speaker.VolumeChanged",
        "CardRenderer.ReadContentFinished",
        "LocalApplication.HomeAutomationMedia.Event",
        "Legacy.BluetoothNetwork.CancelPairingMode",
        "LocalApplication.DigitalDash.Event",
        "CardRenderer.ReadContentStarted",
        "Legacy.GameEngine.GameInputEvent",
        "LocalApplication.LocalVoiceUI.Event",
        "Legacy.Microphone.AudioRecording",
        "LocalApplication.AlexaPlatformTestSpeechlet.Event",
        "Legacy.HomeAutoWifiController.SsdpServiceDiscovered",
        "Alexa.Camera.PhotoCaptureController.CancelCaptureFinished",
        "Legacy.HomeAutoWifiController.DeviceReconnected",
        "SKILL_ENABLED",
        "Alexa.Camera.VideoCaptureController.CancelCaptureFinished",
        "MessagingController.UpdateMessagesStatusRequest",
        "REMINDER_STARTED",
        "CustomInterfaceController.Expired",
        "LocalApplication.AvaPhysicalShopping.Event",
        "LocalApplication.WebVideoPlayer.Event",
        "Legacy.HomeAutoWifiController.SsdpServiceTerminated",
        "LocalApplication.FireflyShopping.Event",
        "Legacy.PlaybackController.NextCommand",
        "LocalApplication.Gallery.Event",
        "Alexa.Presentation.PresentationDismissed",
        "EffectsController.StateReceiptChangeRequest",
        "LocalApplication.Alexa.Translation.LiveTranslation.Event",
        "LocalApplication.AlexaNotifications.Event",
        "REMINDER_DELETED",
        "GameEngine.InputHandlerEvent",
        "Legacy.PlaylistController.Response",
        "LocalApplication.KnightHome.Event",
        "Legacy.ListRenderer.ListItemEvent",
        "AudioPlayer.PlaybackFailed",
        "LocalApplication.KnightHomeThingsToTry.Event",
        "Legacy.BluetoothNetwork.SetDeviceCategoriesFailed",
        "Legacy.ExternalMediaPlayer.Logout",
        "Alexa.FileManager.UploadController.UploadFinished",
        "Legacy.ActivityManager.FocusChanged",
        "Legacy.AlertsController.SnoozeCommand",
        "Legacy.SpeechRecognizer.WakeWordChanged",
        "Legacy.ListRenderer.GetListPageByToken",
        "MessagingController.UpdateSendMessageStatusRequest",
        "FitnessSessionController.FitnessSessionEnded",
        "Alexa.Presentation.APL.RuntimeError",
        "Legacy.ListRenderer.GetListPageByOrdinal",
        "FitnessSessionController.FitnessSessionResumed",
        "IN_SKILL_PRODUCT_SUBSCRIPTION_STARTED",
        "Legacy.DeviceNotification.DeleteNotificationSucceeded",
        "Legacy.SpeechSynthesizer.SpeechSynthesizerError",
        "Alexa.Video.Xray.ShowDetailsFailed",
        "Alexa.FileManager.UploadController.CancelUploadFinished",
        "Legacy.SconeRemoteControl.PlayPause",
        "Legacy.DeviceNotification.NotificationEnteredBackground",
        "SKILL_PERMISSION_CHANGED",
        "Legacy.AudioPlayer.Metadata",
        "Legacy.AudioPlayer.PlaybackStutterStarted",
        "AUDIO_ITEM_PLAYBACK_FINISHED",
        "EffectsController.RequestGuiChangeRequest",
        "FitnessSessionController.FitnessSessionStarted",
        "Legacy.PlaybackController.LyricsViewedEvent",
        "Legacy.ExternalMediaPlayer.Login",
        "PlaybackController.PauseCommandIssued",
        "Legacy.MediaPlayer.PlaybackIdle",
        "Legacy.SconeRemoteControl.Previous",
        "DeviceSetup.SetupCompleted",
        "Legacy.MediaPlayer.PlaybackNearlyFinished",
        "LocalApplication.todoRenderer.Event",
        "Legacy.BluetoothNetwork.SetDeviceCategoriesSucceeded",
        "Legacy.BluetoothNetwork.MediaControlSuccess",
        "Legacy.HomeAutoWifiController.SsdpDiscoveryFinished",
        "Alexa.Presentation.APL.LoadIndexListData",
        "IN_SKILL_PRODUCT_SUBSCRIPTION_RENEWED",
        "Legacy.BluetoothNetwork.MediaControlFailure",
        "Legacy.AuxController.EnabledStateChanged",
        "Legacy.FavoritesController.Response",
        "Legacy.ListModel.ListStateUpdateRequest",
        "Legacy.EqualizerController.EqualizerChanged",
        "Legacy.MediaGrouping.GroupSyncEvent",
        "Legacy.FavoritesController.Error",
        "Legacy.ListModel.GetPageByTokenRequest",
        "Legacy.ActivityManager.ActivityInterrupted",
        "Legacy.MeetingClientController.Event",
        "Legacy.Presentation.PresentationDismissedEvent",
        "Legacy.Spotify.Event",
        "Legacy.ExternalMediaPlayer.Error",
        "Legacy.AuxController.DirectionChanged",
        "AudioPlayer.PlaybackNearlyFinished",
        "Alexa.Camera.PhotoCaptureController.CaptureFinished",
        "Legacy.UDPController.BroadcastResponse",
        "Legacy.AudioPlayer.PlaybackResumed",
        "Legacy.DeviceNotification.DeleteNotificationFailed"
      ]
    },
    "v1.skill.Manifest.EventPublications": {
      "type": "object",
      "properties": {
        "eventName": {
          "type": "string",
          "description": "Name of the event to publish."
        }
      }
    },
    "v1.skill.Manifest.Region": {
      "type": "object",
      "required": [
        "endpoint"
      ],
      "properties": {
        "endpoint": {
          "$ref": "#/definitions/v1.skill.Manifest.SkillManifestEndpoint"
        }
      },
      "description": "Defines the structure for regional information."
    },
    "v1.skill.Manifest.PermissionItems": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/v1.skill.Manifest.PermissionName",
          "x-isEnum": true
        }
      }
    },
    "v1.skill.Manifest.PermissionName": {
      "type": "string",
      "description": "Name of the required permission.",
      "enum": [
        "alexa::device_id:read",
        "alexa::personality:explicit:read",
        "alexa::authenticate:2:mandatory",
        "alexa:devices:all:address:country_and_postal_code:read",
        "alexa::profile:mobile_number:read",
        "alexa::async_event:write",
        "alexa::device_type:read",
        "alexa::skill:proactive_enablement",
        "alexa::personality:explicit:write",
        "alexa::household:lists:read",
        "alexa::utterance_id:read",
        "alexa::user_experience_guidance:read",
        "alexa::devices:all:notifications:write",
        "avs::distributed_audio",
        "alexa::devices:all:address:full:read",
        "alexa::devices:all:notifications:urgent:write",
        "payments:autopay_consent",
        "alexa::alerts:timers:skill:readwrite",
        "alexa::customer_id:read",
        "alexa::skill:cds:monetization",
        "alexa::music:cast",
        "alexa::profile:given_name:read",
        "alexa::alerts:reminders:skill:readwrite",
        "alexa::household:lists:write",
        "alexa::profile:email:read",
        "alexa::profile:name:read",
        "alexa::devices:all:geolocation:read",
        "alexa::raw_person_id:read",
        "alexa::authenticate:2:optional",
        "alexa::health:profile:write",
        "alexa::person_id:read",
        "alexa::skill:products:entitlements",
        "alexa::energy:devices:state:read",
        "alexa::origin_ip_address:read",
        "alexa::devices:all:coarse_location:read",
        "alexa::devices:all:tokenized_geolocation:read"
      ]
    },
    "v1.skill.Manifest.SkillManifestApis": {
      "type": "object",
      "properties": {
        "flashBriefing": {
          "$ref": "#/definitions/v1.skill.Manifest.FlashBriefingApis"
        },
        "custom": {
          "$ref": "#/definitions/v1.skill.Manifest.CustomApis"
        },
        "knowledge": {
          "$ref": "#/definitions/v1.skill.Manifest.KnowledgeApis"
        },
        "smartHome": {
          "$ref": "#/definitions/v1.skill.Manifest.SmartHomeApis"
        },
        "video": {
          "$ref": "#/definitions/v1.skill.Manifest.VideoApis"
        },
        "alexaForBusiness": {
          "$ref": "#/definitions/v1.skill.Manifest.AlexaForBusinessApis"
        },
        "householdList": {
          "$ref": "#/definitions/v1.skill.Manifest.HouseHoldList"
        },
        "music": {
          "$ref": "#/definitions/v1.skill.Manifest.MusicApis"
        },
        "demandResponse": {
          "$ref": "#/definitions/v1.skill.Manifest.DemandResponseApis"
        }
      },
      "description": "Defines the structure for implemented apis information in the skill manifest."
    },
    "v1.skill.Manifest.KnowledgeApis": {
      "type": "object",
      "properties": {
        "enablementChannel": {
          "$ref": "#/definitions/v1.skill.Manifest.KnowledgeApisEnablementChannel",
          "x-isEnum": true
        },
        "locales": {
          "type": "object",
          "description": "Defines the structure of locale specific knowledge information in the skill manifest.",
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.Manifest.LocalizedKnowledgeInformation"
          }
        }
      },
      "description": "defines the structure for the knowledge api of the skill."
    },
    "v1.skill.Manifest.KnowledgeApisEnablementChannel": {
      "type": "string",
      "description": "Defines how the skill can be enabled by developers. values can be set to 'PUBLIC' (in Alexa Skill Store), 'ASP' (A4R/A4H vendor devices), or 'A4B' Public and ASP selections must have \"distributionMode\" = 'PUBLIC' and will only be eligible for distribution on personal or vendor (A4H/A4R or A4B) devices.",
      "enum": [
        "PUBLIC",
        "ASP",
        "A4B"
      ]
    },
    "v1.skill.Manifest.LocalizedKnowledgeInformation": {
      "type": "object",
      "properties": {
        "answerAttribution": {
          "type": "string",
          "description": "enables skill developers to prepend a custom message to all of their knowledge skill's answers, which can help inform end-users of the skill and data source answering their question.",
          "maxLength": 75,
          "pattern": "^[.a-zA-Z0-9,\"' ]*$"
        }
      },
      "description": "Defines the structure of localized knowledge information in the skill manifest."
    },
    "v1.skill.Manifest.FlashBriefingApis": {
      "type": "object",
      "required": [
        "locales"
      ],
      "properties": {
        "locales": {
          "type": "object",
          "description": "Object that contains <locale> objects for each supported locale.",
          "minProperties": 1,
          "maxProperties": 1,
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.Manifest.LocalizedFlashBriefingInfo"
          }
        }
      },
      "description": "Defines the structure of flash briefing api in the skill manifest."
    },
    "v1.skill.Manifest.LocalizedFlashBriefingInfo": {
      "type": "object",
      "properties": {
        "feeds": {
          "type": "array",
          "description": "Defines the structure for a feed information in the skill manifest.",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.LocalizedFlashBriefingInfoItems"
          },
          "maxItems": 50
        },
        "customErrorMessage": {
          "type": "string",
          "description": "Alexa says this to the customer if the skill fails to render the content.",
          "minLength": 1,
          "maxLength": 100,
          "pattern": "^[^<]*$"
        }
      },
      "description": "Defines the structure of a localized flash briefing information."
    },
    "v1.skill.Manifest.LocalizedFlashBriefingInfoItems": {
      "type": "object",
      "required": [
        "contentType",
        "genre",
        "isDefault",
        "updateFrequency",
        "url"
      ],
      "properties": {
        "logicalName": {
          "type": "string",
          "description": "Logical name of the feed. This is used to signify relation among feeds across different locales. Example If you have \"weather\" feed in multiple locale then consider naming it \"weather_update\" and we will make sure to play the right feed if customer changes the language on device.",
          "maxLength": 255
        },
        "name": {
          "type": "string",
          "description": "Name that identifies this feed.",
          "maxLength": 255
        },
        "url": {
          "type": "string",
          "description": "Url for the feed"
        },
        "imageUri": {
          "type": "string",
          "description": "Uri for the feed image"
        },
        "contentType": {
          "$ref": "#/definitions/v1.skill.Manifest.FlashBriefingContentType",
          "x-isEnum": true
        },
        "genre": {
          "$ref": "#/definitions/v1.skill.Manifest.FlashBriefingGenre",
          "x-isEnum": true
        },
        "updateFrequency": {
          "$ref": "#/definitions/v1.skill.Manifest.FlashBriefingUpdateFrequency",
          "x-isEnum": true
        },
        "vuiPreamble": {
          "type": "string",
          "description": "A short introduction for the feed that Alexa reads to the customer before the feed contents. Should start with \"In\" or \"From\".",
          "maxLength": 70,
          "pattern": "^[^<]*$"
        },
        "isDefault": {
          "type": "boolean",
          "description": "True if this should be the default feed to be enabled when customer enables the skill false otherwise."
        }
      }
    },
    "v1.skill.Manifest.FlashBriefingGenre": {
      "type": "string",
      "description": "Type or subject of the content in the feed.",
      "enum": [
        "HEADLINE_NEWS",
        "BUSINESS",
        "POLITICS",
        "ENTERTAINMENT",
        "TECHNOLOGY",
        "HUMOR",
        "LIFESTYLE",
        "SPORTS",
        "SCIENCE",
        "HEALTH_AND_FITNESS",
        "ARTS_AND_CULTURE",
        "PRODUCTIVITY_AND_UTILITIES",
        "OTHER"
      ]
    },
    "v1.skill.Manifest.FlashBriefingContentType": {
      "type": "string",
      "description": "Format of the feed content.",
      "enum": [
        "TEXT",
        "AUDIO"
      ]
    },
    "v1.skill.Manifest.FlashBriefingUpdateFrequency": {
      "type": "string",
      "description": "Tells how often the feed has new content.",
      "enum": [
        "HOURLY",
        "DAILY",
        "WEEKLY"
      ]
    },
    "v1.skill.Manifest.CustomApis": {
      "type": "object",
      "properties": {
        "_targetRuntimes": {
          "type": "array",
          "description": "Defines the set of target runtimes for this skill.",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.Custom.TargetRuntime"
          },
          "minItems": 1
        },
        "locales": {
          "type": "object",
          "description": "Object that contains <locale> Objects for each supported locale.",
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.Manifest.CustomLocalizedInformation"
          }
        },
        "regions": {
          "type": "object",
          "description": "Contains an array of the supported <region> Objects.",
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.Manifest.Region"
          }
        },
        "endpoint": {
          "$ref": "#/definitions/v1.skill.Manifest.SkillManifestEndpoint"
        },
        "interfaces": {
          "type": "array",
          "description": "Defines the structure for interfaces supported by the custom api of the skill.",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.Interface"
          }
        },
        "tasks": {
          "type": "array",
          "description": "List of provided tasks.",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.CustomTask"
          },
          "minItems": 1
        },
        "connections": {
          "$ref": "#/definitions/v1.skill.Manifest.CustomConnections"
        },
        "dialogManagement": {
          "$ref": "#/definitions/v1.skill.Manifest.DialogManagement"
        },
        "appLink": {
          "$ref": "#/definitions/v1.skill.Manifest.AppLink"
        }
      },
      "description": "Defines the structure for custom api of the skill."
    },
    "v1.skill.Manifest.Custom.SuppressedInterface": {
      "type": "string",
      "enum": [
        "AudioPlayer",
        "PlaybackController",
        "Display",
        "VideoPlayer",
        "GameEngine",
        "GadgetController",
        "CanHandleIntentRequest",
        "CanFulfillIntentRequest",
        "AlexaPresentationApl",
        "AlexaPresentationHtml",
        "AlexaDataStore",
        "AlexaDataStorePackageManager",
        "PhotoCaptureController",
        "VideoCaptureController",
        "UploadController",
        "CustomInterface",
        "AlexaAugmentationEffectsController"
      ]
    },
    "v1.skill.Manifest.CustomLocalizedInformation": {
      "type": "object",
      "properties": {
        "dialogManagement": {
          "$ref": "#/definitions/v1.skill.Manifest.CustomLocalizedInformationDialogManagement"
        }
      },
      "description": "Defines the localized custom api information."
    },
    "v1.skill.Manifest.CustomLocalizedInformationDialogManagement": {
      "type": "object",
      "properties": {
        "sessionStartDelegationStrategy": {
          "$ref": "#/definitions/v1.skill.Manifest.CustomDialogManagement.SessionStartDelegationStrategy"
        }
      },
      "description": "Defines locale-specific dialog-management configuration for a skill."
    },
    "v1.skill.Manifest.CustomDialogManagement.SessionStartDelegationStrategy": {
      "type": "object",
      "required": [
        "target"
      ],
      "properties": {
        "target": {
          "type": "string"
        }
      },
      "description": "Specifies the initial dialog manager to field requests when a new skill session starts. If absent, this is assumed to be the default \"skill\" target"
    },
    "v1.skill.Manifest.Custom.TargetRuntime": {
      "type": "object",
      "required": [
        "type"
      ],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "x-isDiscriminator": true
        }
      },
      "description": "Discriminator for target runtime objects."
    },
    "v1.skill.Manifest.Custom.TargetRuntimeType": {
      "type": "string",
      "enum": [
        "DEVICE"
      ]
    },
    "v1.skill.Manifest.Custom.TargetRuntimeDevice": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.Manifest.Custom.TargetRuntime"
        }
      ],
      "description": "The type of target runtime.",
      "x-discriminator-value": "DEVICE"
    },
    "v1.skill.Manifest.CustomConnections": {
      "type": "object",
      "properties": {
        "requires": {
          "type": "array",
          "description": "List of required connections.",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.Custom.Connection"
          },
          "minItems": 1
        },
        "provides": {
          "type": "array",
          "description": "List of provided connections.",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.Custom.Connection"
          },
          "minItems": 1
        }
      },
      "description": "Supported connections."
    },
    "v1.skill.Manifest.Custom.Connection": {
      "type": "object",
      "required": [
        "name",
        "payload"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the connection.",
          "minLength": 1
        },
        "payload": {
          "$ref": "#/definitions/v1.skill.Manifest.ConnectionsPayload"
        }
      },
      "description": "Skill connection object."
    },
    "v1.skill.Manifest.ConnectionsPayload": {
      "type": "object",
      "required": [
        "type",
        "version"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the payload.",
          "minLength": 1
        },
        "version": {
          "type": "string",
          "description": "Version of the payload.",
          "minLength": 1
        }
      },
      "description": "Payload of the connection."
    },
    "v1.skill.Manifest.DialogManagement": {
      "type": "object",
      "required": [
        "dialogManagers"
      ],
      "properties": {
        "dialogManagers": {
          "type": "array",
          "description": "List of dialog managers configured by the skill",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.DialogManager"
          }
        },
        "sessionStartDelegationStrategy": {
          "$ref": "#/definitions/v1.skill.Manifest.DialogDelegationStrategy"
        }
      },
      "description": "Defines the dialog management configuration for the skill."
    },
    "v1.skill.Manifest.DialogDelegationStrategy": {
      "type": "object",
      "required": [
        "target"
      ],
      "properties": {
        "target": {
          "type": "string"
        }
      },
      "description": "Specifies the initial dialog manager to field requests when a new skill session starts. If absent this is assumed to be the default \\\"skill\\\" target."
    },
    "v1.skill.Manifest.DialogManager": {
      "type": "object",
      "required": [
        "type"
      ],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of DialogManager.",
          "x-isDiscriminator": true
        }
      },
      "description": "Individual dialog manager defined for the skill."
    },
    "v1.skill.Manifest.AMAZONConversationsDialogManager": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.Manifest.DialogManager"
        }
      ],
      "description": "The type of dialog manager:  * AMAZON.Conversations - The Alexa Conversations (Coltrane) model for this skill.",
      "x-discriminator-value": "AMAZON.Conversations"
    },
    "v1.skill.Manifest.Interface": {
      "type": "object",
      "required": [
        "type"
      ],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "x-isDiscriminator": true
        }
      }
    },
    "v1.skill.Manifest.InterfaceType": {
      "type": "string",
      "description": "Name of the interface.",
      "enum": [
        "AUDIO_PLAYER",
        "VIDEO_APP",
        "RENDER_TEMPLATE",
        "GAME_ENGINE",
        "GADGET_CONTROLLER",
        "CAN_FULFILL_INTENT_REQUEST",
        "ALEXA_PRESENTATION_APL",
        "ALEXA_CAMERA_PHOTO_CAPTURE_CONTROLLER",
        "ALEXA_CAMERA_VIDEO_CAPTURE_CONTROLLER",
        "ALEXA_FILE_MANAGER_UPLOAD_CONTROLLER",
        "CUSTOM_INTERFACE",
        "ALEXA_AUGMENTATION_EFFECTS_CONTROLLER",
        "APP_LINKS",
        "ALEXA_EXTENSION",
        "APP_LINKS_V2"
      ]
    },
    "v1.skill.Manifest.AudioInterface": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.Manifest.Interface"
        }
      ],
      "x-discriminator-value": "AUDIO_PLAYER"
    },
    "v1.skill.Manifest.VideoAppInterface": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.Manifest.Interface"
        }
      ],
      "x-discriminator-value": "VIDEO_APP"
    },
    "v1.skill.Manifest.DisplayInterface": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.Manifest.Interface"
        },
        {
          "type": "object",
          "properties": {
            "minimumTemplateVersion": {
              "$ref": "#/definitions/v1.skill.Manifest.DisplayInterfaceTemplateVersion"
            },
            "minimumApmlVersion": {
              "$ref": "#/definitions/v1.skill.Manifest.DisplayInterfaceApmlVersion"
            }
          }
        }
      ],
      "description": "Used to declare that the skill uses the Display interface. When a skill declares that it uses the Display interface the Display interface will be passed in the supportedInterfaces section of devices which meet any of the required minimum version attributes specified in the manifest. If the device does not meet any of the minimum versions specified in the manifest the Display interface will not be present in the supportedInterfaces section. If neither the minimumTemplateVersion nor the minimumApmlVersion attributes are specified in the manifes then the minimumTemplateVersion is defaulted to 1.0 and apmlVersion is omitted.",
      "x-discriminator-value": "RENDER_TEMPLATE"
    },
    "v1.skill.Manifest.AppLinkInterface": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.Manifest.Interface"
        }
      ],
      "x-discriminator-value": "APP_LINKS"
    },
    "v1.skill.Manifest.AppLinkV2Interface": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.Manifest.Interface"
        }
      ],
      "x-discriminator-value": "APP_LINKS_V2"
    },
    "v1.skill.Manifest.GameEngineInterface": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.Manifest.Interface"
        }
      ],
      "x-discriminator-value": "GAME_ENGINE"
    },
    "v1.skill.Manifest.GadgetControllerInterface": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.Manifest.Interface"
        }
      ],
      "description": "Skills using Gadget Controller can send directives to Echo Buttons. This is a legacy interface specific to Echo Buttons.",
      "x-discriminator-value": "GADGET_CONTROLLER"
    },
    "v1.skill.Manifest.AlexaPresentationAplInterface": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.Manifest.Interface"
        },
        {
          "type": "object",
          "properties": {
            "supportedViewports": {
              "type": "array",
              "description": "List of supported viewports.",
              "items": {
                "$ref": "#/definitions/v1.skill.Manifest.ViewportSpecification"
              }
            }
          }
        }
      ],
      "description": "Used to declare that the skill uses the Alexa.Presentation.APL interface.",
      "x-discriminator-value": "ALEXA_PRESENTATION_APL"
    },
    "v1.skill.Manifest.AlexaPresentationHtmlInterface": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.Manifest.Interface"
        }
      ],
      "description": "Used to declare that the skill uses the Alexa.Presentation.HTML interface.",
      "x-discriminator-value": "ALEXA_PRESENTATION_HTML"
    },
    "v1.skill.Manifest.ExtensionRequest": {
      "type": "object",
      "required": [
        "uri"
      ],
      "properties": {
        "uri": {
          "type": "string",
          "description": "The extension's URI.",
          "pattern": "^(alexaext:smartmotion:10|alexaext:entitysensing:10|alexaext:datastore:10|alexaext:smartmotor:10)$"
        }
      },
      "description": "Represents a request for a runtime extension. Extensions are optional enhancements to a runtime that provide additional sources of data, commands, and event handlers."
    },
    "v1.skill.Manifest.ExtensionInitializationRequest": {
      "type": "object",
      "required": [
        "uri"
      ],
      "properties": {
        "uri": {
          "type": "string",
          "description": "The extension's URI.",
          "pattern": "^(alexaext:smartmotion:10|alexaext:entitysensing:10)$"
        },
        "settings": {
          "type": "object",
          "description": "Default initialization extension settings.",
          "properties": {},
          "x-jsonSchema-additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "Represents a request to automatically initialize an extension by a runtime."
    },
    "v1.skill.Manifest.CustomTask": {
      "type": "object",
      "required": [
        "name",
        "version"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the task.",
          "minLength": 1
        },
        "version": {
          "type": "string",
          "description": "Version of the task.",
          "minLength": 1
        }
      },
      "description": "Defines the name and version of the task that the skill wants to handle."
    },
    "v1.skill.Manifest.DisplayInterfaceTemplateVersion": {
      "type": "string",
      "description": "The minimum version of pre-defined templates supported by the skill. If a device does not support a version greater than or equal to the version specified her then templateVersion will not be passed inside the Display interface in the ASK request.",
      "enum": [
        "1"
      ]
    },
    "v1.skill.Manifest.DisplayInterfaceApmlVersion": {
      "type": "string",
      "description": "The minimum version of the APML specification supported by the skill. If a device does not support a version greater than or equal to the version specified her then apmlVersion will not be passed inside the Display interface in the ASK request.",
      "enum": [
        "0.2"
      ]
    },
    "v1.skill.Manifest.ViewportSpecification": {
      "type": "object",
      "required": [
        "mode",
        "shape"
      ],
      "properties": {
        "mode": {
          "$ref": "#/definitions/v1.skill.Manifest.ViewportMode",
          "x-isEnum": true
        },
        "shape": {
          "$ref": "#/definitions/v1.skill.Manifest.ViewportShape",
          "x-isEnum": true
        },
        "minWidth": {
          "type": "integer",
          "description": "Defines the minimum width of viewport that comply with this specification.",
          "minimum": 1
        },
        "maxWidth": {
          "type": "integer",
          "description": "Defines the maximum width of viewport that comply with this specification.",
          "minimum": 1
        },
        "minHeight": {
          "type": "integer",
          "description": "Defines the minimum height of viewport that comply with this specification.",
          "minimum": 1
        },
        "maxHeight": {
          "type": "integer",
          "description": "Defines the maximum height of viewport that comply with this specification.",
          "minimum": 1
        }
      },
      "description": "Defines a viewport specification."
    },
    "v1.skill.Manifest.ViewportMode": {
      "type": "string",
      "description": "Defines the mode of viewport that comply with this specification. E.g. HUB TV.",
      "enum": [
        "HUB",
        "TV",
        "MOBILE",
        "PC",
        "AUTO"
      ]
    },
    "v1.skill.Manifest.ViewportShape": {
      "type": "string",
      "description": "Defines the shape of the device's viewport.",
      "enum": [
        "RECTANGLE",
        "ROUND"
      ]
    },
    "v1.skill.Manifest.SmartHomeApis": {
      "type": "object",
      "required": [
        "protocolVersion"
      ],
      "properties": {
        "regions": {
          "type": "object",
          "description": "Contains an array of the supported <region> Objects.",
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.Manifest.LambdaRegion"
          }
        },
        "endpoint": {
          "$ref": "#/definitions/v1.skill.Manifest.LambdaEndpoint"
        },
        "protocolVersion": {
          "$ref": "#/definitions/v1.skill.Manifest.SmartHomeProtocol",
          "x-isEnum": true
        },
        "supportedControls": {
          "$ref": "#/definitions/v1.skill.Manifest.SupportedControls"
        }
      },
      "description": "Defines the structure of smart home api of the skill."
    },
    "v1.skill.Manifest.SupportedControls": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v1.skill.Manifest.SupportedControlsType",
          "x-isEnum": true
        }
      },
      "description": "(Optional) Contains the attributes specifying additional functionalities supported by the skill."
    },
    "v1.skill.Manifest.SupportedControlsType": {
      "type": "string",
      "description": "Type of the supported functionality.",
      "enum": [
        "REMOTE_VEHICLE_CONTROL"
      ]
    },
    "v1.skill.Manifest.LambdaEndpoint": {
      "type": "object",
      "required": [
        "uri"
      ],
      "properties": {
        "uri": {
          "type": "string",
          "description": "Amazon Resource Name (ARN) of the Lambda function.",
          "pattern": "^(arn)"
        },
        "sslCertificateType": {
          "$ref": "#/definitions/v1.skill.Manifest.LambdaSSLCertificateType",
          "x-isEnum": true
        }
      },
      "description": "Contains the uri field. This sets the global default endpoint."
    },
    "v1.skill.Manifest.LambdaSSLCertificateType": {
      "type": "string",
      "description": "The SSL certificate type of the skill's HTTPS endpoint. Only valid for HTTPS endpoint not for AWS Lambda ARN.",
      "enum": [
        "SelfSigned",
        "Wildcard",
        "Trusted"
      ]
    },
    "v1.skill.Manifest.LambdaRegion": {
      "type": "object",
      "required": [
        "endpoint"
      ],
      "properties": {
        "endpoint": {
          "$ref": "#/definitions/v1.skill.Manifest.LambdaEndpoint"
        }
      },
      "description": "Defines the structure of a regional information."
    },
    "v1.skill.Manifest.SmartHomeProtocol": {
      "type": "string",
      "description": "Version of the Smart Home API. Default and recommended value is '3'. You may create a skill with version '2' for testing migration to version '3', but a skill submission using version '2' will not be certified.",
      "enum": [
        "2",
        "2.0",
        "3",
        "3.0"
      ]
    },
    "v1.skill.Manifest.VideoApisLocale": {
      "type": "object",
      "required": [
        "videoProviderTargetingNames"
      ],
      "properties": {
        "videoProviderTargetingNames": {
          "type": "array",
          "description": "Defines the video provider's targeting name.",
          "items": {
            "type": "string"
          },
          "minItems": 1
        },
        "videoProviderLogoUri": {
          "type": "string"
        },
        "fireTvCatalogIngestion": {
          "$ref": "#/definitions/v1.skill.Manifest.VideoFireTvCatalogIngestion"
        },
        "features": {
          "type": "array",
          "description": "Defines the array of video features for this skill.",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.VideoFeature"
          }
        },
        "promptNames": {
          "type": "array",
          "description": "Name to use when Alexa renders the video skill name in a prompt to the user",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.VideoPromptName"
          }
        }
      },
      "description": "Defines the structure for localized video api information."
    },
    "v1.skill.Manifest.VideoFeature": {
      "type": "object",
      "required": [
        "name",
        "version"
      ],
      "discriminator": "name",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "x-isDiscriminator": true
        }
      },
      "description": "A feature of an Alexa skill."
    },
    "v1.skill.Manifest.VoiceProfileFeature": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.Manifest.VideoFeature"
        }
      ],
      "description": "Feature for allowing for querying for available partner voice profiles, linking Alexa Speaker ID profiles to partner speaker profiles, and sending partner speaker profiles in directives.",
      "x-discriminator-value": "VIDEO_VOICE_PROFILE"
    },
    "v1.skill.Manifest.VideoPromptName": {
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "type": {
          "$ref": "#/definitions/v1.skill.Manifest.VideoPromptNameType",
          "x-isEnum": true
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1.skill.Manifest.VideoPromptNameType": {
      "type": "string",
      "enum": [
        "Default"
      ]
    },
    "v1.skill.Manifest.VideoFireTvCatalogIngestion": {
      "type": "object",
      "properties": {
        "fireTvCatalogIngestionSourceId": {
          "type": "string"
        },
        "isFireTvCatalogIngestionEnabled": {
          "type": "boolean"
        }
      }
    },
    "v1.skill.Manifest.VideoCatalogInfo": {
      "type": "object",
      "required": [
        "sourceId"
      ],
      "properties": {
        "sourceId": {
          "type": "string"
        }
      }
    },
    "v1.skill.Manifest.VideoApis": {
      "type": "object",
      "properties": {
        "regions": {
          "type": "object",
          "description": "Defines the structure for region information.",
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.Manifest.VideoRegion"
          }
        },
        "locales": {
          "type": "object",
          "description": "Defines the structure for the locale specific video api information.",
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.Manifest.VideoApisLocale"
          }
        },
        "endpoint": {
          "$ref": "#/definitions/v1.skill.Manifest.LambdaEndpoint"
        },
        "countries": {
          "type": "object",
          "description": "Object that contains <country> Objects for each supported country.",
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.Manifest.VideoCountryInfo"
          }
        }
      },
      "description": "Defines the structure for video api of the skill."
    },
    "v1.skill.Manifest.VideoRegion": {
      "type": "object",
      "required": [
        "endpoint"
      ],
      "properties": {
        "endpoint": {
          "$ref": "#/definitions/v1.skill.Manifest.SkillManifestEndpoint"
        },
        "upchannel": {
          "type": "array",
          "description": "The channel through which the partner skill can communicate to Alexa.",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.UpChannelItems"
          }
        }
      },
      "description": "Defines the structure for endpoint information."
    },
    "v1.skill.Manifest.UpChannelItems": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Use \\\"SNS\\\" for this field."
        },
        "uri": {
          "type": "string",
          "description": "SNS Amazon Resource Name (ARN) for video skill through which video partner can send events to Alexa.",
          "pattern": "^arn:aws:sns"
        }
      }
    },
    "v1.skill.Manifest.VideoCountryInfo": {
      "type": "object",
      "properties": {
        "catalogInformation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.VideoCatalogInfo"
          }
        }
      },
      "description": "Defines the structure of per-country video info in the skill manifest."
    },
    "v1.skill.Manifest.AlexaForBusinessApis": {
      "type": "object",
      "properties": {
        "regions": {
          "type": "object",
          "description": "Contains an array of the supported <region> Objects.",
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.Manifest.Region"
          }
        },
        "endpoint": {
          "$ref": "#/definitions/v1.skill.Manifest.SkillManifestEndpoint"
        },
        "interfaces": {
          "type": "array",
          "description": "Contains the list of supported interfaces.",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.AlexaForBusinessInterface"
          }
        }
      },
      "description": "Defines the structure of alexaForBusiness api in the skill manifest."
    },
    "v1.skill.Manifest.AlexaForBusinessInterface": {
      "type": "object",
      "required": [
        "namespace",
        "requests",
        "version"
      ],
      "properties": {
        "namespace": {
          "type": "string",
          "description": "Name of the interface."
        },
        "version": {
          "$ref": "#/definitions/v1.skill.Manifest.Version",
          "x-isEnum": true
        },
        "requests": {
          "type": "array",
          "description": "Contains a list of requests/messages that skill can handle.",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.AlexaForBusinessInterfaceRequest"
          }
        }
      }
    },
    "v1.skill.Manifest.Version": {
      "type": "string",
      "description": "Version of the interface.",
      "enum": [
        "1.0"
      ]
    },
    "v1.skill.Manifest.AlexaForBusinessInterfaceRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/v1.skill.Manifest.AlexaForBusinessInterfaceRequestName",
          "x-isEnum": true
        }
      }
    },
    "v1.skill.Manifest.AlexaForBusinessInterfaceRequestName": {
      "type": "string",
      "description": "Name of the request.",
      "enum": [
        "Search",
        "Create",
        "Update"
      ]
    },
    "v1.skill.Manifest.HealthInterface": {
      "type": "object",
      "required": [
        "namespace"
      ],
      "properties": {
        "namespace": {
          "type": "string",
          "description": "Name of the interface."
        },
        "version": {
          "type": "string",
          "description": "defines the version of skill interface."
        }
      }
    },
    "v1.skill.Manifest.HouseHoldList": {
      "type": "object",
      "description": "Defines the structure of household list api in the skill manifest."
    },
    "v1.skill.Manifest.MusicApis": {
      "type": "object",
      "properties": {
        "regions": {
          "type": "object",
          "description": "Contains an array of the supported <region> Objects.",
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.Manifest.LambdaRegion"
          }
        },
        "endpoint": {
          "$ref": "#/definitions/v1.skill.Manifest.LambdaEndpoint"
        },
        "capabilities": {
          "type": "array",
          "description": "Defines the structure of music capabilities information in the skill manifest.",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.MusicCapability"
          }
        },
        "interfaces": {
          "type": "array",
          "description": "A list of music skill interfaces that your skill supports.",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.MusicInterfaces"
          }
        },
        "locales": {
          "type": "object",
          "description": "Defines the structure of locale specific music information in the skill manifest.",
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.Manifest.LocalizedMusicInfo"
          }
        },
        "contentTypes": {
          "type": "array",
          "description": "List of the type of content to be provided by the music skill.",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.MusicContentType"
          }
        }
      },
      "description": "Defines the structure of music api in the skill manifest."
    },
    "v1.skill.Manifest.MusicCapability": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "description": "Namespace of music skill api."
        },
        "name": {
          "type": "string",
          "description": "Name of music skill api."
        },
        "version": {
          "type": "string",
          "description": "Version of music skill api."
        }
      }
    },
    "v1.skill.Manifest.MusicInterfaces": {
      "type": "object",
      "required": [
        "namespace"
      ],
      "properties": {
        "namespace": {
          "type": "string",
          "description": "Name of the interface."
        },
        "version": {
          "type": "string",
          "description": "Version of the interface."
        },
        "requests": {
          "type": "array",
          "description": "Contains a list of requests/messages that skill can handle.",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.MusicRequest"
          }
        }
      }
    },
    "v1.skill.Manifest.MusicRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the request."
        }
      }
    },
    "v1.skill.Manifest.LocalizedMusicInfo": {
      "type": "object",
      "properties": {
        "promptName": {
          "type": "string",
          "description": "Name to be used when Alexa renders the music skill name."
        },
        "aliases": {
          "type": "array",
          "description": "Defines the structure of the music prompt name information in the skill manifest.",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.MusicAlias"
          },
          "minItems": 1
        },
        "features": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.MusicFeature"
          }
        },
        "wordmarkLogos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.MusicWordmark"
          }
        }
      },
      "description": "Defines the structure of localized music information in the skill manifest."
    },
    "v1.skill.Manifest.MusicAlias": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Alias name to be associated with the music skill."
        }
      }
    },
    "v1.skill.Manifest.MusicFeature": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Feature name to be associated with the music skill."
        }
      }
    },
    "v1.skill.Manifest.MusicWordmark": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "description": "Wordmark logo to be used by devices with displays."
        }
      }
    },
    "v1.skill.Manifest.MusicContentType": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/v1.skill.Manifest.MusicContentName",
          "x-isEnum": true
        }
      },
      "description": "Defines the structure for content that can be provided by a music skill."
    },
    "v1.skill.Manifest.MusicContentName": {
      "type": "string",
      "description": "Name of the content type that's supported for the music skill.",
      "enum": [
        "ON_DEMAND",
        "RADIO",
        "PODCAST"
      ]
    },
    "v1.skill.Manifest.AppLink": {
      "type": "object",
      "properties": {
        "linkedApplications": {
          "type": "array",
          "description": "Allows developers to declare their Skill will use Alexa App Links, and list relevant apps. This field is required when using the APP_LINK interface.",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.LinkedApplication"
          },
          "minItems": 1
        },
        "linkedWebDomains": {
          "type": "array",
          "description": "Allow developer to decalre their skill to link to the declared web domains.",
          "items": {
            "type": "string",
            "minLength": 1
          },
          "minItems": 1
        },
        "linkedAndroidCommonIntents": {
          "type": "array",
          "description": "Allow developer to declare their skill to link to the speicified android common intents.",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.LinkedAndroidCommonIntent"
          },
          "minItems": 1
        },
        "linkedCommonSchemes": {
          "$ref": "#/definitions/v1.skill.Manifest.LinkedCommonSchemes"
        }
      },
      "description": "Details required for app linking use cases."
    },
    "v1.skill.Manifest.LinkedApplication": {
      "type": "object",
      "required": [
        "catalogInfo",
        "friendlyName"
      ],
      "properties": {
        "catalogInfo": {
          "$ref": "#/definitions/v1.skill.Manifest.CatalogInfo"
        },
        "customSchemes": {
          "type": "array",
          "description": "Supported schemes",
          "items": {
            "type": "string",
            "minLength": 1
          },
          "minItems": 1
        },
        "domains": {
          "type": "array",
          "description": "Supported domains",
          "items": {
            "type": "string",
            "minLength": 1
          },
          "minItems": 1
        },
        "friendlyName": {
          "$ref": "#/definitions/v1.skill.Manifest.FriendlyName"
        },
        "androidCustomIntents": {
          "type": "array",
          "description": "Supported android custom intent",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.AndroidCustomIntent"
          },
          "minItems": 1
        }
      },
      "description": "Applications associated with the skill."
    },
    "v1.skill.Manifest.LinkedCommonSchemes": {
      "type": "object",
      "properties": {
        "IOS_APP_STORE": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.IOSAppStoreCommonSchemeName"
          },
          "minItems": 1
        },
        "GOOGLE_PLAY_STORE": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.PlayStoreCommonSchemeName"
          },
          "minItems": 1
        }
      },
      "description": "Allow developer to declare their skill to link to the speicified common schemes"
    },
    "v1.skill.Manifest.IOSAppStoreCommonSchemeName": {
      "type": "string",
      "description": "supported common schemes for IOS_APP_STORE. MAPS is for \"maps:\" and TEL is for \"tel:\".",
      "enum": [
        "MAPS",
        "TEL"
      ]
    },
    "v1.skill.Manifest.PlayStoreCommonSchemeName": {
      "type": "string",
      "description": "supported common schemes for GOOGLE_PLAY_STORE. MAPS is for \"maps:\" and TEL is for \"tel:\".",
      "enum": [
        "MAPS",
        "TEL"
      ]
    },
    "v1.skill.Manifest.LinkedAndroidCommonIntent": {
      "type": "object",
      "required": [
        "catalogType",
        "intentName"
      ],
      "properties": {
        "intentName": {
          "$ref": "#/definitions/v1.skill.Manifest.AndroidCommonIntentName",
          "x-isEnum": true
        },
        "catalogType": {
          "$ref": "#/definitions/v1.skill.Manifest.CatalogName",
          "x-isEnum": true
        }
      },
      "description": "Android common intents associated with the skill"
    },
    "v1.skill.Manifest.CatalogName": {
      "type": "string",
      "enum": [
        "IOS_APP_STORE",
        "GOOGLE_PLAY_STORE"
      ]
    },
    "v1.skill.Manifest.AndroidCommonIntentName": {
      "type": "string",
      "description": "Supported android common intent. Each of the value maps to a common intent defined in https://developer.android.com/guide/components/intents-common.",
      "enum": [
        "SHOW_IN_MAP",
        "ADD_CALENDAR_EVENT",
        "PLAY_MEDIA",
        "START_PHONE_CALL",
        "OPEN_SETTINGS"
      ]
    },
    "v1.skill.Manifest.AndroidCustomIntent": {
      "type": "object",
      "properties": {
        "component": {
          "type": "string",
          "description": "android component name",
          "minLength": 1
        },
        "action": {
          "type": "string",
          "description": "android intent action",
          "minLength": 1
        }
      },
      "description": "Android custom intent"
    },
    "v1.skill.Manifest.CatalogInfo": {
      "type": "object",
      "required": [
        "identifier",
        "type"
      ],
      "properties": {
        "type": {
          "$ref": "#/definitions/v1.skill.Manifest.CatalogType",
          "x-isEnum": true
        },
        "identifier": {
          "type": "string",
          "description": "Identifier when accessing app in store.",
          "minLength": 1
        }
      },
      "description": "Details about how the app is listed on app store catalogs."
    },
    "v1.skill.Manifest.CatalogType": {
      "type": "string",
      "description": "Supported catalog",
      "enum": [
        "IOS_APP_STORE",
        "GOOGLE_PLAY_STORE"
      ]
    },
    "v1.skill.Manifest.FriendlyName": {
      "type": "object",
      "required": [
        "default"
      ],
      "properties": {
        "default": {
          "type": "string",
          "description": "Default app name",
          "minLength": 1
        },
        "localizedNames": {
          "type": "array",
          "description": "Localized app names.",
          "items": {
            "$ref": "#/definitions/v1.skill.Manifest.LocalizedName"
          },
          "minItems": 1
        }
      },
      "description": "Localized App name"
    },
    "v1.skill.Manifest.LocalizedName": {
      "type": "object",
      "required": [
        "locale",
        "name"
      ],
      "properties": {
        "locale": {
          "type": "string",
          "description": "locale",
          "minLength": 1,
          "pattern": "^(en-US|en-GB|en-IN|ja-JP|de-DE|en-CA|en-AU|fr-FR|fr-CA|it-IT|es-ES|es-MX|pt-BR|hi-IN|es-US|ar-SA)$"
        },
        "name": {
          "type": "string",
          "description": "app name",
          "minLength": 1
        }
      },
      "description": "Localized app name"
    },
    "v1.skill.Manifest.DemandResponseApis": {
      "type": "object",
      "properties": {
        "regions": {
          "type": "object",
          "description": "Contains an array of the supported <region> Objects.",
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.Manifest.LambdaRegion"
          }
        },
        "endpoint": {
          "$ref": "#/definitions/v1.skill.Manifest.LambdaEndpoint"
        },
        "enrollmentUrl": {
          "type": "string",
          "description": "Defines the url for enrolling into a demand response program."
        }
      },
      "description": "Defines the structure for demand response api of the skill."
    },
    "v1.skill.Manifest.PaidSkillInformation": {
      "type": "object",
      "required": [
        "pricing",
        "taxInformation"
      ],
      "properties": {
        "pricing": {
          "type": "object",
          "description": "Defines the structure for marketplace specific pricing information in the skill manifest",
          "minProperties": 1,
          "additionalProperties": {
            "type": "array",
            "description": "List of paid skill product pricing information.",
            "items": {
              "$ref": "#/definitions/v1.skill.Manifest.MarketplacePricing"
            },
            "maxItems": 1,
            "minItems": 1
          }
        },
        "taxInformation": {
          "$ref": "#/definitions/v1.skill.Manifest.TaxInformation"
        }
      },
      "description": "Defines the structure of the paid skill information of the skill."
    },
    "v1.skill.Manifest.CustomProductPrompts": {
      "type": "object",
      "required": [
        "purchaseConfirmationDescription",
        "purchasePromptDescription"
      ],
      "properties": {
        "purchasePromptDescription": {
          "type": "string",
          "description": "Description of the paid skill product heard before customer is prompted for purchase."
        },
        "purchaseConfirmationDescription": {
          "type": "string",
          "description": "Description of the paid skill product that displays when the paid skill is purchased."
        }
      },
      "description": "Custom prompts used for paid skill product purchasing options. Supports Speech Synthesis Markup Language (SSML), which can be used to control pronunciation, intonation, timing, and emotion."
    },
    "v1.skill.Manifest.MarketplacePricing": {
      "type": "object",
      "required": [
        "currency",
        "offerType",
        "price"
      ],
      "properties": {
        "offerType": {
          "$ref": "#/definitions/v1.skill.Manifest.OfferType",
          "x-isEnum": true
        },
        "price": {
          "type": "number",
          "description": "Defines the price of a paid skill product. The price should be your suggested price, not including any VAT or similar taxes. Taxes are included in the final price to end users."
        },
        "currency": {
          "$ref": "#/definitions/v1.skill.Manifest.Currency",
          "x-isEnum": true
        },
        "freeTrialInformation": {
          "$ref": "#/definitions/v1.skill.Manifest.FreeTrialInformation"
        },
        "subscriptionInformation": {
          "$ref": "#/definitions/v1.skill.Manifest.SubscriptionInformation"
        }
      },
      "description": "Paid skill product pricing information."
    },
    "v1.skill.Manifest.OfferType": {
      "type": "string",
      "description": "The type of the offer.",
      "enum": [
        "SUBSCRIPTION",
        "ENTITLEMENT"
      ]
    },
    "v1.skill.Manifest.Currency": {
      "type": "string",
      "format": "ISO 4217 format",
      "description": "Currency to use for paid skill product.",
      "enum": [
        "USD"
      ]
    },
    "v1.skill.Manifest.TaxInformation": {
      "type": "object",
      "required": [
        "category"
      ],
      "properties": {
        "category": {
          "$ref": "#/definitions/v1.skill.Manifest.TaxInformationCategory",
          "x-isEnum": true
        }
      },
      "description": "Defines the structure for paid skill product tax information."
    },
    "v1.skill.Manifest.TaxInformationCategory": {
      "type": "string",
      "description": "The tax category that best describes the paid skill product.",
      "enum": [
        "SOFTWARE",
        "STREAMING_AUDIO",
        "STREAMING_RADIO",
        "INFORMATION_SERVICES",
        "VIDEO",
        "PERIODICALS",
        "NEWSPAPERS"
      ]
    },
    "v1.skill.Manifest.SubscriptionInformation": {
      "type": "object",
      "required": [
        "subscriptionPaymentFrequency"
      ],
      "properties": {
        "subscriptionPaymentFrequency": {
          "$ref": "#/definitions/v1.skill.Manifest.SubscriptionPaymentFrequency",
          "x-isEnum": true
        }
      },
      "description": "Defines the structure for paid skill product subscription information."
    },
    "v1.skill.Manifest.SubscriptionPaymentFrequency": {
      "type": "string",
      "description": "The frequency in which payments are collected for the subscription.",
      "enum": [
        "MONTHLY",
        "YEARLY"
      ]
    },
    "v1.skill.Manifest.FreeTrialInformation": {
      "type": "object",
      "required": [
        "freeTrialDuration"
      ],
      "properties": {
        "freeTrialDuration": {
          "type": "string",
          "format": "ISO_8601#Durations format",
          "description": "Defines the free trial period for the paid skill product, in ISO_8601#Durations format.",
          "pattern": "^P(0?[1-9]|[1-2][0-9]|3[0-1])D$"
        }
      },
      "description": "Defines the structure for paid skill product free trial information."
    },
    "v1.skill.metrics.GetMetricDataResponse": {
      "type": "object",
      "required": [
        "metric",
        "timestamps",
        "values"
      ],
      "properties": {
        "metric": {
          "type": "string",
          "description": "The name of metric which customer requested."
        },
        "timestamps": {
          "type": "array",
          "description": "The timestamps for the data points.",
          "items": {
            "type": "string",
            "format": "date-time"
          }
        },
        "values": {
          "type": "array",
          "description": "The data points for the metric corresponding to Timestamps.",
          "items": {
            "type": "number"
          }
        },
        "nextToken": {
          "type": "string",
          "description": "A token that marks the next batch of returned results."
        }
      },
      "description": "Response object for the API call which contains metrics data."
    },
    "v1.skill.metrics.Period": {
      "type": "string",
      "description": "The aggregation period to use when retrieving the metric, follows ISO_8601#Durations format.",
      "enum": [
        "SINGLE",
        "PT15M",
        "PT1H",
        "P1D"
      ]
    },
    "v1.skill.metrics.Metric": {
      "type": "string",
      "description": "A distinct set of logic which predictably returns a set of data.",
      "enum": [
        "uniqueCustomers",
        "totalEnablements",
        "totalUtterances",
        "successfulUtterances",
        "failedUtterances",
        "totalSessions",
        "successfulSessions",
        "incompleteSessions",
        "userEndedSessions",
        "skillEndedSessions"
      ]
    },
    "v1.skill.metrics.stageForMetric": {
      "type": "string",
      "description": "The stage of the skill (live, development).",
      "enum": [
        "live",
        "development"
      ]
    },
    "v1.skill.metrics.SkillType": {
      "type": "string",
      "description": "The type of the skill (custom, smartHome and flashBriefing).",
      "enum": [
        "custom",
        "smartHome",
        "flashBriefing"
      ]
    },
    "v1.skill.Private.ListPrivateDistributionAccountsResponse": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/v1.Links"
        },
        "privateDistributionAccounts": {
          "type": "array",
          "description": "List of PrivateDistributionAccounts.",
          "items": {
            "$ref": "#/definitions/v1.skill.Private.PrivateDistributionAccount"
          }
        },
        "nextToken": {
          "type": "string"
        }
      },
      "description": "Response of ListPrivateDistributionAccounts."
    },
    "v1.skill.Private.PrivateDistributionAccount": {
      "type": "object",
      "properties": {
        "principal": {
          "type": "string",
          "description": "12-digit numerical account ID for AWS account holders."
        },
        "acceptStatus": {
          "$ref": "#/definitions/v1.skill.Private.AcceptStatus",
          "x-isEnum": true
        }
      },
      "description": "Contains information of the private distribution account with given id."
    },
    "v1.skill.Private.AcceptStatus": {
      "type": "string",
      "description": "Enterprise IT administrators' action on the private distribution.",
      "enum": [
        "ACCEPTED",
        "PENDING"
      ]
    },
    "v1.skill.publication.PublishSkillRequest": {
      "type": "object",
      "properties": {
        "publishesAtDate": {
          "type": "string",
          "format": "date-time",
          "description": "Used to determine when the skill Publishing should start. It takes the request timestamp as default value. The date range can be a maximum of upto 6 months from the current time stamp. The format should be the  RFC 3399 variant of ISO 8601. e.g 2019-04-12T23:20:50.52Z"
        }
      }
    },
    "v1.skill.publication.SkillPublicationResponse": {
      "type": "object",
      "properties": {
        "publishesAtDate": {
          "type": "string",
          "format": "date-time",
          "description": "Used to determine when the skill Publishing should start."
        },
        "status": {
          "$ref": "#/definitions/v1.skill.publication.SkillPublicationStatus",
          "x-isEnum": true
        }
      }
    },
    "v1.skill.publication.SkillPublicationStatus": {
      "type": "string",
      "description": "Status of publishing",
      "enum": [
        "IN_PROGRESS",
        "SUCCEEDED",
        "FAILED",
        "CANCELLED",
        "SCHEDULED"
      ]
    },
    "v1.skill.simulations.SimulationsApiRequest": {
      "type": "object",
      "required": [
        "device",
        "input"
      ],
      "properties": {
        "input": {
          "$ref": "#/definitions/v1.skill.simulations.Input"
        },
        "device": {
          "$ref": "#/definitions/v1.skill.simulations.Device"
        },
        "session": {
          "$ref": "#/definitions/v1.skill.simulations.Session"
        },
        "simulation": {
          "$ref": "#/definitions/v1.skill.simulations.Simulation"
        }
      }
    },
    "v1.skill.simulations.Device": {
      "type": "object",
      "required": [
        "locale"
      ],
      "properties": {
        "locale": {
          "type": "string",
          "description": "A valid locale (e.g \"en-US\") for the virtual device used in simulation.\n"
        }
      },
      "description": "Model of a virtual device used for simulation. This device object emulates attributes associated with a real Alexa enabled device.\n"
    },
    "v1.skill.simulations.Input": {
      "type": "object",
      "required": [
        "content"
      ],
      "properties": {
        "content": {
          "type": "string",
          "description": "A string corresponding to the utterance text of what a customer would say to Alexa.\n"
        }
      }
    },
    "v1.skill.simulations.Session": {
      "type": "object",
      "properties": {
        "mode": {
          "$ref": "#/definitions/v1.skill.simulations.SessionMode",
          "x-isEnum": true
        }
      },
      "description": "Session settings for running current simulation.\n"
    },
    "v1.skill.simulations.SessionMode": {
      "type": "string",
      "description": "Indicate the session mode of the current simulation is using.\n",
      "enum": [
        "DEFAULT",
        "FORCE_NEW_SESSION"
      ]
    },
    "v1.skill.simulations.Simulation": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v1.skill.simulations.SimulationType",
          "x-isEnum": true
        }
      },
      "description": "Simulation settings for the current simulation request.\n"
    },
    "v1.skill.simulations.SimulationType": {
      "type": "string",
      "description": "String indicating the type of simulation request. Possible values are \"DEFAULT\" and \"NFI_ISOLATED_SIMULATION\". \"NFI_ISOLATED_SIMULATION\" is used to test the NFI(Name Free Interaction) enabled skills in isolation. This field is reserved for testing Name Free Interactions(NFI). Skills that are eligible to add NFI can only use this field. To learn more, visit https://developer.amazon.com/en-US/docs/alexa/custom-skills/understand-name-free-interaction-for-custom-skills.html\n",
      "enum": [
        "DEFAULT",
        "NFI_ISOLATED_SIMULATION"
      ]
    },
    "v1.skill.simulations.SimulationsApiResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the simulation resource."
        },
        "status": {
          "$ref": "#/definitions/v1.skill.simulations.SimulationsApiResponseStatus",
          "x-isEnum": true
        },
        "result": {
          "$ref": "#/definitions/v1.skill.simulations.SimulationResult"
        }
      }
    },
    "v1.skill.simulations.SimulationsApiResponseStatus": {
      "type": "string",
      "description": "String that specifies the current status of the simulation. Possible values are \"IN_PROGRESS\", \"SUCCESSFUL\", and \"FAILED\".\n",
      "enum": [
        "IN_PROGRESS",
        "SUCCESSFUL",
        "FAILED"
      ]
    },
    "v1.skill.simulations.SimulationResult": {
      "type": "object",
      "properties": {
        "alexaExecutionInfo": {
          "$ref": "#/definitions/v1.skill.simulations.AlexaExecutionInfo"
        },
        "skillExecutionInfo": {
          "$ref": "#/definitions/v1.skill.simulations.Invocation"
        },
        "error": {
          "$ref": "#/definitions/v1.Error"
        }
      }
    },
    "v1.skill.simulations.AlexaExecutionInfo": {
      "type": "object",
      "properties": {
        "alexaResponses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.simulations.AlexaResponse"
          }
        }
      }
    },
    "v1.skill.simulations.AlexaResponse": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of Alexa response"
        },
        "content": {
          "description": "The detail information needs to exposed in this type of Alexa response.\n",
          "$ref": "#/definitions/v1.skill.simulations.AlexaResponseContent"
        }
      }
    },
    "v1.skill.simulations.AlexaResponseContent": {
      "type": "object",
      "properties": {
        "caption": {
          "type": "string",
          "description": "The plain text get from Alexa speech response"
        }
      }
    },
    "v1.skill.simulations.Invocation": {
      "type": "object",
      "properties": {
        "invocationRequest": {
          "$ref": "#/definitions/v1.skill.simulations.InvocationRequest"
        },
        "invocationResponse": {
          "$ref": "#/definitions/v1.skill.simulations.InvocationResponse"
        },
        "metrics": {
          "$ref": "#/definitions/v1.skill.simulations.Metrics"
        }
      }
    },
    "v1.skill.simulations.InvocationRequest": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "Skill's Lambda or HTTPS endpoint."
        },
        "body": {
          "type": "object",
          "description": "JSON payload that was sent to the skill's Lambda or HTTPS endpoint.\n",
          "additionalProperties": {
            "type": "object",
            "properties": {}
          }
        }
      }
    },
    "v1.skill.simulations.InvocationResponse": {
      "type": "object",
      "properties": {
        "body": {
          "type": "object",
          "description": "Payload that was returned by the skill's Lambda or HTTPS endpoint.\n",
          "additionalProperties": {
            "type": "object",
            "properties": {}
          }
        }
      }
    },
    "v1.skill.simulations.Metrics": {
      "type": "object",
      "properties": {
        "skillExecutionTimeInMilliseconds": {
          "type": "integer",
          "description": "How long, in milliseconds, it took the skill's Lambda or HTTPS endpoint to process the request.\n"
        }
      }
    },
    "v1.skill.validations.ValidationsApiRequest": {
      "type": "object",
      "required": [
        "locales"
      ],
      "properties": {
        "locales": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1.skill.validations.ValidationsApiResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the validation resource."
        },
        "status": {
          "$ref": "#/definitions/v1.skill.validations.ValidationsApiResponseStatus",
          "x-isEnum": true
        },
        "result": {
          "$ref": "#/definitions/v1.skill.validations.ValidationsApiResponseResult"
        }
      }
    },
    "v1.skill.validations.ValidationsApiResponseStatus": {
      "type": "string",
      "description": "String that specifies the current status of validation execution. Possible values are \"IN_PROGRESS\", \"SUCCESSFUL\", and \"FAILED\".\n",
      "enum": [
        "IN_PROGRESS",
        "SUCCESSFUL",
        "FAILED"
      ]
    },
    "v1.skill.validations.ValidationsApiResponseResult": {
      "type": "object",
      "properties": {
        "validations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.validations.ResponseValidation"
          }
        },
        "error": {
          "$ref": "#/definitions/v1.Error"
        }
      }
    },
    "v1.skill.validations.ResponseValidation": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "Short, human readable title of the validation performed.\n"
        },
        "description": {
          "type": "string",
          "description": "Human readable description of the validation performed. May include instructions to address validation failure.\n"
        },
        "category": {
          "type": "string",
          "description": "Dot-delimited category.\n"
        },
        "locale": {
          "type": "string",
          "description": "Locale of the validation.\n"
        },
        "importance": {
          "$ref": "#/definitions/v1.skill.validations.ResponseValidationImportance",
          "x-isEnum": true
        },
        "status": {
          "$ref": "#/definitions/v1.skill.validations.ResponseValidationStatus",
          "x-isEnum": true
        }
      }
    },
    "v1.skill.validations.ResponseValidationImportance": {
      "type": "string",
      "description": "String that specifies importance of the validation. Possible values are \"REQUIRED\" and \"RECOMMENDED\"\n",
      "enum": [
        "REQUIRED",
        "RECOMMENDED"
      ]
    },
    "v1.skill.validations.ResponseValidationStatus": {
      "type": "string",
      "description": "String that specifies status of the validation. Possible values are \"SUCCESSFUL\" and \"FAILED\"\n",
      "enum": [
        "SUCCESSFUL",
        "FAILED"
      ]
    },
    "v1.skill.createSkillRequest": {
      "type": "object",
      "properties": {
        "vendorId": {
          "type": "string",
          "description": "ID of the vendor owning the skill."
        },
        "manifest": {
          "$ref": "#/definitions/v1.skill.Manifest.SkillManifest"
        },
        "hosting": {
          "$ref": "#/definitions/v1.skill.AlexaHosted.HostingConfiguration"
        }
      }
    },
    "v1.skill.ListSkillResponse": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/v1.Links"
        },
        "skills": {
          "type": "array",
          "description": "List of skill summaries. List might contain either one, two or three entries for a given skillId depending on the skill's publication history and the publication method.\n`Skill containing certified stage`\n* If a skill was never published to live, this list will contain two entries `:` one with stage 'development' and another with stage 'certified'. Both of these summaries will have same skillId.\n* For any skill that has been published to 'live', this list will contain three entries `:` one with stage 'development', one with stage `certified` and one with stage 'live'. All of these summaries will have same skillId.\n`Skill without certified stage`\n* If a skill was never published to live, this list will contain only one entry for the skill with stage as 'development'.\n* For any skill that has been published to 'live', this list will contain two entries `:` one with stage 'development' and another with stage 'live'. Both of these summaries will have same skillId.\n",
          "items": {
            "$ref": "#/definitions/v1.skill.SkillSummary"
          }
        },
        "isTruncated": {
          "type": "boolean"
        },
        "nextToken": {
          "type": "string"
        }
      },
      "description": "List of skills for the vendor."
    },
    "v1.skill.ListSkillVersionsResponse": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/v1.Links"
        },
        "skillVersions": {
          "type": "array",
          "description": "Skill version metadata",
          "items": {
            "$ref": "#/definitions/v1.skill.SkillVersion"
          }
        },
        "isTruncated": {
          "type": "boolean"
        },
        "nextToken": {
          "type": "string"
        }
      },
      "description": "List of all skill versions"
    },
    "v1.skill.SkillVersion": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "message": {
          "type": "string",
          "description": "Description of the version (limited to 300 characters).\n",
          "minLength": 1,
          "maxLength": 300
        },
        "creationTime": {
          "type": "string",
          "format": "date-time"
        },
        "submissions": {
          "type": "array",
          "description": "List of submissions for the skill version\n",
          "items": {
            "$ref": "#/definitions/v1.skill.VersionSubmission"
          }
        }
      },
      "description": "Information about the skill version"
    },
    "v1.skill.VersionSubmission": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1.skill.VersionSubmissionStatus",
          "x-isEnum": true
        },
        "submissionTime": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "Submission for a skill version\n"
    },
    "v1.skill.VersionSubmissionStatus": {
      "type": "string",
      "description": "The lifecycle status of the skill version submission.\n* `LIVE` - The skill version is in the live stage\n* `CERTIFIED` - The skill version has gone through the certification review process and has been certified.\n* `IN_REVIEW` - The skill version is currently under review for certification and publication. During this time, you cannot edit the configuration.\n* `FAILED_CERTIFICATION` - The skill version has been submitted for certification, however it has failed certification review. Please submit a new version for certification.\n* `HIDDEN` - The skill version has been published but is no longer available to new users for activation. Existing users can still invoke this skill if it is the most recent version.\n* `REMOVED` - The skill version has been published but removed for use, due to Amazon's policy violation. You can update your skill and publish a new version to live to address the policy violation.\n* `WITHDRAWN_FROM_CERTIFICATION` - The skill version was submitted for certification but was withdrawn from review.\n",
      "enum": [
        "LIVE",
        "CERTIFIED",
        "IN_REVIEW",
        "FAILED_CERTIFICATION",
        "HIDDEN",
        "REMOVED",
        "WITHDRAWN_FROM_CERTIFICATION"
      ]
    },
    "v1.skill.SkillSummary": {
      "type": "object",
      "properties": {
        "skillId": {
          "type": "string"
        },
        "stage": {
          "$ref": "#/definitions/v1.StageV2Type",
          "x-isEnum": true
        },
        "apis": {
          "type": "array",
          "description": "List of APIs currently implemented by the skill.",
          "items": {
            "$ref": "#/definitions/v1.skill.SkillSummaryApis"
          }
        },
        "publicationStatus": {
          "$ref": "#/definitions/v1.skill.PublicationStatus",
          "x-isEnum": true
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "nameByLocale": {
          "type": "object",
          "description": "Name of the skill in skill locales (keys are locale names (e.g. 'en-US') whereas values are name of the\nskill in that locale.\n",
          "additionalProperties": {
            "type": "string"
          }
        },
        "asin": {
          "type": "string",
          "description": "Amazon Standard Identification Number (ASIN) is unique blocks of 10 letters and/or numbers that identify items. More info about ASIN can be found here: https://www.amazon.com/gp/seller/asin-upc-isbn-info.html\nASIN is available for those skills only, that have been published, at least once.\n"
        },
        "_links": {
          "$ref": "#/definitions/v1.Links"
        }
      },
      "description": "Information about the skills."
    },
    "v1.skill.PublicationStatus": {
      "type": "string",
      "description": "Publication status of the skill.\nIt is associated with the skill's stage. Skill in 'development' stage can have publication status as 'DEVELOPMENT' or 'CERTIFICATION'. Skill in 'certified' stage can have publication status as 'CERTIFIED'. 'Skill in 'live' stage can have publication status as 'PUBLISHED', 'HIDDEN' or 'REMOVED'.\n* `DEVELOPMENT` - The skill is available only to you. If you have enabled it for testing, you can test it on devices registered to your developer account.\n* `CERTIFICATION` - Amazon is currently reviewing the skill for publication. During this time, you cannot edit the configuration.\n* `CERTIFIED` - The skill has been certified and ready to be published. Skill can be either published immediately or an future release date can be set for the skill. You cannot edit the configuration for the certified skills. To start development, make your changes on the development version.\n* `PUBLISHED` - The skill has been published and is available to users. You cannot edit the configuration for live skills. To start development on an updated version, make your changes on the development version instead.\n* `HIDDEN` - The skill has been published but is no longer available to new users for activation. Existing users can still invoke this skill.\n* `REMOVED` - The skill has been published but removed for use, due to Amazon's policy violation. You can update your skill and publish a new version to live to address the policy violation.\n",
      "enum": [
        "DEVELOPMENT",
        "CERTIFICATION",
        "CERTIFIED",
        "PUBLISHED",
        "HIDDEN",
        "REMOVED"
      ]
    },
    "v1.skill.SkillSummaryApis": {
      "type": "string",
      "enum": [
        "custom",
        "smartHome",
        "flashBriefing",
        "video",
        "music",
        "householdList",
        "health",
        "alexaForBusiness",
        "demandResponse"
      ]
    },
    "v1.skill.CreateSkillResponse": {
      "type": "object",
      "properties": {
        "skillId": {
          "type": "string",
          "description": "ID of the skill created."
        }
      },
      "description": "SkillId information."
    },
    "v1.skill.SSLCertificatePayload": {
      "type": "object",
      "properties": {
        "sslCertificate": {
          "type": "string",
          "description": "The default ssl certificate for the skill. If a request is made for a region without an explicit ssl certificate, this certificate will be used."
        },
        "regions": {
          "type": "object",
          "description": "A map of region to ssl certificate. Keys are string region codes (https://developer.amazon.com/docs/smapi/skill-manifest.html#regions), values are regional ssl certificate objects which contain the ssl certificate blobs as strings.",
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.RegionalSSLCertificate"
          }
        }
      }
    },
    "v1.skill.RegionalSSLCertificate": {
      "type": "object",
      "properties": {
        "sslCertificate": {
          "type": "string"
        }
      }
    },
    "v1.skill.SkillStatus": {
      "type": "object",
      "properties": {
        "manifest": {
          "$ref": "#/definitions/v1.skill.ManifestStatus"
        },
        "interactionModel": {
          "type": "object",
          "description": "Status for available interaction models, keyed by locale.",
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.SkillInteractionModelStatus"
          }
        },
        "hostedSkillDeployment": {
          "$ref": "#/definitions/v1.skill.HostedSkillDeploymentStatus"
        },
        "hostedSkillProvisioning": {
          "$ref": "#/definitions/v1.skill.HostedSkillProvisioningStatus"
        }
      },
      "description": "Defines the structure for skill status response."
    },
    "v1.skill.skillResourcesEnum": {
      "type": "object",
      "enum": [
        "manifest",
        "interactionModel",
        "hostedSkillDeployment",
        "hostedSkillProvisioning"
      ]
    },
    "v1.skill.ManifestStatus": {
      "type": "object",
      "properties": {
        "lastUpdateRequest": {
          "$ref": "#/definitions/v1.skill.ManifestLastUpdateRequest"
        },
        "eTag": {
          "type": "string",
          "description": "An opaque identifier for last successfully updated resource."
        }
      },
      "description": "Defines the structure for a resource status."
    },
    "v1.skill.ManifestLastUpdateRequest": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1.skill.Status",
          "x-isEnum": true
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.StandardizedError"
          }
        },
        "warnings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.StandardizedError"
          }
        },
        "version": {
          "type": "string",
          "description": "on success, this field indicates the created version."
        }
      },
      "description": "Contains attributes related to last modification (create/update) request of a resource."
    },
    "v1.skill.SkillInteractionModelStatus": {
      "type": "object",
      "properties": {
        "lastUpdateRequest": {
          "$ref": "#/definitions/v1.skill.InteractionModelLastUpdateRequest"
        },
        "eTag": {
          "type": "string",
          "description": "An opaque identifier for last successfully updated resource."
        },
        "version": {
          "type": "string",
          "description": "Version for last successfully built model."
        }
      },
      "description": "Defines the structure for interaction model build status."
    },
    "v1.skill.InteractionModelLastUpdateRequest": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1.skill.Status",
          "x-isEnum": true
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.StandardizedError"
          }
        },
        "warnings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.StandardizedError"
          }
        },
        "buildDetails": {
          "$ref": "#/definitions/v1.skill.BuildDetails"
        }
      },
      "description": "Contains attributes related to last modification (create/update) request of a resource."
    },
    "v1.skill.HostedSkillDeploymentStatus": {
      "type": "object",
      "properties": {
        "lastUpdateRequest": {
          "$ref": "#/definitions/v1.skill.HostedSkillDeploymentStatusLastUpdateRequest"
        }
      },
      "description": "Defines the most recent deployment status for the Alexa hosted skill."
    },
    "v1.skill.HostedSkillDeploymentStatusLastUpdateRequest": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1.skill.Status",
          "x-isEnum": true
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.StandardizedError"
          }
        },
        "warnings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.StandardizedError"
          }
        },
        "deploymentDetails": {
          "$ref": "#/definitions/v1.skill.HostedSkillDeploymentDetails"
        }
      },
      "description": "Contains attributes related to last modification request of a hosted skill deployment resource."
    },
    "v1.skill.HostedSkillDeploymentDetails": {
      "type": "object",
      "properties": {
        "commitId": {
          "type": "string"
        },
        "logUrl": {
          "type": "string"
        }
      },
      "description": "Details about hosted skill deployment."
    },
    "v1.skill.HostedSkillProvisioningStatus": {
      "type": "object",
      "properties": {
        "lastUpdateRequest": {
          "$ref": "#/definitions/v1.skill.HostedSkillProvisioningLastUpdateRequest"
        }
      },
      "description": "Defines the provisioning status for hosted skill."
    },
    "v1.skill.HostedSkillProvisioningLastUpdateRequest": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1.skill.Status",
          "x-isEnum": true
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.StandardizedError"
          }
        },
        "warnings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.StandardizedError"
          }
        }
      },
      "description": "Contains attributes related to last modification request of a hosted skill provisioning resource."
    },
    "v1.skill.BuildDetails": {
      "type": "object",
      "properties": {
        "steps": {
          "type": "array",
          "description": "An array where each element represents a build step.",
          "items": {
            "$ref": "#/definitions/v1.skill.BuildStep"
          }
        }
      },
      "description": "Contains array which describes steps involved in a build. Elements (or build steps) are added\nto this array as they become IN_PROGRESS.\n"
    },
    "v1.skill.BuildStep": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/v1.skill.BuildStepName",
          "x-isEnum": true
        },
        "status": {
          "$ref": "#/definitions/v1.skill.Status",
          "x-isEnum": true
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.StandardizedError"
          }
        }
      },
      "description": "Describes the status of a build step."
    },
    "v1.skill.BuildStepName": {
      "type": "string",
      "description": "Name of the build step. Possible values -\n* `DIALOG_MODEL_BUILD` - Build status for dialog model.\n* `LANGUAGE_MODEL_QUICK_BUILD` - Build status for FST model.\n* `LANGUAGE_MODEL_FULL_BUILD` - Build status for statistical model.\n* `ALEXA_CONVERSATIONS_QUICK_BUILD` - AlexaConversations LowFidelity model build status.\n* `ALEXA_CONVERSATIONS_FULL_BUILD` - AlexaConversations HighFidelity model build status.\n",
      "enum": [
        "DIALOG_MODEL_BUILD",
        "LANGUAGE_MODEL_QUICK_BUILD",
        "LANGUAGE_MODEL_FULL_BUILD",
        "ALEXA_CONVERSATIONS_QUICK_BUILD",
        "ALEXA_CONVERSATIONS_FULL_BUILD"
      ]
    },
    "v1.skill.Status": {
      "type": "string",
      "description": "Status of a resource.",
      "enum": [
        "FAILED",
        "IN_PROGRESS",
        "SUCCEEDED"
      ]
    },
    "v1.skill.SkillCredentials": {
      "type": "object",
      "properties": {
        "skillMessagingCredentials": {
          "$ref": "#/definitions/v1.skill.SkillMessagingCredentials"
        }
      },
      "description": "Structure for skill credentials response."
    },
    "v1.skill.SkillMessagingCredentials": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "description": "The client id for the security profile."
        },
        "clientSecret": {
          "type": "string",
          "description": "The client secret for the security profile."
        }
      },
      "description": "Defines the structure for skill messaging credentials."
    },
    "v1.skill.SubmitSkillForCertificationRequest": {
      "type": "object",
      "properties": {
        "publicationMethod": {
          "$ref": "#/definitions/v1.skill.PublicationMethod",
          "x-isEnum": true
        },
        "versionMessage": {
          "type": "string",
          "description": "Description of the version (limited to 300 characters)."
        }
      }
    },
    "v1.skill.PublicationMethod": {
      "type": "string",
      "description": "Determines if the skill should be submitted only for certification and manually publish later or publish immediately after the skill is certified. Omitting the publication method will default to auto publishing.",
      "enum": [
        "MANUAL_PUBLISHING",
        "AUTO_PUBLISHING"
      ]
    },
    "v1.skill.WithdrawRequest": {
      "type": "object",
      "required": [
        "reason"
      ],
      "properties": {
        "reason": {
          "$ref": "#/definitions/v1.skill.Reason",
          "x-isEnum": true
        },
        "message": {
          "type": "string",
          "description": "The message only in case the reason in OTHER."
        }
      },
      "description": "The payload for the withdraw operation."
    },
    "v1.skill.Reason": {
      "type": "string",
      "description": "The reason to withdraw.",
      "enum": [
        "TEST_SKILL",
        "MORE_FEATURES",
        "DISCOVERED_ISSUE",
        "NOT_RECEIVED_CERTIFICATION_FEEDBACK",
        "NOT_INTEND_TO_PUBLISH",
        "OTHER"
      ]
    },
    "v1.skill.createSkillWithPackageRequest": {
      "type": "object",
      "required": [
        "location"
      ],
      "properties": {
        "vendorId": {
          "type": "string",
          "description": "ID of the vendor owning the skill.",
          "minLength": 1,
          "maxLength": 255
        },
        "location": {
          "type": "string",
          "format": "uri",
          "description": "The URL for the skill package."
        }
      }
    },
    "v1.skill.updateSkillWithPackageRequest": {
      "type": "object",
      "required": [
        "location"
      ],
      "properties": {
        "location": {
          "type": "string",
          "format": "uri",
          "description": "The URL for the skill package."
        }
      }
    },
    "v1.skill.ImportResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1.skill.ResponseStatus",
          "x-isEnum": true
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.StandardizedError"
          }
        },
        "warnings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.StandardizedError"
          }
        },
        "skill": {
          "$ref": "#/definitions/v1.skill.ImportResponseSkill"
        }
      }
    },
    "v1.skill.ResponseStatus": {
      "type": "string",
      "description": "Status for a Response resource.",
      "enum": [
        "FAILED",
        "IN_PROGRESS",
        "SUCCEEDED",
        "ROLLBACK_SUCCEEDED",
        "ROLLBACK_FAILED",
        "SKIPPED"
      ]
    },
    "v1.skill.ImportResponseSkill": {
      "type": "object",
      "required": [
        "resources"
      ],
      "properties": {
        "skillId": {
          "type": "string"
        },
        "eTag": {
          "type": "string"
        },
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.ResourceImportStatus"
          }
        }
      }
    },
    "v1.skill.ResourceImportStatus": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Resource name. eg. manifest, interactionModels.en_US and so on."
        },
        "status": {
          "$ref": "#/definitions/v1.skill.ResponseStatus",
          "x-isEnum": true
        },
        "action": {
          "$ref": "#/definitions/v1.skill.Action",
          "x-isEnum": true
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.StandardizedError"
          }
        },
        "warnings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.StandardizedError"
          }
        }
      },
      "description": "Defines the structure for a resource deployment status."
    },
    "v1.skill.Action": {
      "type": "string",
      "description": "Action of a resource.",
      "enum": [
        "CREATE",
        "UPDATE",
        "ASSOCIATE",
        "DISASSOCIATE"
      ]
    },
    "v1.skill.UploadResponse": {
      "type": "object",
      "properties": {
        "uploadUrl": {
          "type": "string",
          "description": "The upload URL to upload a skill package."
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time",
          "description": "The expiration time of the URL"
        }
      },
      "description": "Defines the structure for skill upload response."
    },
    "v1.skill.ExportResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1.skill.ResponseStatus",
          "x-isEnum": true
        },
        "skill": {
          "$ref": "#/definitions/v1.skill.ExportResponseSkill"
        }
      }
    },
    "v1.skill.ExportResponseSkill": {
      "type": "object",
      "properties": {
        "eTag": {
          "type": "string"
        },
        "location": {
          "type": "string",
          "format": "uri"
        },
        "expiresAt": {
          "type": "string",
          "description": "ExpiresAt timestamp in milliseconds."
        }
      },
      "description": "Defines the structure of the GetExport response."
    },
    "v1.skill.StandardizedError": {
      "type": "object",
      "properties": {
        "validationDetails": {
          "description": "Standardized, machine readable structure that wraps all the information about a specific occurrence of an error of the type specified by the code.",
          "$ref": "#/definitions/v1.skill.validationDetails"
        }
      },
      "description": "Standardized structure which wraps machine parsable and human readable information about an error.",
      "x-inheritsFrom": "v1.Error"
    },
    "v1.skill.validationDetails": {
      "type": "object",
      "properties": {
        "actualImageAttributes": {
          "description": "Set of properties of the image provided by the customer.",
          "$ref": "#/definitions/v1.skill.imageAttributes"
        },
        "actualNumberOfItems": {
          "type": "integer",
          "description": "Number of items in an array provided by the customer."
        },
        "actualStringLength": {
          "type": "integer",
          "description": "Number of characters in a string provided by the customer."
        },
        "allowedContentTypes": {
          "type": "array",
          "description": "List of allowed content types for a resource.",
          "items": {
            "type": "string",
            "description": "Allowed content type in IANA media type format."
          }
        },
        "allowedDataTypes": {
          "type": "array",
          "description": "List of allowed data types for an instance.",
          "items": {
            "description": "Allowed data type.",
            "$ref": "#/definitions/v1.skill.ValidationDataTypes"
          }
        },
        "allowedImageAttributes": {
          "type": "array",
          "description": "List of set of properties representing all possible allowed images.",
          "items": {
            "description": "Set of properties of the image provided by the customer.",
            "$ref": "#/definitions/v1.skill.imageAttributes"
          }
        },
        "conflictingInstance": {
          "description": "Instance conflicting with another instance.",
          "$ref": "#/definitions/v1.skill.Instance"
        },
        "expectedFormat": {
          "description": "Format in which instance value is expected in.",
          "$ref": "#/definitions/v1.skill.Format",
          "x-isEnum": true
        },
        "expectedInstance": {
          "description": "Instance that is expected by a related instance.",
          "$ref": "#/definitions/v1.skill.Instance"
        },
        "expectedRegexPattern": {
          "type": "string",
          "description": "Regular expression that a string instance is expected to match."
        },
        "agreementType": {
          "description": "Type of the agreement that the customer must be compliant to.",
          "$ref": "#/definitions/v1.skill.AgreementType",
          "x-isEnum": true
        },
        "feature": {
          "description": "Properties of a publicly known feature that has restricted access.",
          "$ref": "#/definitions/v1.skill.ValidationFeature"
        },
        "inconsistentEndpoint": {
          "description": "Endpoint which has a different value for property named type when compared to original endpoint.",
          "$ref": "#/definitions/v1.skill.ValidationEndpoint"
        },
        "minimumIntegerValue": {
          "type": "integer",
          "description": "Minimum allowed value of an integer instance."
        },
        "minimumNumberOfItems": {
          "type": "integer",
          "description": "Minimum allowed number of items in an array."
        },
        "minimumStringLength": {
          "type": "integer",
          "description": "Minimum allowed number of characters in a string."
        },
        "maximumIntegerValue": {
          "type": "integer",
          "description": "Maximum allowed value of an integer instance."
        },
        "maximumNumberOfItems": {
          "type": "integer",
          "description": "Maximum allowed number of items in an array."
        },
        "maximumStringLength": {
          "type": "integer",
          "description": "Maximum allowed number of characters in a string."
        },
        "originalEndpoint": {
          "description": "An Endpoint instance",
          "$ref": "#/definitions/v1.skill.ValidationEndpoint"
        },
        "originalInstance": {
          "description": "An Instance",
          "$ref": "#/definitions/v1.skill.Instance"
        },
        "reason": {
          "description": "Represents what is wrong in the request.",
          "$ref": "#/definitions/v1.skill.ValidationFailureReason"
        },
        "requiredProperty": {
          "type": "string",
          "description": "Property required but missing in the object."
        },
        "unexpectedProperty": {
          "type": "string",
          "description": "Property not expected but present in the object."
        }
      },
      "description": "Standardized, machine readable structure that wraps all the information about a specific occurrence of an error of the type specified by the code."
    },
    "v1.skill.imageAttributes": {
      "type": "object",
      "properties": {
        "dimension": {
          "$ref": "#/definitions/v1.skill.ImageDimension"
        },
        "size": {
          "$ref": "#/definitions/v1.skill.ImageSize"
        },
        "maximumSize": {
          "$ref": "#/definitions/v1.skill.ImageSize"
        }
      },
      "description": "Set of properties of the image provided by the customer."
    },
    "v1.skill.ImageDimension": {
      "type": "object",
      "properties": {
        "widthInPixels": {
          "type": "integer",
          "description": "Width of the image in pixels."
        },
        "heightInPixels": {
          "type": "integer",
          "description": "Height of the image in pixels."
        }
      },
      "description": "Dimensions of an image."
    },
    "v1.skill.ImageSize": {
      "type": "object",
      "properties": {
        "value": {
          "type": "number",
          "description": "Value measuring the size of the image."
        },
        "unit": {
          "$ref": "#/definitions/v1.skill.ImageSizeUnit",
          "x-isEnum": true
        }
      },
      "description": "On disk storage size of image."
    },
    "v1.skill.ImageSizeUnit": {
      "type": "string",
      "description": "Unit of measurement for size of image.",
      "enum": [
        "MB"
      ]
    },
    "v1.skill.ValidationDataTypes": {
      "type": "string",
      "enum": [
        "object",
        "boolean",
        "integer",
        "array",
        "string",
        "null"
      ]
    },
    "v1.skill.Instance": {
      "type": "object",
      "properties": {
        "propertyPath": {
          "type": "string",
          "description": "Path that uniquely identifies the instance in the resource."
        },
        "dataType": {
          "$ref": "#/definitions/v1.skill.ValidationDataTypes",
          "x-isEnum": true
        },
        "value": {
          "type": "string",
          "description": "String value of the instance. Incase of null, object or array the value field would be null or not present. Incase of string, boolean or integer dataType it will be the corresponding String value."
        }
      },
      "description": "Structure representing properties of an instance of data. Definition will be either one of a booleanInstance, stringInstance, integerInstance, or compoundInstance."
    },
    "v1.skill.AgreementType": {
      "type": "string",
      "description": "Type of the agreement that the customer must be compliant to.",
      "enum": [
        "EXPORT_COMPLIANCE"
      ]
    },
    "v1.skill.ValidationFeature": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the feature."
        },
        "contact": {
          "type": "string",
          "description": "Contact URL or email for the feature."
        }
      },
      "description": "Structure representing a public feature."
    },
    "v1.skill.ValidationEndpoint": {
      "type": "object",
      "properties": {
        "propertyPath": {
          "type": "string",
          "description": "Path to the endpoint URI in the resource."
        },
        "type": {
          "type": "string",
          "description": "Type of the endpoint (https, http, arn etc)."
        },
        "value": {
          "type": "string",
          "description": "Full URI of the endpoint."
        }
      },
      "description": "Structure representing an endpoint."
    },
    "v1.skill.Format": {
      "type": "string",
      "description": "Format in which instance value is expected in.",
      "enum": [
        "URI"
      ]
    },
    "v1.skill.ValidationFailureReason": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Enum for type of validation failure in the request.",
          "$ref": "#/definitions/v1.skill.ValidationFailureType",
          "x-isEnum": true
        }
      },
      "description": "Object representing what is wrong in the request."
    },
    "v1.skill.ValidationFailureType": {
      "type": "string",
      "description": "Enum for type of validation failure in the request.",
      "enum": [
        "RESOURCE_DOES_NOT_EXIST",
        "RESOURCE_VERSION_DOES_NOT_MATCH",
        "MALFORMED_INPUT",
        "EXPECTED_NOT_EMPTY_VALUE",
        "INVALID_NUMBER_OF_OCCURENCES",
        "INVALID_NUMBER_OF_PROPERTIES",
        "EXPECTED_ATLEAST_ONE_RELATED_INSTANCE",
        "EXPECTED_EXACTLY_ONE_RELATED_INSTANCE",
        "RESOURCE_LOCKED",
        "UNEXPECTED_RESOURCE_STAGE",
        "UNEXPECTED_RESOURCE_PROPERTY",
        "MISSING_RESOURCE_PROPERTY"
      ]
    },
    "v1.skill.CreateRollbackRequest": {
      "type": "object",
      "required": [
        "targetVersion"
      ],
      "properties": {
        "targetVersion": {
          "type": "string",
          "description": "The target skill version to rollback to."
        }
      },
      "description": "Defines the request body to create a rollback request"
    },
    "v1.skill.CreateRollbackResponse": {
      "type": "object",
      "properties": {
        "rollbackRequestId": {
          "type": "string",
          "description": "Defines the identifier for a rollback request."
        }
      },
      "description": "Defines the response body when a rollback request is created"
    },
    "v1.skill.RollbackRequestStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "rollback request id"
        },
        "targetVersion": {
          "type": "string",
          "description": "The target skill version to rollback to."
        },
        "submissionTime": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/v1.skill.RollbackRequestStatusTypes",
          "x-isEnum": true
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.StandardizedError"
          }
        }
      },
      "description": "Rollback request for a skill"
    },
    "v1.skill.RollbackRequestStatusTypes": {
      "type": "string",
      "description": "The rollback status of the rollback request.\n* `FAILED` - The rollback has failed. Please retry the rollback.\n* `INELIGIBLE` - The target version is ineligible for rollback.\n* `IN_PROGRESS` - The rollback is in progress.\n* `SUCCEEDED` - The rollback has succeeded.\n",
      "enum": [
        "FAILED",
        "INELIGIBLE",
        "IN_PROGRESS",
        "SUCCEEDED"
      ]
    },
    "v1.skill.CloneLocaleStatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1.skill.CloneLocaleRequestStatus",
          "x-isEnum": true
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.StandardizedError"
          }
        },
        "sourceLocale": {
          "type": "string",
          "description": "Source locale which is cloned to target locales."
        },
        "targetLocales": {
          "type": "object",
          "description": "Mapping of statuses per locale.",
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.CloneLocaleResourceStatus"
          }
        }
      },
      "description": "A mapping of statuses per locale detailing progress of resource or error if encountered."
    },
    "v1.skill.CloneLocaleResourceStatus": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1.skill.CloneLocaleStatus",
          "x-isEnum": true
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.StandardizedError"
          }
        }
      },
      "description": "an object detailing the status of a locale clone request and if applicable the errors occurred when saving/building resources during clone process."
    },
    "v1.skill.CloneLocaleStatus": {
      "type": "string",
      "description": "Status for a locale clone on a particular target locale\n  * `IN_PROGRESS` status would indicate the clone is still in progress to the target locale.\n  * `SUCCEEDED` status would indicate the source locale was cloned successfully to the target locale.\n  * `INELIGIBLE` status would indicate the source locale was ineligible to be cloned the target locale.\n  * `FAILED` status would indicate the source locale was not cloned the target locale successfully.\n  * `ROLLBACK_SUCCEEDED` status would indicate the locale was rolled back to the previous state in case any failure.\n  * `ROLLBACK_FAILED` status would indicate that in case of failure, the rollback to the previous state of the locale was attempted, but it failed.\n",
      "enum": [
        "FAILED",
        "INELIGIBLE",
        "IN_PROGRESS",
        "ROLLBACK_FAILED",
        "ROLLBACK_SUCCEEDED",
        "SUCCEEDED"
      ]
    },
    "v1.skill.CloneLocaleRequestStatus": {
      "type": "string",
      "description": "Status for a locale clone request\nCloneLocale API initiates cloning from a source locale to all target locales.\n  * `IN_PROGRESS` status would indicate the clone is still in progress.\n  * `SUCCEEDED` status would indicate the source locale was cloned successfully to all target locales.\n  * `INELIGIBLE` status would indicate the source locale was ineligible to be cloned to all target locales.\n  * `MIXED` status would indicate the different status of clone on different locales, and individual target locale statues should be checked.\n  * `FAILED` status would indicate the source locale was not cloned all target locales successfully despite the request being eligible due to internal service issues.\n  * `ROLLBACK_SUCCEEDED` status would indicate the skill was rolled back to the previous state in case any failure.\n  * `ROLLBACK_FAILED` status would indicate that in case of failure, the rollback to the previous state of the skill was attempted, but it failed.\n",
      "enum": [
        "FAILED",
        "INELIGIBLE",
        "IN_PROGRESS",
        "MIXED",
        "ROLLBACK_FAILED",
        "ROLLBACK_SUCCEEDED",
        "SUCCEEDED"
      ]
    },
    "v1.skill.CloneLocaleRequest": {
      "type": "object",
      "required": [
        "sourceLocale",
        "targetLocales"
      ],
      "properties": {
        "sourceLocale": {
          "type": "string",
          "description": "Locale with the assets that will be cloned."
        },
        "targetLocales": {
          "type": "array",
          "description": "A list of locale(s) where the assets will be copied to.",
          "items": {
            "type": "string"
          }
        },
        "overwriteMode": {
          "description": "Can locale of skill be overwritten. Default value is DO_NOT_OVERWRITE.",
          "$ref": "#/definitions/v1.skill.OverwriteMode",
          "x-isEnum": true
        }
      },
      "description": "Defines the request body for the cloneLocale API."
    },
    "v1.skill.OverwriteMode": {
      "type": "string",
      "description": "Can locale of skill be overwritten. Default value is DO_NOT_OVERWRITE.",
      "enum": [
        "DO_NOT_OVERWRITE",
        "OVERWRITE"
      ]
    },
    "v1.skill.CloneLocaleStageType": {
      "type": "string",
      "enum": [
        "development"
      ]
    },
    "v1.vendorManagement.Vendors": {
      "type": "object",
      "properties": {
        "vendors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.vendorManagement.Vendor"
          }
        }
      },
      "description": "List of Vendors."
    },
    "v1.vendorManagement.Vendor": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of vendor."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of vendor associated with the API caller account."
        },
        "roles": {
          "type": "array",
          "description": "Roles that user has for this vendor.",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Vendor Response Object."
    },
    "v1.auditLogs.RequestFilters": {
      "type": "object",
      "properties": {
        "clients": {
          "type": "array",
          "description": "List of Client IDs for filtering.",
          "items": {
            "$ref": "#/definitions/v1.auditLogs.ClientFilter"
          }
        },
        "operations": {
          "type": "array",
          "description": "Filters for a list of operation names and versions.",
          "items": {
            "$ref": "#/definitions/v1.auditLogs.OperationFilter"
          }
        },
        "resources": {
          "type": "array",
          "description": "Filters for a list of resources and/or their types. See documentation for allowed types.",
          "items": {
            "$ref": "#/definitions/v1.auditLogs.ResourceFilter"
          }
        },
        "requesters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.auditLogs.RequesterFilter"
          }
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Sets the start time for this search. Any audit logs with timestamps after this time (inclusive) will be included in the response."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "Sets the end time for this search. Any audit logs with timestamps before this time (exclusive) will be included in the result."
        },
        "httpResponseCodes": {
          "type": "array",
          "description": "Filters for HTTP response codes. For example, '200' or '503'",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Request Filters for filtering audit logs."
    },
    "v1.auditLogs.ClientFilter": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "UUID"
        }
      },
      "description": "Identifier for the application the developer used to manage their skills and skill-related resources. For OAuth applications, this is the OAuth Client Id."
    },
    "v1.auditLogs.OperationFilter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "description": "Name and version of the operation that the developer performed. For example, 'deleteSkill' and 'v1'. This is the same name used in the SMAPI SDK."
    },
    "v1.auditLogs.ResourceFilter": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "UUID"
        },
        "type": {
          "$ref": "#/definitions/v1.auditLogs.ResourceTypeEnum",
          "x-isEnum": true
        }
      },
      "description": "Resource that the developer operated on. Both do not need to be provided."
    },
    "v1.auditLogs.ResourceTypeEnum": {
      "type": "string",
      "enum": [
        "Skill",
        "SkillCatalog",
        "InSkillProduct",
        "Import",
        "Export"
      ]
    },
    "v1.auditLogs.RequesterFilter": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "LoginWithAmazon User ID."
        }
      },
      "description": "Filter for the requester of the operation."
    },
    "v1.auditLogs.SortDirection": {
      "type": "string",
      "description": "Sets the sorting direction of the result items. When set to 'ASC' these items are returned in ascending order of sortField value and when set to 'DESC' these items are returned in descending order of sortField value.",
      "enum": [
        "ASC",
        "DESC"
      ],
      "default": "DESC"
    },
    "v1.auditLogs.SortField": {
      "type": "string",
      "description": "Sets the field on which the sorting would be applied.",
      "enum": [
        "timestamp",
        "operation",
        "resource.id",
        "resource.type",
        "requester.userId",
        "client.id",
        "httpResponseCode"
      ],
      "default": "timestamp"
    },
    "v1.auditLogs.RequestPaginationContext": {
      "type": "object",
      "properties": {
        "nextToken": {
          "type": "string",
          "description": "When the response to this API call is truncated, the response includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that this API understands. Token has expiry of 1 hour.",
          "minLength": 1,
          "maxLength": 2047
        },
        "maxResults": {
          "type": "integer",
          "description": "Sets the maximum number of results returned in the response body. If you want to retrieve more or less than the default of 50 results, you can add this parameter to your request. maxResults can exceed the upper limit of 250 but we will not return more items than that. The response might contain fewer results than maxResults for purpose of keeping SLA or because there are not enough items, but it will never contain more.",
          "minimum": 1,
          "maximum": 200
        }
      },
      "description": "This object includes nextToken and maxResults."
    },
    "v1.auditLogs.AuditLogsResponse": {
      "type": "object",
      "properties": {
        "paginationContext": {
          "$ref": "#/definitions/v1.auditLogs.ResponsePaginationContext"
        },
        "_links": {
          "$ref": "#/definitions/v1.Links"
        },
        "auditLogs": {
          "type": "array",
          "description": "List of audit logs for the vendor.",
          "items": {
            "$ref": "#/definitions/v1.auditLogs.AuditLog"
          }
        }
      },
      "description": "Response to the Query Audit Logs API. It contains the collection of audit logs for the vendor, nextToken and other metadata related to the search query."
    },
    "v1.auditLogs.ResponsePaginationContext": {
      "type": "object",
      "properties": {
        "nextToken": {
          "type": "string",
          "description": "This token can be used to load the next page of the result.",
          "minLength": 1,
          "maxLength": 2047
        }
      },
      "description": "This object contains the next token used to load the next page of the result."
    },
    "v1.auditLogs.AuditLog": {
      "type": "object",
      "properties": {
        "xAmznRequestId": {
          "type": "string",
          "format": "UUID",
          "description": "UUID that identifies a specific request."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Date-Time when the request was made."
        },
        "client": {
          "$ref": "#/definitions/v1.auditLogs.Client"
        },
        "operation": {
          "$ref": "#/definitions/v1.auditLogs.Operation"
        },
        "resources": {
          "type": "array",
          "description": "Contains information about the resources affected in this request.",
          "items": {
            "$ref": "#/definitions/v1.auditLogs.Resource"
          }
        },
        "requester": {
          "$ref": "#/definitions/v1.auditLogs.Requester"
        },
        "httpResponseCode": {
          "type": "integer",
          "description": "HTTP Status Code returned by this request."
        }
      }
    },
    "v1.auditLogs.Client": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "description": "Contains information about the Client that this request was performed by."
    },
    "v1.auditLogs.Operation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "description": "Object containing name and version."
    },
    "v1.auditLogs.Resource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "UUID"
        },
        "type": {
          "type": "string"
        }
      },
      "description": "Resource that the developer operated on. This includes both the type and ID of the resource."
    },
    "v1.auditLogs.Requester": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "LWA User ID. https://developer.amazon.com/docs/login-with-amazon/obtain-customer-profile.html"
        }
      },
      "description": "The user that performed the operation."
    },
    "v1.auditLogs.AuditLogsRequest": {
      "type": "object",
      "required": [
        "vendorId"
      ],
      "properties": {
        "vendorId": {
          "type": "string",
          "description": "Vendor Id. See developer.amazon.com/mycid.html.",
          "minLength": 1,
          "maxLength": 255
        },
        "requestFilters": {
          "$ref": "#/definitions/v1.auditLogs.RequestFilters"
        },
        "sortDirection": {
          "$ref": "#/definitions/v1.auditLogs.SortDirection",
          "x-isEnum": true
        },
        "sortField": {
          "$ref": "#/definitions/v1.auditLogs.SortField",
          "x-isEnum": true
        },
        "paginationContext": {
          "$ref": "#/definitions/v1.auditLogs.RequestPaginationContext"
        }
      }
    },
    "v1.skill.nlu.evaluations.EvaluateNLURequest": {
      "type": "object",
      "required": [
        "locale",
        "source",
        "stage"
      ],
      "properties": {
        "stage": {
          "type": "object",
          "properties": {}
        },
        "locale": {
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/v1.skill.nlu.evaluations.Source"
        }
      }
    },
    "v1.skill.nlu.evaluations.EvaluateResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id used to retrieve the evaluation later."
        }
      }
    },
    "v1.skill.nlu.evaluations.ListNLUEvaluationsResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.nlu.evaluations.PagedResponse"
        },
        {
          "type": "object",
          "properties": {
            "evaluations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1.skill.nlu.evaluations.Evaluation"
              }
            }
          }
        }
      ],
      "description": "response body for a list evaluation API"
    },
    "v1.skill.nlu.evaluations.GetNLUEvaluationResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.nlu.evaluations.EvaluationEntity"
        },
        {
          "type": "object",
          "properties": {
            "_links": {
              "$ref": "#/definitions/v1.skill.nlu.evaluations.GetNLUEvaluationResponseLinks"
            }
          }
        }
      ]
    },
    "v1.skill.nlu.evaluations.GetNLUEvaluationResultsResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.nlu.evaluations.PagedResultsResponse"
        },
        {
          "type": "object",
          "properties": {
            "totalFailed": {
              "type": "number",
              "description": "count of tests failed. A test fails when the expected intent and expected slots are not identical.\n"
            },
            "testCases": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1.skill.nlu.evaluations.TestCase"
              }
            }
          }
        }
      ]
    },
    "v1.skill.nlu.evaluations.EvaluationInputs": {
      "type": "object",
      "properties": {
        "locale": {
          "type": "string"
        },
        "stage": {
          "type": "object",
          "properties": {}
        },
        "source": {
          "$ref": "#/definitions/v1.skill.nlu.evaluations.Source"
        }
      }
    },
    "v1.skill.nlu.evaluations.Source": {
      "type": "object",
      "properties": {
        "annotationId": {
          "type": "string",
          "description": "ID of the annotation set"
        }
      },
      "description": "Use Annotation Set as evaluation source\n"
    },
    "v1.skill.nlu.evaluations.PagedResponse": {
      "type": "object",
      "properties": {
        "paginationContext": {
          "$ref": "#/definitions/v1.skill.nlu.evaluations.PaginationContext"
        },
        "_links": {
          "$ref": "#/definitions/v1.skill.nlu.evaluations.Links"
        }
      }
    },
    "v1.skill.nlu.evaluations.PagedResultsResponse": {
      "type": "object",
      "properties": {
        "paginationContext": {
          "$ref": "#/definitions/v1.skill.nlu.evaluations.PagedResultsResponsePaginationContext"
        },
        "_links": {
          "$ref": "#/definitions/v1.skill.nlu.evaluations.Links"
        }
      }
    },
    "v1.skill.nlu.evaluations.EvaluationEntity": {
      "type": "object",
      "properties": {
        "startTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "endTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/v1.skill.nlu.evaluations.Status",
          "x-isEnum": true
        },
        "errorMessage": {
          "type": "string",
          "description": "Error message when evaluation job fails"
        },
        "inputs": {
          "$ref": "#/definitions/v1.skill.nlu.evaluations.EvaluationInputs"
        }
      }
    },
    "v1.skill.nlu.evaluations.ConfirmationStatus": {
      "type": "string",
      "description": "An enumeration indicating whether the user has explicitly confirmed or denied the entire intent/slot. Possible values: 'NONE', 'CONFIRMED', 'DENIED'.\n",
      "enum": [
        "NONE",
        "CONFIRMED",
        "DENIED"
      ]
    },
    "v1.skill.nlu.evaluations.Status": {
      "type": "string",
      "enum": [
        "PASSED",
        "FAILED",
        "IN_PROGRESS",
        "ERROR"
      ]
    },
    "v1.skill.nlu.evaluations.ResultsStatus": {
      "type": "string",
      "enum": [
        "PASSED",
        "FAILED"
      ]
    },
    "v1.skill.nlu.evaluations.Evaluation": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.nlu.evaluations.EvaluationEntity"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "id of the job"
            }
          }
        }
      ]
    },
    "v1.skill.nlu.evaluations.GetNLUEvaluationResponseLinks": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/v1.skill.nlu.evaluations.Results"
        }
      }
    },
    "v1.skill.nlu.evaluations.TestCase": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1.skill.nlu.evaluations.ResultsStatus",
          "x-isEnum": true
        },
        "inputs": {
          "$ref": "#/definitions/v1.skill.nlu.evaluations.Inputs"
        },
        "actual": {
          "$ref": "#/definitions/v1.skill.nlu.evaluations.Actual"
        },
        "expected": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.nlu.evaluations.Expected"
          }
        }
      }
    },
    "v1.skill.nlu.evaluations.PaginationContext": {
      "type": "object",
      "properties": {
        "nextToken": {
          "type": "string",
          "description": "opaque token returned if there are more results for the given inputs than `maxResults` from the request."
        }
      }
    },
    "v1.skill.nlu.evaluations.PagedResultsResponsePaginationContext": {
      "type": "object",
      "properties": {
        "nextToken": {
          "type": "string",
          "description": "opaque token returned if there are more results for the given inputs than `maxResults` from the request."
        },
        "totalCount": {
          "type": "string",
          "description": "Total available results for the given query."
        }
      }
    },
    "v1.skill.nlu.evaluations.Results": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "description": "url to get the test case result details Example: /v1/skills/{skillId}/nluEvaluations/{evaluationId}/results\n"
        }
      }
    },
    "v1.skill.nlu.evaluations.Inputs": {
      "type": "object",
      "properties": {
        "utterance": {
          "type": "string"
        },
        "referenceTimestamp": {
          "type": "string",
          "format": "date-time",
          "example": "2018-10-25T23:50:02.135Z",
          "description": "Datetime to use to base date operations on."
        }
      }
    },
    "v1.skill.nlu.evaluations.Actual": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string"
        },
        "intent": {
          "$ref": "#/definitions/v1.skill.nlu.evaluations.Intent"
        }
      }
    },
    "v1.skill.nlu.evaluations.Expected": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string"
        },
        "intent": {
          "$ref": "#/definitions/v1.skill.nlu.evaluations.ExpectedIntent"
        }
      }
    },
    "v1.skill.nlu.evaluations.Intent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "confirmationStatus": {
          "$ref": "#/definitions/v1.skill.nlu.evaluations.ConfirmationStatus",
          "x-isEnum": true
        },
        "slots": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.nlu.evaluations.SlotsProps"
          }
        }
      }
    },
    "v1.skill.nlu.evaluations.ExpectedIntent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "slots": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1.skill.nlu.evaluations.ExpectedIntentSlotsProps"
          }
        }
      }
    },
    "v1.skill.nlu.evaluations.SlotsProps": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "confirmationStatus": {
          "$ref": "#/definitions/v1.skill.nlu.evaluations.ConfirmationStatus",
          "x-isEnum": true
        },
        "resolutions": {
          "$ref": "#/definitions/v1.skill.nlu.evaluations.Resolutions"
        }
      }
    },
    "v1.skill.nlu.evaluations.ExpectedIntentSlotsProps": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "v1.skill.nlu.evaluations.Resolutions": {
      "type": "object",
      "properties": {
        "resolutionsPerAuthority": {
          "type": "array",
          "description": "An array of objects representing each possible authority for entity resolution. An authority represents the source for the data provided for the slot. For a custom slot type, the authority is the slot type you defined.\n",
          "items": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/v1.skill.nlu.evaluations.ResolutionsPerAuthority"
            }
          }
        }
      },
      "description": "A resolutions object representing the results of resolving the words captured from the user's utterance.\n"
    },
    "v1.skill.nlu.evaluations.ResolutionsPerAuthority": {
      "type": "object",
      "properties": {
        "authority": {
          "type": "string",
          "description": "The name of the authority for the slot values. For custom slot types, this authority label incorporates your skill ID and the slot type name.\n"
        },
        "status": {
          "$ref": "#/definitions/v1.skill.nlu.evaluations.ResolutionsPerAuthorityStatus"
        },
        "values": {
          "type": "array",
          "description": "An array of resolved values for the slot.",
          "items": {
            "$ref": "#/definitions/v1.skill.nlu.evaluations.ResolutionsPerAuthorityValue"
          }
        }
      }
    },
    "v1.skill.nlu.evaluations.ResolutionsPerAuthorityStatus": {
      "type": "object",
      "properties": {
        "code": {
          "description": "A code indicating the results of attempting to resolve the user utterance against the defined slot types. This can be one of the following:\nER_SUCCESS_MATCH: The spoken value matched a value or synonym explicitly defined in your custom slot type. ER_SUCCESS_NO_MATCH: The spoken value did not match any values or synonyms explicitly defined in your custom slot type. ER_ERROR_TIMEOUT: An error occurred due to a timeout. ER_ERROR_EXCEPTION: An error occurred due to an exception during processing.\n",
          "$ref": "#/definitions/v1.skill.nlu.evaluations.ResolutionsPerAuthorityStatusCode",
          "x-isEnum": true
        }
      }
    },
    "v1.skill.nlu.evaluations.ResolutionsPerAuthorityStatusCode": {
      "type": "string",
      "description": "A code indicating the results of attempting to resolve the user utterance against the defined slot types. This can be one of the following:\nER_SUCCESS_MATCH: The spoken value matched a value or synonym explicitly defined in your custom slot type. ER_SUCCESS_NO_MATCH: The spoken value did not match any values or synonyms explicitly defined in your custom slot type. ER_ERROR_TIMEOUT: An error occurred due to a timeout. ER_ERROR_EXCEPTION: An error occurred due to an exception during processing.\n",
      "enum": [
        "ER_SUCCESS_MATCH",
        "ER_SUCCESS_NO_MATCH",
        "ER_ERROR_TIMEOUT",
        "ER_ERROR_EXCEPTION"
      ]
    },
    "v1.skill.nlu.evaluations.ResolutionsPerAuthorityValue": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The string for the resolved slot value."
        },
        "id": {
          "type": "string",
          "description": "The unique ID defined for the resolved slot value. This is based on the IDs defined in the slot type definition.\n"
        }
      }
    },
    "v1.skill.nlu.evaluations.Links": {
      "type": "object",
      "properties": {
        "self": {
          "$ref": "#/definitions/v1.Link"
        },
        "next": {
          "$ref": "#/definitions/v1.Link"
        }
      },
      "description": "Links for the API navigation."
    },
    "v1.skill.nlu.annotationSets.CreateNLUAnnotationSetRequest": {
      "type": "object",
      "required": [
        "locale",
        "name"
      ],
      "properties": {
        "locale": {
          "type": "string",
          "description": "The locale of the NLU annotation set"
        },
        "name": {
          "type": "string",
          "description": "The name of NLU annotation set provided by customer"
        }
      }
    },
    "v1.skill.nlu.annotationSets.CreateNLUAnnotationSetResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id used to retrieve the NLU annotation set."
        }
      }
    },
    "v1.skill.nlu.annotationSets.ListNLUAnnotationSetsResponse": {
      "type": "object",
      "properties": {
        "annotationSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.nlu.annotationSets.AnnotationSet"
          }
        },
        "paginationContext": {
          "$ref": "#/definitions/v1.skill.nlu.annotationSets.PaginationContext"
        },
        "_links": {
          "$ref": "#/definitions/v1.skill.nlu.annotationSets.Links"
        }
      }
    },
    "v1.skill.nlu.annotationSets.UpdateNLUAnnotationSetPropertiesRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of NLU annotation set provided by customer"
        }
      }
    },
    "v1.skill.nlu.annotationSets.UpdateNLUAnnotationSetAnnotationsRequest": {
      "type": "object",
      "example": {
        "application/json": {
          "data": [
            {
              "inputs": {
                "utterance": "i want to travel from seattle",
                "referenceTimestamp": "2018-10-25T23:50:02.135Z"
              },
              "expected": [
                {
                  "intent": {
                    "name": "TravelIntent",
                    "slots": {
                      "fromCity": {
                        "value": "seattle"
                      }
                    }
                  }
                }
              ]
            }
          ]
        },
        "text/csv": "utterance,referenceTimestamp,intent,slot[fromCity] i want to travel from seattle,2018-10-25T23:50:02.135Z,TravelIntent,seattle\n"
      }
    },
    "v1.skill.nlu.annotationSets.GetNLUAnnotationSetPropertiesResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.nlu.annotationSets.AnnotationSetEntity"
        }
      ]
    },
    "v1.skill.nlu.annotationSets.AnnotationSetEntity": {
      "type": "object",
      "properties": {
        "locale": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Name of the NLU annotation set"
        },
        "numberOfEntries": {
          "type": "integer",
          "description": "Number of entries which represents number of utterances in each NLU annotation set content"
        },
        "updatedTimestamp": {
          "type": "string",
          "format": "date-time",
          "example": "2018-10-25T23:50:02.135Z",
          "description": "The lastest updated timestamp for the NLU annotation set"
        }
      }
    },
    "v1.skill.nlu.annotationSets.AnnotationSet": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.nlu.annotationSets.AnnotationSetEntity"
        },
        {
          "type": "object",
          "properties": {
            "annotationId": {
              "type": "string",
              "description": "Identifier of the NLU annotation set."
            }
          }
        }
      ]
    },
    "v1.skill.nlu.annotationSets.PaginationContext": {
      "type": "object",
      "properties": {
        "nextToken": {
          "type": "string",
          "description": "Opaque token returned if there are more results for the given inputs than `maxResults` from the request."
        }
      }
    },
    "v1.skill.nlu.annotationSets.Links": {
      "type": "object",
      "properties": {
        "self": {
          "$ref": "#/definitions/v1.Link"
        },
        "next": {
          "$ref": "#/definitions/v1.Link"
        }
      },
      "description": "Links for the API navigation."
    },
    "v1.skill.asr.annotationSets.CreateAsrAnnotationSetRequestObject": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of ASR annotation set. The length of the name cannot exceed 170 chars. Only alphanumeric characters are accepted."
        }
      }
    },
    "v1.skill.asr.annotationSets.CreateAsrAnnotationSetResponse": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "ID used to retrieve the ASR annotation set."
        }
      }
    },
    "v1.skill.asr.annotationSets.ListASRAnnotationSetsResponse": {
      "type": "object",
      "required": [
        "annotationSets"
      ],
      "properties": {
        "annotationSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.asr.annotationSets.AnnotationSetItems"
          }
        },
        "paginationContext": {
          "$ref": "#/definitions/v1.skill.asr.annotationSets.PaginationContext"
        }
      }
    },
    "v1.skill.asr.annotationSets.AnnotationSetItems": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.asr.annotationSets.AnnotationSetMetadata"
        },
        {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "The Annotation set id"
            }
          }
        }
      ]
    },
    "v1.skill.asr.annotationSets.UpdateAsrAnnotationSetPropertiesRequestObject": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of ASR annotation set. The length of the name cannot exceed 170 chars. Only alphanumeric characters are accepted."
        }
      }
    },
    "v1.skill.asr.annotationSets.UpdateAsrAnnotationSetContentsPayload": {
      "type": "object",
      "required": [
        "annotations"
      ],
      "properties": {
        "annotations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.asr.annotationSets.Annotation"
          }
        }
      },
      "description": "This is the payload shema for updating asr annotation set contents. Note for text/csv content type, the  csv header definitions need to follow the properties of '#/definitions/Annotaion'\n"
    },
    "v1.skill.asr.annotationSets.GetAsrAnnotationSetAnnotationsResponse": {
      "type": "object",
      "required": [
        "annotations"
      ],
      "properties": {
        "annotations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.skill.asr.annotationSets.AnnotationWithAudioAsset"
          }
        },
        "paginationContext": {
          "$ref": "#/definitions/v1.skill.asr.annotationSets.PaginationContext"
        }
      },
      "description": "This is the payload schema for annotation set contents. Note that when uploadId and filePathInUpload is present, and the payload content type is 'application/json', audioAsset is included in the returned annotation set content payload. For 'text/csv' annotation set content type, audioAssetDownloadUrl and audioAssetDownloadUrlExpiryTime are included in the csv headers for representing the audio download url and the expiry time of the presigned audio download.\n"
    },
    "v1.skill.asr.annotationSets.AudioAsset": {
      "type": "object",
      "required": [
        "downloadUrl",
        "expiryTime"
      ],
      "properties": {
        "downloadUrl": {
          "type": "string",
          "description": "S3 presigned download url for downloading the audio file"
        },
        "expiryTime": {
          "type": "string",
          "description": "Timestamp when the audio download url expire in ISO 8601 format"
        }
      },
      "description": "Object containing information about downloading audio file"
    },
    "v1.skill.asr.annotationSets.AnnotationWithAudioAsset": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.asr.annotationSets.Annotation"
        },
        {
          "type": "object",
          "properties": {
            "audioAsset": {
              "$ref": "#/definitions/v1.skill.asr.annotationSets.AudioAsset"
            }
          }
        }
      ],
      "description": "Object containing annotation content and audio file download information."
    },
    "v1.skill.asr.annotationSets.Annotation": {
      "type": "object",
      "properties": {
        "uploadId": {
          "type": "string",
          "description": "Upload id obtained when developer creates an upload using catalog API. Required to be present when expectedTranscription is missing. When uploadId is present, filePathInUpload must also be present."
        },
        "filePathInUpload": {
          "type": "string",
          "description": "File path in the uploaded zip file. For example, a zip containing a folder named 'a' and there is an audio b.mp3 in that folder. The file path is a/b.mp3. Notice that forward slash ('/') should be used to concatenate directories. Required to be present when expectedTranscription is missing. When filePathInUpload is present, uploadId must also be present."
        },
        "evaluationWeight": {
          "type": "number",
          "description": "Weight of the test case in an evaluation, the value would be used for calculating metrics such as overall error rate.  The acceptable values are from 1 - 1000. 1 means least significant, 1000 means mot significant. Here is how weight  impact the `OVERALL_ERROR_RATE` calculation: For example, an annotation set consists of 3 annotations and they have weight of 8, 1, 1. The evaluation results  show that only the first annotation test case passed while the rest of the test cases failed. In this case,  the overall error rate is (8 / (8 + 1 + 1)) = 0.8\n",
          "minimum": 1,
          "maximum": 1000
        },
        "expectedTranscription": {
          "type": "string",
          "description": "Expected transcription text for the input audio. The acceptable length of the string is between 1 and 500 Unicode characters. Required to be present when uploadId and filePathInUpload are missing."
        }
      },
      "description": "A single test case that describes the audio reference, expected transcriptions, test case weight etc. Each annotation object must have at least expectedTranscription or, uploadId and filePathInUpload in pair. In any case, filePathInUpload and uploadId must be present or missing in pair."
    },
    "v1.skill.asr.annotationSets.GetASRAnnotationSetsPropertiesResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.asr.annotationSets.AnnotationSetMetadata"
        }
      ]
    },
    "v1.skill.asr.annotationSets.PaginationContext": {
      "type": "object",
      "required": [
        "nextToken"
      ],
      "properties": {
        "nextToken": {
          "type": "string",
          "description": "The page token, this should be passed as a `nextToken` query parameter to the API to retrieve more items. If this field is not present the end of all of the items was reached. If a `maxResults` query parameter was specified then no more than `maxResults` items are returned.\n"
        }
      },
      "description": "This holds all data needed to control pagination from the user.\n"
    },
    "v1.skill.asr.annotationSets.AnnotationSetMetadata": {
      "type": "object",
      "required": [
        "annotationCount",
        "lastUpdatedTimestamp",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the ASR annotation set"
        },
        "annotationCount": {
          "type": "integer",
          "description": "Number of annotations within an annotation set"
        },
        "lastUpdatedTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp for the most recent update of ASR annotation set"
        },
        "eligibleForEvaluation": {
          "type": "boolean",
          "description": "Indicates if the annotation set is eligible for evaluation. A set is not eligible for evaluation if any annotation within the set has a missing uploadId, filePathInUpload, expectedTranscription, or evaluationWeight."
        }
      }
    },
    "v1.skill.asr.evaluations.PostAsrEvaluationsRequestObject": {
      "type": "object",
      "required": [
        "annotationSetId",
        "skill"
      ],
      "properties": {
        "skill": {
          "$ref": "#/definitions/v1.skill.asr.evaluations.Skill"
        },
        "annotationSetId": {
          "type": "string",
          "description": "ID for annotation set"
        }
      }
    },
    "v1.skill.asr.evaluations.Skill": {
      "type": "object",
      "required": [
        "locale",
        "stage"
      ],
      "properties": {
        "stage": {
          "$ref": "#/definitions/v1.StageType",
          "x-isEnum": true
        },
        "locale": {
          "type": "string",
          "description": "skill locale in bcp 47 format"
        }
      }
    },
    "v1.skill.asr.evaluations.PostAsrEvaluationsResponseObject": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "ID used to retrieve the evaluation status/results later."
        }
      }
    },
    "v1.skill.asr.evaluations.GetAsrEvaluationStatusResponseObject": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.asr.evaluations.EvaluationMetadata"
        }
      ]
    },
    "v1.skill.asr.evaluations.ListAsrEvaluationsResponse": {
      "type": "object",
      "required": [
        "evaluations"
      ],
      "properties": {
        "evaluations": {
          "type": "array",
          "description": "an array containing all evaluations that have ever run by developers based on the filter criteria defined in the request",
          "items": {
            "$ref": "#/definitions/v1.skill.asr.evaluations.EvaluationItems"
          }
        },
        "paginationContext": {
          "$ref": "#/definitions/v1.skill.asr.evaluations.PaginationContext"
        }
      },
      "description": "response body for a list evaluation API"
    },
    "v1.skill.asr.evaluations.EvaluationItems": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.asr.evaluations.EvaluationMetadata"
        },
        {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "evaluation id"
            }
          }
        }
      ]
    },
    "v1.skill.asr.evaluations.EvaluationResult": {
      "type": "object",
      "required": [
        "annotation",
        "status"
      ],
      "properties": {
        "status": {
          "$ref": "#/definitions/v1.skill.asr.evaluations.EvaluationResultStatus",
          "x-isEnum": true
        },
        "annotation": {
          "$ref": "#/definitions/v1.skill.asr.evaluations.AnnotationWithAudioAsset"
        },
        "output": {
          "$ref": "#/definitions/v1.skill.asr.evaluations.EvaluationResultOutput"
        },
        "error": {
          "$ref": "#/definitions/v1.skill.asr.evaluations.ErrorObject"
        }
      },
      "description": "evaluation detailed result"
    },
    "v1.skill.asr.evaluations.AnnotationWithAudioAsset": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.skill.asr.evaluations.Annotation"
        },
        {
          "type": "object",
          "required": [
            "audioAsset"
          ],
          "properties": {
            "audioAsset": {
              "$ref": "#/definitions/v1.skill.asr.evaluations.AudioAsset"
            }
          }
        }
      ],
      "description": "object containing annotation content and audio file download information."
    },
    "v1.skill.asr.evaluations.Annotation": {
      "type": "object",
      "required": [
        "evaluationWeight",
        "expectedTranscription",
        "filePathInUpload",
        "uploadId"
      ],
      "properties": {
        "uploadId": {
          "type": "string",
          "description": "upload id obtained when developer creates an upload using catalog API"
        },
        "filePathInUpload": {
          "type": "string",
          "description": "file path in the uploaded zip file. For example, a zip containing a folder named 'a' and there is an audio b.mp3 in that folder. The file path is a/b.mp3. Notice that forward slash ('/') should be used to concatenate directories."
        },
        "evaluationWeight": {
          "type": "number",
          "description": "weight of the test case in an evaluation, the value would be used for calculating metrics such as overall error rate.  The acceptable values are from 1 - 1000. 1 means least significant, 1000 means mot significant. Here is how weight  impact the `OVERALL_ERROR_RATE` calculation: For example, an annotation set consists of 3 annotations and they have weight of 8, 1, 1. The evaluation results  show that only the first annotation test case passed while the rest of the test cases failed. In this case,  the overall error rate is (8 / (8 + 1 + 1)) = 0.8\n",
          "minimum": 1,
          "maximum": 1000
        },
        "expectedTranscription": {
          "type": "string",
          "description": "expected transcription text for the input audio. The acceptable length of the string is between 1 and 500 Unicode characters"
        }
      }
    },
    "v1.skill.asr.evaluations.AudioAsset": {
      "type": "object",
      "required": [
        "downloadUrl",
        "expiryTime"
      ],
      "properties": {
        "downloadUrl": {
          "type": "string",
          "description": "S3 presigned download url for downloading the audio file"
        },
        "expiryTime": {
          "type": "string",
          "description": "timestamp when the audio download url expire in ISO 8601 format"
        }
      },
      "description": "Object containing information about downloading audio file"
    },
    "v1.skill.asr.evaluations.EvaluationResultOutput": {
      "type": "object",
      "required": [
        "transcription"
      ],
      "properties": {
        "transcription": {
          "type": "string",
          "description": "actual transcription returned from ASR for the audio"
        }
      }
    },
    "v1.skill.asr.evaluations.GetAsrEvaluationsResultsResponse": {
      "type": "object",
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "type": "array",
          "description": "array containing all evaluation results.",
          "items": {
            "$ref": "#/definitions/v1.skill.asr.evaluations.EvaluationResult"
          }
        },
        "paginationContext": {
          "$ref": "#/definitions/v1.skill.asr.evaluations.PaginationContext"
        }
      },
      "description": "response for GetAsrEvaluationsResults"
    },
    "v1.skill.asr.evaluations.PaginationContext": {
      "type": "object",
      "required": [
        "nextToken"
      ],
      "properties": {
        "nextToken": {
          "type": "string",
          "description": "The page token, this should be passed as a `nextToken` query parameter to the API to retrieve more items. If this field is not present the end of all of the items was reached. If a `maxResults` query parameter was specified then no more than `maxResults` items are returned.\n"
        }
      },
      "description": "This holds all data needed to control pagination from the user.\n"
    },
    "v1.skill.asr.evaluations.EvaluationStatus": {
      "type": "string",
      "description": "Evaluation status:\n  * `IN_PROGRESS` - indicate the evaluation is in progress.\n  * `COMPLETED` - indicate the evaluation has been completed.\n  * `FAILED` - indicate the evaluation has run into an error.\n",
      "enum": [
        "IN_PROGRESS",
        "COMPLETED",
        "FAILED"
      ]
    },
    "v1.skill.asr.evaluations.ErrorObject": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "description": "human-readable error message"
        },
        "code": {
          "type": "string",
          "description": "machine-readable error code"
        }
      },
      "description": "Object containing information about the error occurred during an evaluation run. This filed would present if an unexpected error occurred during an evaluatin run.\n"
    },
    "v1.skill.asr.evaluations.EvaluationMetadata": {
      "type": "object",
      "required": [
        "completedEvaluationCount",
        "request",
        "startTimestamp",
        "status",
        "totalEvaluationCount"
      ],
      "properties": {
        "status": {
          "$ref": "#/definitions/v1.skill.asr.evaluations.EvaluationStatus",
          "x-isEnum": true
        },
        "totalEvaluationCount": {
          "type": "number",
          "description": "indicate the total number of evaluations that are supposed to be run in the evaluation request"
        },
        "completedEvaluationCount": {
          "type": "number",
          "description": "indicate the number of completed evaluations"
        },
        "startTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "indicate the start time stamp of the ASR evaluation job. ISO-8601 Format."
        },
        "request": {
          "$ref": "#/definitions/v1.skill.asr.evaluations.PostAsrEvaluationsRequestObject"
        },
        "error": {
          "$ref": "#/definitions/v1.skill.asr.evaluations.ErrorObject"
        },
        "result": {
          "$ref": "#/definitions/v1.skill.asr.evaluations.EvaluationMetadataResult"
        }
      },
      "description": "response body for GetAsrEvaluationsStatus API"
    },
    "v1.skill.asr.evaluations.EvaluationMetadataResult": {
      "type": "object",
      "required": [
        "metrics",
        "status"
      ],
      "properties": {
        "status": {
          "$ref": "#/definitions/v1.skill.asr.evaluations.EvaluationResultStatus",
          "x-isEnum": true
        },
        "metrics": {
          "$ref": "#/definitions/v1.skill.asr.evaluations.Metrics"
        }
      },
      "description": "indicate the result of the evaluation. This field would be present if the evaluation status is `COMPLETED`"
    },
    "v1.skill.asr.evaluations.Metrics": {
      "type": "object",
      "required": [
        "overallErrorRate"
      ],
      "properties": {
        "overallErrorRate": {
          "type": "number",
          "description": "overall error rate for the ASR evaluation run"
        }
      }
    },
    "v1.skill.asr.evaluations.EvaluationResultStatus": {
      "type": "string",
      "description": "enum indicating the evaluation result status.\n  * `PASSED` - evaluation result is considered passed\n  * `FAILED` - evaluation result is considered failed\n",
      "enum": [
        "PASSED",
        "FAILED"
      ]
    },
    "v1.skill.resourceSchema.getResourceSchemaResponse": {
      "type": "object",
      "properties": {
        "schemaLocationUrl": {
          "type": "string",
          "description": "S3 presigned URL to schema location."
        },
        "expiryTime": {
          "type": "string",
          "format": "date-time",
          "example": "2020-10-19T23:50:02.135Z",
          "description": "Timestamp when the schema location url expires in ISO 8601 format."
        }
      }
    },
    "v1.smartHomeEvaluation.EvaluationObject": {
      "type": "object",
      "properties": {
        "endTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "startTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/v1.smartHomeEvaluation.EvaluationEntityStatus",
          "x-isEnum": true
        },
        "endpointId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "sourceTestPlanIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "testPlanId": {
          "type": "string"
        }
      }
    },
    "v1.smartHomeEvaluation.paginationContextToken": {
      "type": "object",
      "properties": {
        "nextToken": {
          "type": "string"
        }
      }
    },
    "v1.smartHomeEvaluation.ListSHCapabilityEvaluationsResponse": {
      "type": "object",
      "properties": {
        "paginationContextToken": {
          "$ref": "#/definitions/v1.smartHomeEvaluation.paginationContextToken"
        },
        "evaluations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.smartHomeEvaluation.EvaluationObject"
          }
        }
      }
    },
    "v1.smartHomeEvaluation.EvaluationEntityStatus": {
      "type": "string",
      "enum": [
        "PASSED",
        "FAILED",
        "IN_PROGRESS",
        "ERROR"
      ]
    },
    "v1.smartHomeEvaluation.EvaluateSHCapabilityResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.smartHomeEvaluation.EvaluateSHCapabilityRequest"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            }
          }
        }
      ]
    },
    "v1.smartHomeEvaluation.EvaluateSHCapabilityRequest": {
      "type": "object",
      "required": [
        "capabilityTestPlan",
        "endpoint",
        "stage"
      ],
      "properties": {
        "capabilityTestPlan": {
          "$ref": "#/definitions/v1.smartHomeEvaluation.CapabilityTestPlan"
        },
        "endpoint": {
          "$ref": "#/definitions/v1.smartHomeEvaluation.Endpoint"
        },
        "stage": {
          "$ref": "#/definitions/v1.smartHomeEvaluation.Stage",
          "x-isEnum": true
        }
      }
    },
    "v1.smartHomeEvaluation.CapabilityTestPlan": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "v1.smartHomeEvaluation.Endpoint": {
      "type": "object",
      "properties": {
        "endpointId": {
          "type": "string"
        }
      }
    },
    "v1.smartHomeEvaluation.Stage": {
      "type": "string",
      "enum": [
        "development",
        "live"
      ]
    },
    "v1.smartHomeEvaluation.SHEvaluationResultsMetric": {
      "type": "object",
      "properties": {
        "errorTestCases": {
          "type": "integer"
        },
        "failedTestCases": {
          "type": "integer"
        },
        "passedTestCases": {
          "type": "integer"
        },
        "totalTestCases": {
          "type": "integer"
        }
      }
    },
    "v1.smartHomeEvaluation.GetSHCapabilityEvaluationResponse": {
      "type": "object",
      "properties": {
        "endTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "startTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/v1.smartHomeEvaluation.EvaluationEntityStatus",
          "x-isEnum": true
        },
        "error": {
          "$ref": "#/definitions/v1.smartHomeEvaluation.SHCapabilityError"
        },
        "input": {
          "$ref": "#/definitions/v1.smartHomeEvaluation.EvaluateSHCapabilityRequest"
        },
        "metrics": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1.smartHomeEvaluation.SHEvaluationResultsMetric"
          }
        }
      }
    },
    "v1.smartHomeEvaluation.ListSHTestPlanItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1.smartHomeEvaluation.paginationContext": {
      "type": "object",
      "properties": {
        "nextToken": {
          "type": "string"
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v1.smartHomeEvaluation.PagedResponse": {
      "type": "object",
      "properties": {
        "paginationContext": {
          "$ref": "#/definitions/v1.smartHomeEvaluation.paginationContext"
        }
      }
    },
    "v1.smartHomeEvaluation.ListSHCapabilityTestPlansResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.smartHomeEvaluation.PagedResponse"
        },
        {
          "type": "object",
          "properties": {
            "testPlans": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1.smartHomeEvaluation.ListSHTestPlanItem"
              }
            }
          }
        }
      ]
    },
    "v1.smartHomeEvaluation.TestCaseResultStatus": {
      "type": "string",
      "enum": [
        "PASSED",
        "FAILED",
        "ERROR"
      ]
    },
    "v1.smartHomeEvaluation.TestCaseResult": {
      "type": "object",
      "properties": {
        "actualCapabilityStates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.smartHomeEvaluation.SHCapabilityState"
          }
        },
        "actualResponse": {
          "$ref": "#/definitions/v1.smartHomeEvaluation.SHCapabilityResponse"
        },
        "directive": {
          "$ref": "#/definitions/v1.smartHomeEvaluation.SHCapabilityDirective"
        },
        "error": {
          "$ref": "#/definitions/v1.smartHomeEvaluation.SHCapabilityError"
        },
        "expectedCapabilityStates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.smartHomeEvaluation.SHCapabilityState"
          }
        },
        "expectedResponse": {
          "$ref": "#/definitions/v1.smartHomeEvaluation.SHCapabilityResponse"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1.smartHomeEvaluation.TestCaseResultStatus",
          "x-isEnum": true
        }
      }
    },
    "v1.smartHomeEvaluation.GetSHCapabilityEvaluationResultsResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/v1.smartHomeEvaluation.PagedResponse"
        },
        {
          "type": "object",
          "properties": {
            "testCaseResults": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1.smartHomeEvaluation.TestCaseResult"
              }
            }
          }
        }
      ]
    },
    "v1.smartHomeEvaluation.SHCapabilityState": {
      "type": "object"
    },
    "v1.smartHomeEvaluation.SHCapabilityResponse": {
      "type": "object"
    },
    "v1.smartHomeEvaluation.SHCapabilityDirective": {
      "type": "object"
    },
    "v1.smartHomeEvaluation.SHCapabilityError": {
      "type": "object",
      "properties": {
        "code": {
          "$ref": "#/definitions/v1.smartHomeEvaluation.SHCapabilityErrorCode",
          "x-isEnum": true
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1.smartHomeEvaluation.SHCapabilityErrorCode": {
      "type": "string",
      "enum": [
        "NO_SUCH_ENDPOINT",
        "NO_SUCH_SKILL_STAGE",
        "NO_SUCH_TEST_PLAN",
        "MULTIPLE_MATCHED_ENDPOINTS",
        "MULTIPLE_MATCHED_TEST_PLANS",
        "CAPABILITY_NOT_SUPPORTED",
        "DISCOVERY_FAILED",
        "TEST_CASE_TIME_OUT"
      ]
    },
    "v2.skill.Invocation": {
      "type": "object",
      "properties": {
        "invocationRequest": {
          "$ref": "#/definitions/v2.skill.InvocationRequest"
        },
        "invocationResponse": {
          "$ref": "#/definitions/v2.skill.InvocationResponse"
        },
        "metrics": {
          "$ref": "#/definitions/v2.skill.Metrics"
        }
      }
    },
    "v2.skill.InvocationRequest": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "Skill's Lambda or HTTPS endpoint."
        },
        "body": {
          "type": "object",
          "description": "JSON payload that was sent to the skill's Lambda or HTTPS endpoint.\n",
          "additionalProperties": {
            "type": "object",
            "properties": {}
          }
        }
      }
    },
    "v2.skill.InvocationResponse": {
      "type": "object",
      "properties": {
        "body": {
          "type": "object",
          "description": "Payload that was returned by the skill's Lambda or HTTPS endpoint.\n",
          "additionalProperties": {
            "type": "object",
            "properties": {}
          }
        }
      }
    },
    "v2.skill.Metrics": {
      "type": "object",
      "properties": {
        "skillExecutionTimeInMilliseconds": {
          "type": "integer",
          "description": "How long, in milliseconds, it took the skill's Lambda or HTTPS endpoint to process the request.\n"
        }
      }
    },
    "v2.skill.simulations.SimulationsApiRequest": {
      "type": "object",
      "required": [
        "device",
        "input"
      ],
      "properties": {
        "input": {
          "$ref": "#/definitions/v2.skill.simulations.Input"
        },
        "device": {
          "$ref": "#/definitions/v2.skill.simulations.Device"
        },
        "session": {
          "$ref": "#/definitions/v2.skill.simulations.Session"
        },
        "simulation": {
          "$ref": "#/definitions/v2.skill.simulations.Simulation"
        }
      }
    },
    "v2.skill.simulations.Input": {
      "type": "object",
      "required": [
        "content"
      ],
      "properties": {
        "content": {
          "type": "string",
          "description": "A string corresponding to the utterance text of what a customer would say to Alexa.\n"
        }
      }
    },
    "v2.skill.simulations.Device": {
      "type": "object",
      "required": [
        "locale"
      ],
      "properties": {
        "locale": {
          "type": "string",
          "description": "A valid locale (e.g \"en-US\") for the virtual device used in simulation.\n"
        }
      },
      "description": "Model of a virtual device used for simulation. This device object emulates attributes associated with a real Alexa enabled device.\n"
    },
    "v2.skill.simulations.Session": {
      "type": "object",
      "properties": {
        "mode": {
          "$ref": "#/definitions/v2.skill.simulations.SessionMode",
          "x-isEnum": true
        }
      },
      "description": "Session settings for running current simulation.\n"
    },
    "v2.skill.simulations.SessionMode": {
      "type": "string",
      "description": "Indicate the session mode of the current simulation is using.\n",
      "enum": [
        "DEFAULT",
        "FORCE_NEW_SESSION"
      ]
    },
    "v2.skill.simulations.Simulation": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v2.skill.simulations.SimulationType",
          "x-isEnum": true
        }
      },
      "description": "Simulation settings for the current simulation request.\n"
    },
    "v2.skill.simulations.SimulationType": {
      "type": "string",
      "description": "String indicating the type of simulation request. Possible values are \"DEFAULT\" and \"NFI_ISOLATED_SIMULATION\". \"NFI_ISOLATED_SIMULATION\" is used to test the NFI(Name Free Interaction) enabled skills in isolation. This field is reserved for testing Name Free Interactions(NFI). Skills that are eligible to add NFI can only use this field. To learn more, visit https://developer.amazon.com/en-US/docs/alexa/custom-skills/understand-name-free-interaction-for-custom-skills.html\n",
      "enum": [
        "DEFAULT",
        "NFI_ISOLATED_SIMULATION"
      ]
    },
    "v2.skill.simulations.SimulationsApiResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the simulation resource."
        },
        "status": {
          "$ref": "#/definitions/v2.skill.simulations.SimulationsApiResponseStatus",
          "x-isEnum": true
        },
        "result": {
          "$ref": "#/definitions/v2.skill.simulations.SimulationResult"
        }
      }
    },
    "v2.skill.simulations.SimulationsApiResponseStatus": {
      "type": "string",
      "description": "String that specifies the current status of the simulation. Possible values are \"IN_PROGRESS\", \"SUCCESSFUL\", and \"FAILED\".\n",
      "enum": [
        "IN_PROGRESS",
        "SUCCESSFUL",
        "FAILED"
      ]
    },
    "v2.skill.simulations.SimulationResult": {
      "type": "object",
      "properties": {
        "alexaExecutionInfo": {
          "$ref": "#/definitions/v2.skill.simulations.AlexaExecutionInfo"
        },
        "skillExecutionInfo": {
          "$ref": "#/definitions/v2.skill.simulations.SkillExecutionInfo"
        },
        "error": {
          "$ref": "#/definitions/v2.Error"
        }
      }
    },
    "v2.skill.simulations.SkillExecutionInfo": {
      "type": "object",
      "properties": {
        "invocations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v2.skill.Invocation"
          }
        }
      }
    },
    "v2.skill.simulations.AlexaExecutionInfo": {
      "type": "object",
      "properties": {
        "alexaResponses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v2.skill.simulations.AlexaResponse"
          }
        },
        "consideredIntents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v2.skill.simulations.Intent"
          }
        }
      }
    },
    "v2.skill.simulations.AlexaResponse": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of Alexa response"
        },
        "content": {
          "description": "The detail information needs to exposed in this type of Alexa response.\n",
          "$ref": "#/definitions/v2.skill.simulations.AlexaResponseContent"
        }
      }
    },
    "v2.skill.simulations.AlexaResponseContent": {
      "type": "object",
      "properties": {
        "caption": {
          "type": "string",
          "description": "The plain text from Alexa speech response."
        }
      }
    },
    "v2.skill.simulations.Intent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "confirmationStatus": {
          "$ref": "#/definitions/v2.skill.simulations.ConfirmationStatusType",
          "x-isEnum": true
        },
        "slots": {
          "type": "object",
          "description": "A map of key-value pairs that further describes what the user meant based on a predefined intent schema. The map can be empty.\n",
          "additionalProperties": {
            "$ref": "#/definitions/v2.skill.simulations.Slot"
          }
        }
      }
    },
    "v2.skill.simulations.ConfirmationStatusType": {
      "type": "string",
      "description": "An enumeration indicating whether the user has explicitly confirmed or denied the entire intent. Possible values: \"NONE\", \"CONFIRMED\", \"DENIED\".\n",
      "enum": [
        "NONE",
        "CONFIRMED",
        "DENIED"
      ]
    },
    "v2.skill.simulations.Slot": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "confirmationStatus": {
          "$ref": "#/definitions/v2.skill.simulations.ConfirmationStatusType",
          "x-isEnum": true
        },
        "resolutions": {
          "$ref": "#/definitions/v2.skill.simulations.SlotResolutions"
        }
      }
    },
    "v2.skill.simulations.SlotResolutions": {
      "type": "object",
      "properties": {
        "resolutionsPerAuthority": {
          "type": "array",
          "description": "An array of objects representing each possible authority for entity resolution. An authority represents the source for the data provided for the slot. For a custom slot type, the authority is the slot type you defined.\n",
          "items": {
            "$ref": "#/definitions/v2.skill.simulations.ResolutionsPerAuthorityItems"
          }
        }
      },
      "description": "A resolutions object representing the results of resolving the words captured from the user's utterance.\n"
    },
    "v2.skill.simulations.ResolutionsPerAuthorityItems": {
      "type": "object",
      "properties": {
        "authority": {
          "type": "string",
          "description": "The name of the authority for the slot values. For custom slot types, this authority label incorporates your skill ID and the slot type name.\n"
        },
        "status": {
          "$ref": "#/definitions/v2.skill.simulations.ResolutionsPerAuthorityStatus"
        },
        "values": {
          "type": "array",
          "description": "An array of resolved values for the slot.",
          "items": {
            "$ref": "#/definitions/v2.skill.simulations.ResolutionsPerAuthorityValueItems"
          }
        }
      }
    },
    "v2.skill.simulations.ResolutionsPerAuthorityStatus": {
      "type": "object",
      "properties": {
        "code": {
          "$ref": "#/definitions/v2.skill.simulations.ResolutionsPerAuthorityStatusCode",
          "x-isEnum": true
        }
      },
      "description": "An object representing the status of entity resolution for the slot."
    },
    "v2.skill.simulations.ResolutionsPerAuthorityStatusCode": {
      "type": "string",
      "description": "A code indicating the results of attempting to resolve the user utterance against the defined slot types. This can be one of the following:\nER_SUCCESS_MATCH: The spoken value matched a value or synonym explicitly defined in your custom slot type. ER_SUCCESS_NO_MATCH: The spoken value did not match any values or synonyms explicitly defined in your custom slot type. ER_ERROR_TIMEOUT: An error occurred due to a timeout. ER_ERROR_EXCEPTION: An error occurred due to an exception during processing.\n",
      "enum": [
        "ER_SUCCESS_MATCH",
        "ER_SUCCESS_NO_MATCH",
        "ER_ERROR_TIMEOUT",
        "ER_ERROR_EXCEPTION"
      ]
    },
    "v2.skill.simulations.ResolutionsPerAuthorityValueItems": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The string for the resolved slot value."
        },
        "id": {
          "type": "string",
          "description": "The unique ID defined for the resolved slot value. This is based on the IDs defined in the slot type definition.\n"
        }
      },
      "description": "An object representing the resolved value for the slot, based on the user's utterance and the slot type definition.\n"
    },
    "v2.skill.invocations.invocationsApiRequest": {
      "type": "object",
      "required": [
        "endpointRegion",
        "skillRequest"
      ],
      "properties": {
        "endpointRegion": {
          "$ref": "#/definitions/v2.skill.invocations.EndPointRegions",
          "x-isEnum": true
        },
        "skillRequest": {
          "$ref": "#/definitions/v2.skill.invocations.SkillRequest"
        }
      }
    },
    "v2.skill.invocations.EndPointRegions": {
      "type": "string",
      "description": "Region of endpoint to be called.",
      "enum": [
        "NA",
        "EU",
        "FE",
        "default"
      ]
    },
    "v2.skill.invocations.SkillRequest": {
      "type": "object",
      "required": [
        "body"
      ],
      "properties": {
        "body": {
          "type": "object",
          "description": "ASK request body schema as defined in the public facing documentation (https://developer.amazon.com/en-US/docs/alexa/custom-skills/request-and-response-json-reference.html#request-body-syntax)\n",
          "properties": {}
        }
      }
    },
    "v2.skill.invocations.InvocationsApiResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v2.skill.invocations.InvocationResponseStatus",
          "x-isEnum": true
        },
        "result": {
          "$ref": "#/definitions/v2.skill.invocations.InvocationResponseResult"
        }
      }
    },
    "v2.skill.invocations.InvocationResponseStatus": {
      "type": "string",
      "description": "String that specifies the status of skill invocation. Possible values are \"SUCCESSFUL\", and \"FAILED\".\n",
      "enum": [
        "SUCCESSFUL",
        "FAILED"
      ]
    },
    "v2.skill.invocations.InvocationResponseResult": {
      "type": "object",
      "properties": {
        "skillExecutionInfo": {
          "$ref": "#/definitions/v2.skill.Invocation"
        },
        "error": {
          "$ref": "#/definitions/v2.Error"
        }
      }
    }
  }
}